
c:/Users/JohnR/Desktop/VSBoron/Boron_VS/target/4.1.0/boron/Boron_VS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9c80  000b9c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b9ca4  000b9ca4  00009ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b9cac  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  2003e4a4  000b9cb0  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  2003e530  2003e530  0002e530  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b9d38  000b9d38  00029d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9d60  000b9d60  00029d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001593f5  00000000  00000000  00029d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00018108  00000000  00000000  00183159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003fedb  00000000  00000000  0019b261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000031f8  00000000  00000000  001db13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b018  00000000  00000000  001de334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043b67  00000000  00000000  001e934c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004fdaf  00000000  00000000  0022ceb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013d6e8  00000000  00000000  0027cc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009180  00000000  00000000  003ba34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fa67 	bl	b9504 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fa6f 	bl	b9520 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e4a4 	.word	0x2003e4a4
   b404c:	000b9cb0 	.word	0x000b9cb0
   b4050:	2003e52c 	.word	0x2003e52c
   b4054:	2003e530 	.word	0x2003e530
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fb87 	bl	b6774 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9c50 	.word	0x000b9c50
   b4080:	000b9c74 	.word	0x000b9c74

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb0c 	b.w	b46a0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 feaf 	bl	b4dec <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bb27 	b.w	b66e4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bd8b 	b.w	b5bb0 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bd89 	b.w	b5bb0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bd8f 	b.w	b5bc0 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <lps28dfw_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
   b40b2:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   b40b4:	6844      	ldr	r4, [r0, #4]
   b40b6:	68c0      	ldr	r0, [r0, #12]
   b40b8:	46a4      	mov	ip, r4
  return ret;
}
   b40ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   b40be:	4760      	bx	ip

000b40c0 <lps28dfw_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_write_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
   b40c0:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   b40c2:	6804      	ldr	r4, [r0, #0]
   b40c4:	68c0      	ldr	r0, [r0, #12]
   b40c6:	46a4      	mov	ip, r4
  return ret;
}
   b40c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   b40cc:	4760      	bx	ip

000b40ce <lps28dfw_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_id_get(stmdev_ctx_t *ctx, lps28dfw_id_t *val)
{
   b40ce:	b513      	push	{r0, r1, r4, lr}
  uint8_t reg;
  int32_t ret;

  ret = lps28dfw_read_reg(ctx, LPS28DFW_WHO_AM_I, &reg, 1);
   b40d0:	2301      	movs	r3, #1
{
   b40d2:	460c      	mov	r4, r1
  ret = lps28dfw_read_reg(ctx, LPS28DFW_WHO_AM_I, &reg, 1);
   b40d4:	f10d 0207 	add.w	r2, sp, #7
   b40d8:	210f      	movs	r1, #15
   b40da:	f7ff ffea 	bl	b40b2 <lps28dfw_read_reg>
  val->whoami = reg;
   b40de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b40e2:	7023      	strb	r3, [r4, #0]

  return ret;
}
   b40e4:	b002      	add	sp, #8
   b40e6:	bd10      	pop	{r4, pc}

000b40e8 <lps28dfw_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_init_set(stmdev_ctx_t *ctx, lps28dfw_init_t val)
{
   b40e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps28dfw_ctrl_reg2_t ctrl_reg2;
  lps28dfw_ctrl_reg3_t ctrl_reg3;
  uint8_t reg[2];
  int32_t ret;

  ret = lps28dfw_read_reg(ctx, LPS28DFW_CTRL_REG2, reg, 2);
   b40ea:	2302      	movs	r3, #2
{
   b40ec:	460d      	mov	r5, r1
  ret = lps28dfw_read_reg(ctx, LPS28DFW_CTRL_REG2, reg, 2);
   b40ee:	aa01      	add	r2, sp, #4
   b40f0:	2111      	movs	r1, #17
{
   b40f2:	4604      	mov	r4, r0
  ret = lps28dfw_read_reg(ctx, LPS28DFW_CTRL_REG2, reg, 2);
   b40f4:	f7ff ffdd 	bl	b40b2 <lps28dfw_read_reg>
  if (ret == 0)
   b40f8:	b9b8      	cbnz	r0, b412a <lps28dfw_init_set+0x42>
    *target = *source;
   b40fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b40fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
   b4102:	f88d 3000 	strb.w	r3, [sp]
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);

    switch (val)
   b4106:	b195      	cbz	r5, b412e <lps28dfw_init_set+0x46>
   b4108:	2d01      	cmp	r5, #1
        ctrl_reg2.boot = PROPERTY_ENABLE;
        ret = lps28dfw_write_reg(ctx, LPS28DFW_CTRL_REG2,
                                 (uint8_t *)&ctrl_reg2, 1);
        break;
      case LPS28DFW_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
   b410a:	bf13      	iteet	ne
   b410c:	f89d 3000 	ldrbne.w	r3, [sp]
        ctrl_reg2.boot = PROPERTY_ENABLE;
   b4110:	b2db      	uxtbeq	r3, r3
   b4112:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
        ctrl_reg2.swreset = PROPERTY_ENABLE;
   b4116:	f043 0304 	orrne.w	r3, r3, #4
   b411a:	f88d 3000 	strb.w	r3, [sp]
        ret = lps28dfw_write_reg(ctx, LPS28DFW_CTRL_REG2,
   b411e:	466a      	mov	r2, sp
   b4120:	2301      	movs	r3, #1
      case LPS28DFW_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
        ret = lps28dfw_write_reg(ctx, LPS28DFW_CTRL_REG2, reg, 2);
   b4122:	2111      	movs	r1, #17
   b4124:	4620      	mov	r0, r4
   b4126:	f7ff ffcb 	bl	b40c0 <lps28dfw_write_reg>
                                 (uint8_t *)&ctrl_reg2, 1);
        break;
    }
  }
  return ret;
}
   b412a:	b003      	add	sp, #12
   b412c:	bd30      	pop	{r4, r5, pc}
        ctrl_reg2.bdu = PROPERTY_ENABLE;
   b412e:	f89d 3000 	ldrb.w	r3, [sp]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
   b4132:	f042 0201 	orr.w	r2, r2, #1
        ctrl_reg2.bdu = PROPERTY_ENABLE;
   b4136:	f043 0308 	orr.w	r3, r3, #8
   b413a:	f88d 3000 	strb.w	r3, [sp]
    *target = *source;
   b413e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4142:	f88d 2005 	strb.w	r2, [sp, #5]
        ret = lps28dfw_write_reg(ctx, LPS28DFW_CTRL_REG2, reg, 2);
   b4146:	2302      	movs	r3, #2
   b4148:	aa01      	add	r2, sp, #4
   b414a:	e7ea      	b.n	b4122 <lps28dfw_init_set+0x3a>

000b414c <lps28dfw_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_status_get(stmdev_ctx_t *ctx, lps28dfw_stat_t *val)
{
   b414c:	b530      	push	{r4, r5, lr}
   b414e:	b085      	sub	sp, #20
   b4150:	460c      	mov	r4, r1
  lps28dfw_int_source_t int_source;
  lps28dfw_ctrl_reg2_t ctrl_reg2;
  lps28dfw_status_t status;
  int32_t ret;

  ret = lps28dfw_read_reg(ctx, LPS28DFW_CTRL_REG2,
   b4152:	2301      	movs	r3, #1
   b4154:	aa02      	add	r2, sp, #8
   b4156:	2111      	movs	r1, #17
{
   b4158:	4605      	mov	r5, r0
  ret = lps28dfw_read_reg(ctx, LPS28DFW_CTRL_REG2,
   b415a:	f7ff ffaa 	bl	b40b2 <lps28dfw_read_reg>
                          (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
   b415e:	b998      	cbnz	r0, b4188 <lps28dfw_status_get+0x3c>
  {
    ret = lps28dfw_read_reg(ctx, LPS28DFW_INT_SOURCE, (uint8_t *)&int_source, 1);
   b4160:	2301      	movs	r3, #1
   b4162:	aa01      	add	r2, sp, #4
   b4164:	2124      	movs	r1, #36	; 0x24
   b4166:	4628      	mov	r0, r5
   b4168:	f7ff ffa3 	bl	b40b2 <lps28dfw_read_reg>
  }
  if (ret == 0)
   b416c:	b960      	cbnz	r0, b4188 <lps28dfw_status_get+0x3c>
  {
    ret = lps28dfw_read_reg(ctx, LPS28DFW_STATUS, (uint8_t *)&status, 1);
   b416e:	2301      	movs	r3, #1
   b4170:	aa03      	add	r2, sp, #12
   b4172:	2127      	movs	r1, #39	; 0x27
   b4174:	4628      	mov	r0, r5
   b4176:	f7ff ff9c 	bl	b40b2 <lps28dfw_read_reg>
  }
  if (ret == 0)
   b417a:	b928      	cbnz	r0, b4188 <lps28dfw_status_get+0x3c>
  {
    ret = lps28dfw_read_reg(ctx, LPS28DFW_INTERRUPT_CFG,
   b417c:	2301      	movs	r3, #1
   b417e:	466a      	mov	r2, sp
   b4180:	210b      	movs	r1, #11
   b4182:	4628      	mov	r0, r5
   b4184:	f7ff ff95 	bl	b40b2 <lps28dfw_read_reg>
                            (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
  val->boot      = int_source.boot_on;
   b4188:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val->sw_reset  = ctrl_reg2.swreset;
   b418c:	f89d 2008 	ldrb.w	r2, [sp, #8]
  val->boot      = int_source.boot_on;
   b4190:	f3c3 11c0 	ubfx	r1, r3, #7, #1
  val->sw_reset  = ctrl_reg2.swreset;
   b4194:	f3c2 0380 	ubfx	r3, r2, #2, #1
   b4198:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  val->drdy_pres = status.p_da;
   b419c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b41a0:	f3c1 0500 	ubfx	r5, r1, #0, #1
  val->sw_reset  = ctrl_reg2.swreset;
   b41a4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  val->drdy_temp = status.t_da;
  val->ovr_pres  = status.p_or;
  val->ovr_temp  = status.t_or;
  val->end_meas  = ~ctrl_reg2.oneshot;
   b41a8:	f3c2 0200 	ubfx	r2, r2, #0, #1
  val->drdy_temp = status.t_da;
   b41ac:	f3c1 0540 	ubfx	r5, r1, #1, #1
  val->sw_reset  = ctrl_reg2.swreset;
   b41b0:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
  val->end_meas  = ~ctrl_reg2.oneshot;
   b41b4:	43d2      	mvns	r2, r2
  val->ovr_pres  = status.p_or;
   b41b6:	f3c1 1500 	ubfx	r5, r1, #4, #1
  val->sw_reset  = ctrl_reg2.swreset;
   b41ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  val->ovr_temp  = status.t_or;
   b41be:	f3c1 1140 	ubfx	r1, r1, #5, #1
  val->sw_reset  = ctrl_reg2.swreset;
   b41c2:	0192      	lsls	r2, r2, #6
   b41c4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   b41c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
   b41cc:	4313      	orrs	r3, r2
  val->ref_done = ~interrupt_cfg.autozero;
   b41ce:	f89d 2000 	ldrb.w	r2, [sp]
   b41d2:	f3c2 1240 	ubfx	r2, r2, #5, #1
   b41d6:	43d2      	mvns	r2, r2
  val->sw_reset  = ctrl_reg2.swreset;
   b41d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b41dc:	7023      	strb	r3, [r4, #0]

  return ret;
}
   b41de:	b005      	add	sp, #20
   b41e0:	bd30      	pop	{r4, r5, pc}

000b41e2 <lps28dfw_trigger_sw>:
  * @param  md    the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_trigger_sw(stmdev_ctx_t *ctx, lps28dfw_md_t *md)
{
   b41e2:	b513      	push	{r0, r1, r4, lr}
  lps28dfw_ctrl_reg2_t ctrl_reg2;
  int32_t ret = 0;

  if (md->odr == LPS28DFW_ONE_SHOT)
   b41e4:	784b      	ldrb	r3, [r1, #1]
{
   b41e6:	4604      	mov	r4, r0
  if (md->odr == LPS28DFW_ONE_SHOT)
   b41e8:	b99b      	cbnz	r3, b4212 <lps28dfw_trigger_sw+0x30>
  {
    ret = lps28dfw_read_reg(ctx, LPS28DFW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
   b41ea:	2301      	movs	r3, #1
   b41ec:	aa01      	add	r2, sp, #4
   b41ee:	2111      	movs	r1, #17
   b41f0:	f7ff ff5f 	bl	b40b2 <lps28dfw_read_reg>
    ctrl_reg2.oneshot = PROPERTY_ENABLE;
   b41f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b41f8:	f043 0301 	orr.w	r3, r3, #1
   b41fc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (ret == 0)
   b4200:	b928      	cbnz	r0, b420e <lps28dfw_trigger_sw+0x2c>
    {
      ret = lps28dfw_write_reg(ctx, LPS28DFW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
   b4202:	2301      	movs	r3, #1
   b4204:	aa01      	add	r2, sp, #4
   b4206:	2111      	movs	r1, #17
   b4208:	4620      	mov	r0, r4
   b420a:	f7ff ff59 	bl	b40c0 <lps28dfw_write_reg>
    }
  }
  return ret;
}
   b420e:	b002      	add	sp, #8
   b4210:	bd10      	pop	{r4, pc}
  int32_t ret = 0;
   b4212:	2000      	movs	r0, #0
  return ret;
   b4214:	e7fb      	b.n	b420e <lps28dfw_trigger_sw+0x2c>
	...

000b4218 <lps28dfw_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps28dfw_data_get(stmdev_ctx_t *ctx, lps28dfw_md_t *md,
                          lps28dfw_data_t *data)
{
   b4218:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t buff[5];
  int32_t ret;

  ret = lps28dfw_read_reg(ctx, LPS28DFW_PRESS_OUT_XL, buff, 5);
   b421a:	2305      	movs	r3, #5
{
   b421c:	460d      	mov	r5, r1
   b421e:	4614      	mov	r4, r2
  ret = lps28dfw_read_reg(ctx, LPS28DFW_PRESS_OUT_XL, buff, 5);
   b4220:	2128      	movs	r1, #40	; 0x28
   b4222:	466a      	mov	r2, sp
   b4224:	f7ff ff45 	bl	b40b2 <lps28dfw_read_reg>

  /* pressure conversion */
  data->pressure.raw = (int32_t)buff[2];
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[1];
   b4228:	f89d 3001 	ldrb.w	r3, [sp, #1]
  data->pressure.raw = (int32_t)buff[2];
   b422c:	f89d 2002 	ldrb.w	r2, [sp, #2]
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[1];
   b4230:	eb03 2202 	add.w	r2, r3, r2, lsl #8
  data->pressure.raw = (data->pressure.raw * 256) + (int32_t) buff[0];
   b4234:	f89d 3000 	ldrb.w	r3, [sp]
   b4238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  data->pressure.raw = data->pressure.raw * 256;
   b423c:	021b      	lsls	r3, r3, #8
   b423e:	6063      	str	r3, [r4, #4]

  switch (md->fs)
   b4240:	782a      	ldrb	r2, [r5, #0]
  data->pressure.raw = data->pressure.raw * 256;
   b4242:	ee07 3a90 	vmov	s15, r3
  switch (md->fs)
   b4246:	b122      	cbz	r2, b4252 <lps28dfw_data_get+0x3a>
   b4248:	2a01      	cmp	r2, #1
   b424a:	d01a      	beq.n	b4282 <lps28dfw_data_get+0x6a>
      break;
    case LPS28DFW_4000hPa:
      data->pressure.hpa = lps28dfw_from_fs4000_to_hPa(data->pressure.raw);
      break;
    default:
      data->pressure.hpa = 0.0f;
   b424c:	2300      	movs	r3, #0
   b424e:	6023      	str	r3, [r4, #0]
      break;
   b4250:	e003      	b.n	b425a <lps28dfw_data_get+0x42>
  return ((float)lsb / 1048576.0f);   /* 4096.0f * 256 */
   b4252:	eefa 7ac6 	vcvt.f32.s32	s15, s15, #20
      data->pressure.hpa = lps28dfw_from_fs4000_to_hPa(data->pressure.raw);
   b4256:	edc4 7a00 	vstr	s15, [r4]
  }

  /* temperature conversion */
  data->heat.raw = (int16_t)buff[4];
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
   b425a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   b425e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  return ((float)lsb / 100.0f);
   b4262:	eddf 6a09 	vldr	s13, [pc, #36]	; b4288 <lps28dfw_data_get+0x70>
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
   b4266:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   b426a:	b21b      	sxth	r3, r3
  return ((float)lsb / 100.0f);
   b426c:	ee07 3a90 	vmov	s15, r3
   b4270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data->heat.raw = (data->heat.raw * 256) + (int16_t) buff[3];
   b4274:	81a3      	strh	r3, [r4, #12]
  return ((float)lsb / 100.0f);
   b4276:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  data->heat.deg_c = lps28dfw_from_lsb_to_celsius(data->heat.raw);
   b427a:	ed84 7a02 	vstr	s14, [r4, #8]

  return ret;
}
   b427e:	b003      	add	sp, #12
   b4280:	bd30      	pop	{r4, r5, pc}
  return ((float)lsb /  524288.0f);   /* 2048.0f * 256 */
   b4282:	eefa 7ae6 	vcvt.f32.s32	s15, s15, #19
   b4286:	e7e6      	b.n	b4256 <lps28dfw_data_get+0x3e>
   b4288:	42c80000 	.word	0x42c80000

000b428c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b428c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b428e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4290:	4606      	mov	r6, r0
   b4292:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4294:	da0b      	bge.n	b42ae <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b4296:	2a0a      	cmp	r2, #10
   b4298:	d109      	bne.n	b42ae <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b429a:	212d      	movs	r1, #45	; 0x2d
   b429c:	f001 fff6 	bl	b628c <_ZN5Print5printEc>
            val = -n;
   b42a0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b42a2:	b2ea      	uxtb	r2, r5
   b42a4:	4630      	mov	r0, r6
    }
}
   b42a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b42aa:	f002 b80c 	b.w	b62c6 <_ZN5Print11printNumberEmh>
            val = n;
   b42ae:	4621      	mov	r1, r4
   b42b0:	e7f7      	b.n	b42a2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b42b2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b42b2:	b40e      	push	{r1, r2, r3}
   b42b4:	b500      	push	{lr}
   b42b6:	b08c      	sub	sp, #48	; 0x30
   b42b8:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b42ba:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b42be:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b42c2:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42c4:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b42c8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42ca:	6801      	ldr	r1, [r0, #0]
   b42cc:	aa04      	add	r2, sp, #16
   b42ce:	201e      	movs	r0, #30
    attr.flags = 0;
   b42d0:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b42d4:	f001 fb74 	bl	b59c0 <log_message_v>
}
   b42d8:	b00c      	add	sp, #48	; 0x30
   b42da:	f85d eb04 	ldr.w	lr, [sp], #4
   b42de:	b003      	add	sp, #12
   b42e0:	4770      	bx	lr
   b42e2:	0000      	movs	r0, r0
   b42e4:	0000      	movs	r0, r0
	...

000b42e8 <_Z13Get_Bat_Levelv>:
      
  */
}


void Get_Bat_Level(){
   b42e8:	b508      	push	{r3, lr}
batLevel = analogRead(analogPin);  // read the analog ADC Pin A0, output = 0-4095 (for 3.3V)
   b42ea:	4b0d      	ldr	r3, [pc, #52]	; (b4320 <_Z13Get_Bat_Levelv+0x38>)
   b42ec:	8818      	ldrh	r0, [r3, #0]
   b42ee:	f003 f87d 	bl	b73ec <analogRead>
batLevel = (batLevel*.001611); // convert to a voltage level, i,e for 6.6V, X/2  res.divider, out -= 3.3V, count = 4095
   b42f2:	ee07 0a90 	vmov	s15, r0
   b42f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b42fa:	ee17 0a90 	vmov	r0, s15
   b42fe:	f004 fb61 	bl	b89c4 <__aeabi_f2d>
   b4302:	a305      	add	r3, pc, #20	; (adr r3, b4318 <_Z13Get_Bat_Levelv+0x30>)
   b4304:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4308:	f004 fbb4 	bl	b8a74 <__aeabi_dmul>
   b430c:	f004 feaa 	bl	b9064 <__aeabi_d2f>
   b4310:	4b04      	ldr	r3, [pc, #16]	; (b4324 <_Z13Get_Bat_Levelv+0x3c>)
   b4312:	6018      	str	r0, [r3, #0]
 }
   b4314:	bd08      	pop	{r3, pc}
   b4316:	bf00      	nop
   b4318:	1416377a 	.word	0x1416377a
   b431c:	3f5a6506 	.word	0x3f5a6506
   b4320:	2003e4a4 	.word	0x2003e4a4
   b4324:	2003e548 	.word	0x2003e548

000b4328 <_Z15get_Temperaturev>:

void get_Temperature(){
   b4328:	b510      	push	{r4, lr}
  pressureSensor.getSensorData();
   b432a:	4c04      	ldr	r4, [pc, #16]	; (b433c <_Z15get_Temperaturev+0x14>)
   b432c:	4620      	mov	r0, r4
   b432e:	f001 f9a9 	bl	b5684 <_ZN8LPS28DFW13getSensorDataEv>
  // Print temperature and pressure
 //Serial.print("Water Temperature: ");
 tempSense = (pressureSensor.data.heat.deg_c);// post temperature
   b4332:	4b03      	ldr	r3, [pc, #12]	; (b4340 <_Z15get_Temperaturev+0x18>)
   b4334:	68a2      	ldr	r2, [r4, #8]
   b4336:	601a      	str	r2, [r3, #0]
 //Serial.print(pressureSensor.data.heat.deg_c);
}
   b4338:	bd10      	pop	{r4, pc}
   b433a:	bf00      	nop
   b433c:	2003e55c 	.word	0x2003e55c
   b4340:	2003e590 	.word	0x2003e590

000b4344 <_Z15get_ALS_Readingv>:
 void get_ALS_Reading(){
   b4344:	b570      	push	{r4, r5, r6, lr}
    Serial.println("");
   b4346:	f002 fdbb 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b434a:	4923      	ldr	r1, [pc, #140]	; (b43d8 <_Z15get_ALS_Readingv+0x94>)
   
    // Only print every second
    //delay(1000);
    //Sample light levels 10 times and average the result. Store in X4
   for (int i= 0; i<10; i++){
  ALS_Filtered = (veml.readALS()) + (ALS_Filtered);
   b434c:	4e23      	ldr	r6, [pc, #140]	; (b43dc <_Z15get_ALS_Readingv+0x98>)
   b434e:	4c24      	ldr	r4, [pc, #144]	; (b43e0 <_Z15get_ALS_Readingv+0x9c>)
    Serial.println("");
   b4350:	f001 ffaf 	bl	b62b2 <_ZN5Print7printlnEPKc>
     Serial.println("");//White Space
   b4354:	f002 fdb4 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4358:	491f      	ldr	r1, [pc, #124]	; (b43d8 <_Z15get_ALS_Readingv+0x94>)
   b435a:	f001 ffaa 	bl	b62b2 <_ZN5Print7printlnEPKc>
   b435e:	250a      	movs	r5, #10
  ALS_Filtered = (veml.readALS()) + (ALS_Filtered);
   b4360:	4630      	mov	r0, r6
   b4362:	f000 fed0 	bl	b5106 <_ZN17Adafruit_VEML77007readALSEv>
   b4366:	ee07 0a90 	vmov	s15, r0
   b436a:	ed94 7a00 	vldr	s14, [r4]
   b436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  delay (100);//delay to chaeck longer term readings
   b4372:	2064      	movs	r0, #100	; 0x64
  ALS_Filtered = (veml.readALS()) + (ALS_Filtered);
   b4374:	ee77 7a87 	vadd.f32	s15, s15, s14
   b4378:	edc4 7a00 	vstr	s15, [r4]
  delay (100);//delay to chaeck longer term readings
   b437c:	f002 f962 	bl	b6644 <delay>
   for (int i= 0; i<10; i++){
   b4380:	3d01      	subs	r5, #1
   b4382:	d1ed      	bne.n	b4360 <_Z15get_ALS_Readingv+0x1c>
  //Serial.println  (veml.readALS());
  //delay (1000); 
  
   }
   avgLightLevel=(ALS_Filtered/10);// store result in var. avgLightLevel
   b4384:	ed94 7a00 	vldr	s14, [r4]
   b4388:	4b16      	ldr	r3, [pc, #88]	; (b43e4 <_Z15get_ALS_Readingv+0xa0>)
   b438a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   b438e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   ALS_Filtered = 0;// clear varable
      
      turbCorrected = 1;//(avgLightLevel-turbBaseline;
   b4392:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   avgLightLevel=(ALS_Filtered/10);// store result in var. avgLightLevel
   b4396:	edc3 7a00 	vstr	s15, [r3]
   ALS_Filtered = 0;// clear varable
   b439a:	2300      	movs	r3, #0
   b439c:	6023      	str	r3, [r4, #0]
      turbCorrected = 1;//(avgLightLevel-turbBaseline;
   b439e:	4b12      	ldr	r3, [pc, #72]	; (b43e8 <_Z15get_ALS_Readingv+0xa4>)
   b43a0:	601a      	str	r2, [r3, #0]
      //Serial.println("");
      //Serial.println("");  
       //Serial.print("Raw, Uncorrected Laser Output: "); Serial.print(avgLightLevel);//uncorrected light sensor output
       //Serial.print(":;"); 
       //Serial.println(""); 
       lightMultiplier = 1.0; //set initialy to nominal value on each reading
   b43a2:	4b12      	ldr	r3, [pc, #72]	; (b43ec <_Z15get_ALS_Readingv+0xa8>)
   b43a4:	601a      	str	r2, [r3, #0]
       turbBaseline = (avgLightLevel-initial_Light_Sample);
   b43a6:	4a12      	ldr	r2, [pc, #72]	; (b43f0 <_Z15get_ALS_Readingv+0xac>)
   b43a8:	ed92 7a00 	vldr	s14, [r2]
   b43ac:	4a11      	ldr	r2, [pc, #68]	; (b43f4 <_Z15get_ALS_Readingv+0xb0>)
   b43ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
       //Serial.print("Baseline ALS Output: "); Serial.println(turbBaseline);//
      //Serial.print("Corrected ALS: "); Serial.println(turbBaseline);//  = (Light Sensor outtput - Initial Cal sensor value)
    //Serial.println(""); 
    if (avgLightLevel < 10.0){
   b43b2:	eef4 7ae6 	vcmpe.f32	s15, s13
   b43b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
       turbBaseline = (avgLightLevel-initial_Light_Sample);
   b43ba:	ed82 7a00 	vstr	s14, [r2]
      //Serial.println("Less than NTU 10...");
      lightMultiplier = .50;
   b43be:	bf44      	itt	mi
   b43c0:	f04f 527c 	movmi.w	r2, #1056964608	; 0x3f000000
   b43c4:	601a      	strmi	r2, [r3, #0]
      //avgLightLevel=avgLightLevel+.5;
      //if (avgLightLevel >500){
      //lightMultiplier = .50;
      //avgLightLevel=avgLightLevel+.5;
    }
    turbCalculated = (avgLightLevel * lightMultiplier);
   b43c6:	ed93 7a00 	vldr	s14, [r3]
   b43ca:	4b0b      	ldr	r3, [pc, #44]	; (b43f8 <_Z15get_ALS_Readingv+0xb4>)
   b43cc:	ee67 7a27 	vmul.f32	s15, s14, s15
   b43d0:	edc3 7a00 	vstr	s15, [r3]
    //Serial.print("  Average Turbidity: "); Serial.println(abs(turbCalculated));// Correction divisor for actual turbidity calculation
     //Serial.println("");  


  
 }
   b43d4:	bd70      	pop	{r4, r5, r6, pc}
   b43d6:	bf00      	nop
   b43d8:	000b9b7f 	.word	0x000b9b7f
   b43dc:	2003e620 	.word	0x2003e620
   b43e0:	2003e530 	.word	0x2003e530
   b43e4:	2003e544 	.word	0x2003e544
   b43e8:	2003e5ac 	.word	0x2003e5ac
   b43ec:	2003e4b0 	.word	0x2003e4b0
   b43f0:	2003e558 	.word	0x2003e558
   b43f4:	2003e5a4 	.word	0x2003e5a4
   b43f8:	2003e5a8 	.word	0x2003e5a8
   b43fc:	00000000 	.word	0x00000000

000b4400 <_Z17get_Pressure_Datav>:
void get_Pressure_Data(){
   b4400:	b510      	push	{r4, lr}
   
    //Serial.print("Atmospheric Pressure (hPa): ");
    //Serial.print(pressureSensor.data.pressure.hpa);
    //Altitude (in feet) = 100 + 145366.45 * (1 - (1010 / 1013.25)^(0.190284))
    PressureSensorData = (pressureSensor.data.pressure.hpa);
   b4402:	4c1d      	ldr	r4, [pc, #116]	; (b4478 <_Z17get_Pressure_Datav+0x78>)
   b4404:	4b1d      	ldr	r3, [pc, #116]	; (b447c <_Z17get_Pressure_Datav+0x7c>)
   b4406:	edd4 7a00 	vldr	s15, [r4]
   b440a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b440e:	edc3 7a00 	vstr	s15, [r3]
   b4412:	ee17 0a90 	vmov	r0, s15
    //Serial.print (":  ");
   float  Altitude = (145366.45 );
   float pressure1 =  pow((PressureSensorData/1013.25),0.190284);
   b4416:	f004 fac3 	bl	b89a0 <__aeabi_i2d>
   b441a:	a311      	add	r3, pc, #68	; (adr r3, b4460 <_Z17get_Pressure_Datav+0x60>)
   b441c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4420:	f004 fc52 	bl	b8cc8 <__aeabi_ddiv>
   b4424:	ed9f 1b10 	vldr	d1, [pc, #64]	; b4468 <_Z17get_Pressure_Datav+0x68>
   b4428:	ec41 0b10 	vmov	d0, r0, r1
   b442c:	f003 f8e0 	bl	b75f0 <pow>
   pressure1 = 1 - pressure1;
   // (1 - (pressure / 1013.25)^(0.190284)));
   Altitude = 1 + (pressure1*Altitude);// not accurate at sea level but close
    //Serial.print (Altitude);
    //Serial.println (" Feet Altitude");
    DepthDeltaPressure = (((pressureSensor.data.pressure.hpa)-(InitialPressureSensorData))*1);
   b4430:	4b13      	ldr	r3, [pc, #76]	; (b4480 <_Z17get_Pressure_Datav+0x80>)
   b4432:	edd4 7a00 	vldr	s15, [r4]
   b4436:	ed93 7a00 	vldr	s14, [r3]
   b443a:	4b12      	ldr	r3, [pc, #72]	; (b4484 <_Z17get_Pressure_Datav+0x84>)
   b443c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b4440:	edc3 7a00 	vstr	s15, [r3]
     //Serial.print ("Depth Reading, In meters:"); Serial.println (((pressureSensor.data.pressure.hpa)-(InitialPressureSensorData))/98.1);
     //Serial.println ("");
    //Serial.print ("Delta Pressure Readings: "); Serial.println (DepthDeltaPressure);
     //Serial.println ("");  
     calculated_Depth = (DepthDeltaPressure/98.1);
   b4444:	ee17 0a90 	vmov	r0, s15
   b4448:	f004 fabc 	bl	b89c4 <__aeabi_f2d>
   b444c:	a308      	add	r3, pc, #32	; (adr r3, b4470 <_Z17get_Pressure_Datav+0x70>)
   b444e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4452:	f004 fc39 	bl	b8cc8 <__aeabi_ddiv>
   b4456:	f004 fe05 	bl	b9064 <__aeabi_d2f>
   b445a:	4b0b      	ldr	r3, [pc, #44]	; (b4488 <_Z17get_Pressure_Datav+0x88>)
   b445c:	6018      	str	r0, [r3, #0]
     
}
   b445e:	bd10      	pop	{r4, pc}
   b4460:	00000000 	.word	0x00000000
   b4464:	408faa00 	.word	0x408faa00
   b4468:	e279dd3c 	.word	0xe279dd3c
   b446c:	3fc85b39 	.word	0x3fc85b39
   b4470:	66666666 	.word	0x66666666
   b4474:	40588666 	.word	0x40588666
   b4478:	2003e55c 	.word	0x2003e55c
   b447c:	2003e53c 	.word	0x2003e53c
   b4480:	2003e538 	.word	0x2003e538
   b4484:	2003e534 	.word	0x2003e534
   b4488:	2003e54c 	.word	0x2003e54c
   b448c:	00000000 	.word	0x00000000

000b4490 <_Z18send_Over_USB_Linkv>:
void send_Over_USB_Link(){
   b4490:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Serial.print(" Temp:");
    Serial.print (tempSense);
   b4492:	4e55      	ldr	r6, [pc, #340]	; (b45e8 <_Z18send_Over_USB_Linkv+0x158>)
    Serial.print (",");
   b4494:	4c55      	ldr	r4, [pc, #340]	; (b45ec <_Z18send_Over_USB_Linkv+0x15c>)
    Serial.print(" Temp:");
   b4496:	f002 fd13 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b449a:	4955      	ldr	r1, [pc, #340]	; (b45f0 <_Z18send_Over_USB_Linkv+0x160>)
   b449c:	f001 fef2 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print (tempSense);
   b44a0:	f002 fd0e 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b44a4:	ed96 0a00 	vldr	s0, [r6]
   b44a8:	2102      	movs	r1, #2
   b44aa:	f001 fff3 	bl	b6494 <_ZN5Print5printEfi>
    Serial.print (",");
   b44ae:	f002 fd07 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b44b2:	4621      	mov	r1, r4
   b44b4:	f001 fee6 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(" Depth:");
   b44b8:	f002 fd02 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b44bc:	494d      	ldr	r1, [pc, #308]	; (b45f4 <_Z18send_Over_USB_Linkv+0x164>)
   b44be:	f001 fee1 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(((pressureSensor.data.pressure.hpa)-(InitialPressureSensorData))/98.1);
   b44c2:	f002 fcfd 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b44c6:	4b4c      	ldr	r3, [pc, #304]	; (b45f8 <_Z18send_Over_USB_Linkv+0x168>)
   b44c8:	ed93 7a00 	vldr	s14, [r3]
   b44cc:	4b4b      	ldr	r3, [pc, #300]	; (b45fc <_Z18send_Over_USB_Linkv+0x16c>)
   b44ce:	edd3 7a00 	vldr	s15, [r3]
   b44d2:	ee77 7a67 	vsub.f32	s15, s14, s15
   b44d6:	4605      	mov	r5, r0
   b44d8:	ee17 0a90 	vmov	r0, s15
   b44dc:	f004 fa72 	bl	b89c4 <__aeabi_f2d>
   b44e0:	a33f      	add	r3, pc, #252	; (adr r3, b45e0 <_Z18send_Over_USB_Linkv+0x150>)
   b44e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b44e6:	f004 fbef 	bl	b8cc8 <__aeabi_ddiv>
   b44ea:	ec41 0b10 	vmov	d0, r0, r1
   b44ee:	2102      	movs	r1, #2
   b44f0:	4628      	mov	r0, r5
   b44f2:	f001 ffde 	bl	b64b2 <_ZN5Print5printEdi>
    Serial.print (",");
    Serial.print(" Pressure:");
    Serial.print(PressureSensorData);
   b44f6:	4d42      	ldr	r5, [pc, #264]	; (b4600 <_Z18send_Over_USB_Linkv+0x170>)
    Serial.print (",");
   b44f8:	f002 fce2 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b44fc:	4621      	mov	r1, r4
   b44fe:	f001 fec1 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(" Pressure:");
   b4502:	f002 fcdd 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4506:	493f      	ldr	r1, [pc, #252]	; (b4604 <_Z18send_Over_USB_Linkv+0x174>)
   b4508:	f001 febc 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(PressureSensorData);
   b450c:	f002 fcd8 	bl	b6ec0 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b4510:	220a      	movs	r2, #10
   b4512:	6829      	ldr	r1, [r5, #0]
   b4514:	f7ff feba 	bl	b428c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    Serial.print (",");
   b4518:	f002 fcd2 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b451c:	4621      	mov	r1, r4
   b451e:	f001 feb1 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(" ALS: ");
   b4522:	f002 fccd 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4526:	4938      	ldr	r1, [pc, #224]	; (b4608 <_Z18send_Over_USB_Linkv+0x178>)
   b4528:	f001 feac 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(avgLightLevel);
   b452c:	f002 fcc8 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4530:	4b36      	ldr	r3, [pc, #216]	; (b460c <_Z18send_Over_USB_Linkv+0x17c>)
   b4532:	2102      	movs	r1, #2
   b4534:	ed93 0a00 	vldr	s0, [r3]
   b4538:	f001 ffac 	bl	b6494 <_ZN5Print5printEfi>
    Serial.print (",");
   b453c:	f002 fcc0 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4540:	4621      	mov	r1, r4
   b4542:	f001 fe9f 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(" Dissolved Solids (ppm): ");
   b4546:	f002 fcbb 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b454a:	4931      	ldr	r1, [pc, #196]	; (b4610 <_Z18send_Over_USB_Linkv+0x180>)
   b454c:	f001 fe9a 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(200);
   b4550:	f002 fcb6 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4554:	220a      	movs	r2, #10
   b4556:	21c8      	movs	r1, #200	; 0xc8
   b4558:	f7ff fe98 	bl	b428c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    Serial.print (",");
   b455c:	f002 fcb0 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4560:	4621      	mov	r1, r4
   b4562:	f001 fe8f 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(" ILS: ");
   b4566:	f002 fcab 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b456a:	492a      	ldr	r1, [pc, #168]	; (b4614 <_Z18send_Over_USB_Linkv+0x184>)
   b456c:	f001 fe8a 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(initial_Light_Sample);
   b4570:	f002 fca6 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4574:	4b28      	ldr	r3, [pc, #160]	; (b4618 <_Z18send_Over_USB_Linkv+0x188>)
   b4576:	2102      	movs	r1, #2
   b4578:	ed93 0a00 	vldr	s0, [r3]
   b457c:	f001 ff8a 	bl	b6494 <_ZN5Print5printEfi>
    Serial.print  ("Pwr.Supply:");
   b4580:	f002 fc9e 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4584:	4925      	ldr	r1, [pc, #148]	; (b461c <_Z18send_Over_USB_Linkv+0x18c>)
   b4586:	f001 fe7d 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.print(batLevel);
   b458a:	f002 fc99 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b458e:	4b24      	ldr	r3, [pc, #144]	; (b4620 <_Z18send_Over_USB_Linkv+0x190>)
   b4590:	2102      	movs	r1, #2
   b4592:	ed93 0a00 	vldr	s0, [r3]
   b4596:	f001 ff7d 	bl	b6494 <_ZN5Print5printEfi>

    float datachksum = (tempSense+PressureSensorData+200+calculated_Depth);
   b459a:	ed95 0a00 	vldr	s0, [r5]
   b459e:	edd6 7a00 	vldr	s15, [r6]
   b45a2:	4b20      	ldr	r3, [pc, #128]	; (b4624 <_Z18send_Over_USB_Linkv+0x194>)
   b45a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b45a8:	ee30 0a27 	vadd.f32	s0, s0, s15
   b45ac:	eddf 7a1e 	vldr	s15, [pc, #120]	; b4628 <_Z18send_Over_USB_Linkv+0x198>
   b45b0:	ee30 0a27 	vadd.f32	s0, s0, s15
   b45b4:	edd3 7a00 	vldr	s15, [r3]
   b45b8:	ee30 0a27 	vadd.f32	s0, s0, s15
   b45bc:	ed8d 0a01 	vstr	s0, [sp, #4]
    //
    Serial .print ("Checksum: ");
   b45c0:	f002 fc7e 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b45c4:	4919      	ldr	r1, [pc, #100]	; (b462c <_Z18send_Over_USB_Linkv+0x19c>)
   b45c6:	f001 fe5d 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.println (datachksum);
   b45ca:	f002 fc79 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b45ce:	ed9d 0a01 	vldr	s0, [sp, #4]
   b45d2:	2102      	movs	r1, #2
    

    //delay (3000);
}
   b45d4:	b002      	add	sp, #8
   b45d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println (datachksum);
   b45da:	f001 bf78 	b.w	b64ce <_ZN5Print7printlnEfi>
   b45de:	bf00      	nop
   b45e0:	66666666 	.word	0x66666666
   b45e4:	40588666 	.word	0x40588666
   b45e8:	2003e590 	.word	0x2003e590
   b45ec:	000b96cf 	.word	0x000b96cf
   b45f0:	000b96c8 	.word	0x000b96c8
   b45f4:	000b96d1 	.word	0x000b96d1
   b45f8:	2003e55c 	.word	0x2003e55c
   b45fc:	2003e538 	.word	0x2003e538
   b4600:	2003e53c 	.word	0x2003e53c
   b4604:	000b96d9 	.word	0x000b96d9
   b4608:	000b96e4 	.word	0x000b96e4
   b460c:	2003e544 	.word	0x2003e544
   b4610:	000b96eb 	.word	0x000b96eb
   b4614:	000b9705 	.word	0x000b9705
   b4618:	2003e558 	.word	0x2003e558
   b461c:	000b970c 	.word	0x000b970c
   b4620:	2003e548 	.word	0x2003e548
   b4624:	2003e54c 	.word	0x2003e54c
   b4628:	43480000 	.word	0x43480000
   b462c:	000b9718 	.word	0x000b9718

000b4630 <_Z18initializePowerCfgv>:
           




   bool initializePowerCfg() {
   b4630:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b4632:	4918      	ldr	r1, [pc, #96]	; (b4694 <_Z18initializePowerCfgv+0x64>)
   b4634:	4818      	ldr	r0, [pc, #96]	; (b4698 <_Z18initializePowerCfgv+0x68>)
   bool initializePowerCfg() {
   b4636:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b4638:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b463a:	f7ff fe3a 	bl	b42b2 <_ZNK5spark6Logger4infoEPKcz>
   b463e:	4622      	mov	r2, r4
   b4640:	2100      	movs	r1, #0
   b4642:	4668      	mov	r0, sp
   b4644:	f004 ff6c 	bl	b9520 <memset>
   b4648:	4622      	mov	r2, r4
   b464a:	2100      	movs	r1, #0
   b464c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b4650:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b4654:	f004 ff64 	bl	b9520 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   b4658:	2100      	movs	r1, #0
   b465a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b465e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b4662:	f001 f9f9 	bl	b5a58 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b4666:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   b466a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b466e:	4b0b      	ldr	r3, [pc, #44]	; (b469c <_Z18initializePowerCfgv+0x6c>)
   b4670:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b4672:	f241 0370 	movw	r3, #4208	; 0x1070
   b4676:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b467a:	9b00      	ldr	r3, [sp, #0]
   b467c:	2100      	movs	r1, #0
   b467e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   b4682:	4668      	mov	r0, sp
   b4684:	9300      	str	r3, [sp, #0]
   b4686:	f001 f9e7 	bl	b5a58 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b468a:	3800      	subs	r0, #0
   b468c:	bf18      	it	ne
   b468e:	2001      	movne	r0, #1
   b4690:	b010      	add	sp, #64	; 0x40
   b4692:	bd10      	pop	{r4, pc}
   b4694:	000b9723 	.word	0x000b9723
   b4698:	2003e684 	.word	0x2003e684
   b469c:	03840384 	.word	0x03840384

000b46a0 <setup>:
{
   b46a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        set_system_mode(mode);
   b46a2:	2002      	movs	r0, #2
   b46a4:	f001 f99c 	bl	b59e0 <set_system_mode>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b46a8:	f001 fa52 	bl	b5b50 <spark_cloud_flag_connect>
     Time.isValid();
   b46ac:	f001 ff92 	bl	b65d4 <_ZN9TimeClass7isValidEv>
       delay (1000);
   b46b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b46b4:	f001 ffc6 	bl	b6644 <delay>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
   b46b8:	4b85      	ldr	r3, [pc, #532]	; (b48d0 <setup+0x230>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
   b46ba:	681a      	ldr	r2, [r3, #0]
   b46bc:	4b85      	ldr	r3, [pc, #532]	; (b48d4 <setup+0x234>)
   b46be:	601a      	str	r2, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46c0:	f001 fa4e 	bl	b5b60 <spark_cloud_flag_connected>
        if (!connected()) {
   b46c4:	b110      	cbz	r0, b46cc <setup+0x2c>
        return spark_sync_time(NULL);
   b46c6:	2000      	movs	r0, #0
   b46c8:	f001 fa5a 	bl	b5b80 <spark_sync_time>
   Time.zone(-7); // Set the time zone if needed
   b46cc:	eeb9 0a0c 	vmov.f32	s0, #156	; 0xc0e00000 -7.0
   b46d0:	f001 ff24 	bl	b651c <_ZN9TimeClass4zoneEf>
      Serial1.begin (9600); //this is the TX and RX pins on the device
   b46d4:	f002 fee2 	bl	b749c <_Z22__fetch_global_Serial1v>
   b46d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b46dc:	f002 fcb8 	bl	b7050 <_ZN11USARTSerial5beginEm>
   pinMode(pwr_On, OUTPUT);// activate D4 for aux. power up of external circuitry
   b46e0:	4c7d      	ldr	r4, [pc, #500]	; (b48d8 <setup+0x238>)
      Serial1.setTimeout(1000); // set new value to "X" milliseconds
   b46e2:	f002 fedb 	bl	b749c <_Z22__fetch_global_Serial1v>
   b46e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b46ea:	f001 feff 	bl	b64ec <_ZN6Stream10setTimeoutEm>
  Serial.begin(9600); // set line end to Newline atbottom of serial monitor
   b46ee:	f002 fbe7 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b46f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b46f6:	f002 fbd1 	bl	b6e9c <_ZN9USBSerial5beginEl>
   pinMode(pwr_On, OUTPUT);// activate D4 for aux. power up of external circuitry
   b46fa:	8820      	ldrh	r0, [r4, #0]
   b46fc:	2101      	movs	r1, #1
   b46fe:	f002 fe4b 	bl	b7398 <pinMode>
   digitalWrite(pwr_On, LOW);
   b4702:	8820      	ldrh	r0, [r4, #0]
   b4704:	2100      	movs	r1, #0
   b4706:	f002 fe58 	bl	b73ba <digitalWrite>
   pinMode(laser_Cntrl, OUTPUT);
   b470a:	4b74      	ldr	r3, [pc, #464]	; (b48dc <setup+0x23c>)
   b470c:	2101      	movs	r1, #1
   b470e:	8818      	ldrh	r0, [r3, #0]
   b4710:	f002 fe42 	bl	b7398 <pinMode>
   delay (100);// likely not needed
   b4714:	2064      	movs	r0, #100	; 0x64
   b4716:	f001 ff95 	bl	b6644 <delay>
	lipo.begin(); // Initialize the MAX17043 LiPo fuel gaugelipo.quickStart();
   b471a:	4871      	ldr	r0, [pc, #452]	; (b48e0 <setup+0x240>)
   b471c:	f000 fc5e 	bl	b4fdc <_ZN8MAX170435beginEv>
    lipo.quickStart();//startup gauge
   b4720:	486f      	ldr	r0, [pc, #444]	; (b48e0 <setup+0x240>)
   b4722:	f000 fc82 	bl	b502a <_ZN8MAX1704310quickStartEv>
    initializePowerCfg();//run this function on startup to set pwr configuarations
   b4726:	f7ff ff83 	bl	b4630 <_Z18initializePowerCfgv>
  analogWrite(4,128); //PWM used to set threshold brightness at 0 ntu at orthoganal LED
   b472a:	2180      	movs	r1, #128	; 0x80
   b472c:	2004      	movs	r0, #4
   b472e:	f002 fe74 	bl	b741a <_Z11analogWritetm>
  while (!Serial) { delay(10); }
   b4732:	f002 fbc5 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4736:	f002 fbb8 	bl	b6eaa <_ZN9USBSerialcvbEv>
   b473a:	b918      	cbnz	r0, b4744 <setup+0xa4>
   b473c:	200a      	movs	r0, #10
   b473e:	f001 ff81 	bl	b6644 <delay>
   b4742:	e7f6      	b.n	b4732 <setup+0x92>
    Serial.println("Depth,Temperature, Turbidity and TDS Data Acquisition");
   b4744:	f002 fbbc 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4748:	4966      	ldr	r1, [pc, #408]	; (b48e4 <setup+0x244>)
   b474a:	f001 fdb2 	bl	b62b2 <_ZN5Print7printlnEPKc>
if (!veml.begin()) {
   b474e:	f002 feff 	bl	b7550 <_Z19__fetch_global_Wirev>
   b4752:	4601      	mov	r1, r0
   b4754:	4864      	ldr	r0, [pc, #400]	; (b48e8 <setup+0x248>)
   b4756:	f000 fcfc 	bl	b5152 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   b475a:	b920      	cbnz	r0, b4766 <setup+0xc6>
    Serial.println("VEML7700 Sensor not found, hanging here...");
   b475c:	f002 fbb0 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4760:	4962      	ldr	r1, [pc, #392]	; (b48ec <setup+0x24c>)
   b4762:	f001 fda6 	bl	b62b2 <_ZN5Print7printlnEPKc>
  Serial.println("Sensor found");
   b4766:	f002 fbab 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b476a:	4961      	ldr	r1, [pc, #388]	; (b48f0 <setup+0x250>)
   b476c:	f001 fda1 	bl	b62b2 <_ZN5Print7printlnEPKc>
  veml.setGain(VEML7700_GAIN_2);
   b4770:	485d      	ldr	r0, [pc, #372]	; (b48e8 <setup+0x248>)
   b4772:	2101      	movs	r1, #1
   b4774:	f000 fce1 	bl	b513a <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_800MS);
   b4778:	485b      	ldr	r0, [pc, #364]	; (b48e8 <setup+0x248>)
   b477a:	2103      	movs	r1, #3
   b477c:	f000 fcd4 	bl	b5128 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
veml.setGain(VEML7700_GAIN_2);
   b4780:	2101      	movs	r1, #1
   b4782:	4859      	ldr	r0, [pc, #356]	; (b48e8 <setup+0x248>)
   b4784:	f000 fcd9 	bl	b513a <_ZN17Adafruit_VEML77007setGainEh>
  Serial.print(F("Gain: "));
   b4788:	f002 fb9a 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b478c:	4959      	ldr	r1, [pc, #356]	; (b48f4 <setup+0x254>)
   b478e:	f001 fd80 	bl	b6292 <_ZN5Print5printEPK19__FlashStringHelper>
  switch (veml.getGain()) {
   b4792:	4855      	ldr	r0, [pc, #340]	; (b48e8 <setup+0x248>)
   b4794:	f000 fcd4 	bl	b5140 <_ZN17Adafruit_VEML77007getGainEv>
   b4798:	2803      	cmp	r0, #3
   b479a:	d808      	bhi.n	b47ae <setup+0x10e>
   b479c:	e8df f000 	tbb	[pc, r0]
   b47a0:	1e221a02 	.word	0x1e221a02
    case VEML7700_GAIN_1: Serial.println("1"); break;
   b47a4:	f002 fb8c 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b47a8:	4953      	ldr	r1, [pc, #332]	; (b48f8 <setup+0x258>)
    case VEML7700_GAIN_1_8: Serial.println("1/8"); break;
   b47aa:	f001 fd82 	bl	b62b2 <_ZN5Print7printlnEPKc>
  Serial.print(F("Integration Time (ms): "));
   b47ae:	f002 fb87 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b47b2:	4952      	ldr	r1, [pc, #328]	; (b48fc <setup+0x25c>)
   b47b4:	f001 fd6d 	bl	b6292 <_ZN5Print5printEPK19__FlashStringHelper>
  switch (veml.getIntegrationTime()) {
   b47b8:	484b      	ldr	r0, [pc, #300]	; (b48e8 <setup+0x248>)
   b47ba:	f000 fcb8 	bl	b512e <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   b47be:	280c      	cmp	r0, #12
   b47c0:	d819      	bhi.n	b47f6 <setup+0x156>
   b47c2:	e8df f000 	tbb	[pc, r0]
   b47c6:	7975      	.short	0x7975
   b47c8:	1818817d 	.word	0x1818817d
   b47cc:	18711818 	.word	0x18711818
   b47d0:	1818      	.short	0x1818
   b47d2:	13          	.byte	0x13
   b47d3:	00          	.byte	0x00
    case VEML7700_GAIN_2: Serial.println("2"); break;
   b47d4:	f002 fb74 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b47d8:	4949      	ldr	r1, [pc, #292]	; (b4900 <setup+0x260>)
   b47da:	e7e6      	b.n	b47aa <setup+0x10a>
    case VEML7700_GAIN_1_4: Serial.println("1/4"); break;
   b47dc:	f002 fb70 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b47e0:	4948      	ldr	r1, [pc, #288]	; (b4904 <setup+0x264>)
   b47e2:	e7e2      	b.n	b47aa <setup+0x10a>
    case VEML7700_GAIN_1_8: Serial.println("1/8"); break;
   b47e4:	f002 fb6c 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b47e8:	4947      	ldr	r1, [pc, #284]	; (b4908 <setup+0x268>)
   b47ea:	e7de      	b.n	b47aa <setup+0x10a>
    case VEML7700_IT_25MS: Serial.println("25"); break;
   b47ec:	f002 fb68 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b47f0:	4946      	ldr	r1, [pc, #280]	; (b490c <setup+0x26c>)
    case VEML7700_IT_800MS: Serial.println("800"); break;
   b47f2:	f001 fd5e 	bl	b62b2 <_ZN5Print7printlnEPKc>
  veml.interruptEnable(false);//not used
   b47f6:	2100      	movs	r1, #0
   b47f8:	483b      	ldr	r0, [pc, #236]	; (b48e8 <setup+0x248>)
  initial_Light_Sample = avgLightLevel;
   b47fa:	4c45      	ldr	r4, [pc, #276]	; (b4910 <setup+0x270>)
  veml.interruptEnable(false);//not used
   b47fc:	f000 fc8e 	bl	b511c <_ZN17Adafruit_VEML770015interruptEnableEb>
    Wire.begin();
   b4800:	f002 fea6 	bl	b7550 <_Z19__fetch_global_Wirev>
   b4804:	f002 fc86 	bl	b7114 <_ZN7TwoWire5beginEv>
     delay (2000); 
   b4808:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b480c:	f001 ff1a 	bl	b6644 <delay>
       get_ALS_Reading();
   b4810:	f7ff fd98 	bl	b4344 <_Z15get_ALS_Readingv>
  initial_Light_Sample = avgLightLevel;
   b4814:	4b3f      	ldr	r3, [pc, #252]	; (b4914 <setup+0x274>)
  delay (100); 
   b4816:	2064      	movs	r0, #100	; 0x64
  initial_Light_Sample = avgLightLevel;
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6023      	str	r3, [r4, #0]
  delay (100); 
   b481c:	f001 ff12 	bl	b6644 <delay>
    Serial.print("*******Initial ALS:******* "); Serial.println(initial_Light_Sample);
   b4820:	f002 fb4e 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4824:	493c      	ldr	r1, [pc, #240]	; (b4918 <setup+0x278>)
   b4826:	f001 fd2d 	bl	b6284 <_ZN5Print5printEPKc>
   b482a:	f002 fb49 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b482e:	ed94 0a00 	vldr	s0, [r4]
   b4832:	2102      	movs	r1, #2
   b4834:	f001 fe4b 	bl	b64ce <_ZN5Print7printlnEfi>
    ALS_Filtered = 0;// clear lightLevelAvg varable
   b4838:	4b38      	ldr	r3, [pc, #224]	; (b491c <setup+0x27c>)
   b483a:	2200      	movs	r2, #0
    delay(100);
   b483c:	2064      	movs	r0, #100	; 0x64
    ALS_Filtered = 0;// clear lightLevelAvg varable
   b483e:	601a      	str	r2, [r3, #0]
    delay(100);
   b4840:	f001 ff00 	bl	b6644 <delay>
    if (pressureSensor.begin(i2cAddress) != LPS28DFW_OK)//changed while to if to pass through once
   b4844:	4b36      	ldr	r3, [pc, #216]	; (b4920 <setup+0x280>)
   b4846:	7819      	ldrb	r1, [r3, #0]
   b4848:	9101      	str	r1, [sp, #4]
   b484a:	f002 fe81 	bl	b7550 <_Z19__fetch_global_Wirev>
   b484e:	9901      	ldr	r1, [sp, #4]
   b4850:	4602      	mov	r2, r0
   b4852:	4834      	ldr	r0, [pc, #208]	; (b4924 <setup+0x284>)
   b4854:	f000 fefc 	bl	b5650 <_ZN8LPS28DFW5beginEhR7TwoWire>
   b4858:	b140      	cbz	r0, b486c <setup+0x1cc>
        Serial.println("Error: LPS28DFW not connected, check wiring and I2C address!");
   b485a:	f002 fb31 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b485e:	4932      	ldr	r1, [pc, #200]	; (b4928 <setup+0x288>)
   b4860:	f001 fd27 	bl	b62b2 <_ZN5Print7printlnEPKc>
        delay(1000);
   b4864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4868:	f001 feec 	bl	b6644 <delay>
      pressureSensor.getSensorData();
   b486c:	4d2d      	ldr	r5, [pc, #180]	; (b4924 <setup+0x284>)
    InitialPressureSensorData = (pressureSensor.data.pressure.hpa);//check initial pressure reading
   b486e:	4c2f      	ldr	r4, [pc, #188]	; (b492c <setup+0x28c>)
    Serial.println("Depth Sensor Connected...");
   b4870:	f002 fb26 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4874:	492e      	ldr	r1, [pc, #184]	; (b4930 <setup+0x290>)
   b4876:	f001 fd1c 	bl	b62b2 <_ZN5Print7printlnEPKc>
      pressureSensor.getSensorData();
   b487a:	4628      	mov	r0, r5
   b487c:	f000 ff02 	bl	b5684 <_ZN8LPS28DFW13getSensorDataEv>
    InitialPressureSensorData = (pressureSensor.data.pressure.hpa);//check initial pressure reading
   b4880:	682b      	ldr	r3, [r5, #0]
   b4882:	6023      	str	r3, [r4, #0]
 Serial.print("Initial air pressure reading: "); Serial.println(InitialPressureSensorData);
   b4884:	f002 fb1c 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4888:	492a      	ldr	r1, [pc, #168]	; (b4934 <setup+0x294>)
   b488a:	f001 fcfb 	bl	b6284 <_ZN5Print5printEPKc>
   b488e:	f002 fb17 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4892:	ed94 0a00 	vldr	s0, [r4]
   b4896:	2102      	movs	r1, #2
   b4898:	f001 fe19 	bl	b64ce <_ZN5Print7printlnEfi>
 delay (100);
   b489c:	2064      	movs	r0, #100	; 0x64
}
   b489e:	b003      	add	sp, #12
   b48a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 delay (100);
   b48a4:	f001 bece 	b.w	b6644 <delay>
    case VEML7700_IT_50MS: Serial.println("50"); break;
   b48a8:	f002 fb0a 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b48ac:	4922      	ldr	r1, [pc, #136]	; (b4938 <setup+0x298>)
   b48ae:	e7a0      	b.n	b47f2 <setup+0x152>
    case VEML7700_IT_100MS: Serial.println("100"); break;
   b48b0:	f002 fb06 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b48b4:	4921      	ldr	r1, [pc, #132]	; (b493c <setup+0x29c>)
   b48b6:	e79c      	b.n	b47f2 <setup+0x152>
    case VEML7700_IT_200MS: Serial.println("200"); break;
   b48b8:	f002 fb02 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b48bc:	4920      	ldr	r1, [pc, #128]	; (b4940 <setup+0x2a0>)
   b48be:	e798      	b.n	b47f2 <setup+0x152>
    case VEML7700_IT_400MS: Serial.println("400"); break;
   b48c0:	f002 fafe 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b48c4:	491f      	ldr	r1, [pc, #124]	; (b4944 <setup+0x2a4>)
   b48c6:	e794      	b.n	b47f2 <setup+0x152>
    case VEML7700_IT_800MS: Serial.println("800"); break;
   b48c8:	f002 fafa 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b48cc:	491e      	ldr	r1, [pc, #120]	; (b4948 <setup+0x2a8>)
   b48ce:	e790      	b.n	b47f2 <setup+0x152>
   b48d0:	2003e4bc 	.word	0x2003e4bc
   b48d4:	2003e688 	.word	0x2003e688
   b48d8:	2003e4b4 	.word	0x2003e4b4
   b48dc:	2003e4ac 	.word	0x2003e4ac
   b48e0:	2003e664 	.word	0x2003e664
   b48e4:	000b973d 	.word	0x000b973d
   b48e8:	2003e620 	.word	0x2003e620
   b48ec:	000b9773 	.word	0x000b9773
   b48f0:	000b979e 	.word	0x000b979e
   b48f4:	000b97ab 	.word	0x000b97ab
   b48f8:	000b97b2 	.word	0x000b97b2
   b48fc:	000b97be 	.word	0x000b97be
   b4900:	000b97b4 	.word	0x000b97b4
   b4904:	000b97b6 	.word	0x000b97b6
   b4908:	000b97ba 	.word	0x000b97ba
   b490c:	000b97d6 	.word	0x000b97d6
   b4910:	2003e558 	.word	0x2003e558
   b4914:	2003e544 	.word	0x2003e544
   b4918:	000b97ec 	.word	0x000b97ec
   b491c:	2003e530 	.word	0x2003e530
   b4920:	2003e4a8 	.word	0x2003e4a8
   b4924:	2003e55c 	.word	0x2003e55c
   b4928:	000b9808 	.word	0x000b9808
   b492c:	2003e538 	.word	0x2003e538
   b4930:	000b9845 	.word	0x000b9845
   b4934:	000b985f 	.word	0x000b985f
   b4938:	000b97d9 	.word	0x000b97d9
   b493c:	000b97dc 	.word	0x000b97dc
   b4940:	000b97e0 	.word	0x000b97e0
   b4944:	000b97e4 	.word	0x000b97e4
   b4948:	000b97e8 	.word	0x000b97e8

000b494c <_Z12send_Webhookv>:
//      .network(NETWORK_INTERFACE_CELLULAR, SystemSleepNetworkFlag::INACTIVE_STANDBY);
}

//////
    
void send_Webhook(){
   b494c:	b510      	push	{r4, lr}
   b494e:	b0be      	sub	sp, #248	; 0xf8

 
//Send data to site via webhook;
Serial.println ("***************************");
   b4950:	f002 fab6 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4954:	4976      	ldr	r1, [pc, #472]	; (b4b30 <_Z12send_Webhookv+0x1e4>)
   b4956:	f001 fcac 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.println ("");
   b495a:	f002 fab1 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b495e:	4975      	ldr	r1, [pc, #468]	; (b4b34 <_Z12send_Webhookv+0x1e8>)
   b4960:	f001 fca7 	bl	b62b2 <_ZN5Print7printlnEPKc>
 Serial.println ("Sending Webhook...");
   b4964:	f002 faac 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4968:	4973      	ldr	r1, [pc, #460]	; (b4b38 <_Z12send_Webhookv+0x1ec>)
   b496a:	f001 fca2 	bl	b62b2 <_ZN5Print7printlnEPKc>
 Serial.println(Time.timeStr()); // Wed May 21 01:08:47 2014
   b496e:	f002 faa7 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4972:	4604      	mov	r4, r0
                return timeStr(now());
   b4974:	f001 fe4b 	bl	b660e <_ZN9TimeClass3nowEv>
   b4978:	4602      	mov	r2, r0
   b497a:	17c3      	asrs	r3, r0, #31
   b497c:	a83a      	add	r0, sp, #232	; 0xe8
   b497e:	f001 fded 	bl	b655c <_ZN9TimeClass7timeStrEx>
   b4982:	993a      	ldr	r1, [sp, #232]	; 0xe8
   b4984:	4620      	mov	r0, r4
   b4986:	f001 fc94 	bl	b62b2 <_ZN5Print7printlnEPKc>
   b498a:	a83a      	add	r0, sp, #232	; 0xe8
   b498c:	f001 faf6 	bl	b5f7c <_ZN6StringD1Ev>
   String eventData = String (String("{")+"\"var2\"") + String(":") + (var2) + "," + String ("\"var3\"") + String(":") + (var3)+String(",")+ String ("\"var4\"") + String(":") + (var4)+String(",") +String ("\"var5\"") + String(":") + (var5)+String("}");// Combine the two variables into a single string, separated by a comma
   b4990:	496a      	ldr	r1, [pc, #424]	; (b4b3c <_Z12send_Webhookv+0x1f0>)
   b4992:	a806      	add	r0, sp, #24
   b4994:	f001 fb3d 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4998:	a906      	add	r1, sp, #24
   b499a:	a80a      	add	r0, sp, #40	; 0x28
   b499c:	f001 fb79 	bl	b6092 <_ZN6StringC1ERKS_>
   b49a0:	4967      	ldr	r1, [pc, #412]	; (b4b40 <_Z12send_Webhookv+0x1f4>)
   b49a2:	a80a      	add	r0, sp, #40	; 0x28
   b49a4:	f001 fbf2 	bl	b618c <_ZplRK15StringSumHelperPKc>
   b49a8:	4601      	mov	r1, r0
   b49aa:	a80e      	add	r0, sp, #56	; 0x38
   b49ac:	f001 fb71 	bl	b6092 <_ZN6StringC1ERKS_>
   b49b0:	a90e      	add	r1, sp, #56	; 0x38
   b49b2:	a816      	add	r0, sp, #88	; 0x58
   b49b4:	f001 fb6d 	bl	b6092 <_ZN6StringC1ERKS_>
   b49b8:	4962      	ldr	r1, [pc, #392]	; (b4b44 <_Z12send_Webhookv+0x1f8>)
   b49ba:	a812      	add	r0, sp, #72	; 0x48
   b49bc:	f001 fb29 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b49c0:	a912      	add	r1, sp, #72	; 0x48
   b49c2:	a816      	add	r0, sp, #88	; 0x58
   b49c4:	f001 fbd6 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b49c8:	495f      	ldr	r1, [pc, #380]	; (b4b48 <_Z12send_Webhookv+0x1fc>)
   b49ca:	f001 fbd3 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b49ce:	495f      	ldr	r1, [pc, #380]	; (b4b4c <_Z12send_Webhookv+0x200>)
   b49d0:	f001 fbdc 	bl	b618c <_ZplRK15StringSumHelperPKc>
   b49d4:	495e      	ldr	r1, [pc, #376]	; (b4b50 <_Z12send_Webhookv+0x204>)
   b49d6:	4604      	mov	r4, r0
   b49d8:	a81a      	add	r0, sp, #104	; 0x68
   b49da:	f001 fb1a 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b49de:	a91a      	add	r1, sp, #104	; 0x68
   b49e0:	4620      	mov	r0, r4
   b49e2:	f001 fbc7 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b49e6:	4957      	ldr	r1, [pc, #348]	; (b4b44 <_Z12send_Webhookv+0x1f8>)
   b49e8:	4604      	mov	r4, r0
   b49ea:	a81e      	add	r0, sp, #120	; 0x78
   b49ec:	f001 fb11 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b49f0:	a91e      	add	r1, sp, #120	; 0x78
   b49f2:	4620      	mov	r0, r4
   b49f4:	f001 fbbe 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b49f8:	4956      	ldr	r1, [pc, #344]	; (b4b54 <_Z12send_Webhookv+0x208>)
   b49fa:	f001 fbbb 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b49fe:	4953      	ldr	r1, [pc, #332]	; (b4b4c <_Z12send_Webhookv+0x200>)
   b4a00:	4604      	mov	r4, r0
   b4a02:	a822      	add	r0, sp, #136	; 0x88
   b4a04:	f001 fb05 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a08:	a922      	add	r1, sp, #136	; 0x88
   b4a0a:	4620      	mov	r0, r4
   b4a0c:	f001 fbb2 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a10:	4951      	ldr	r1, [pc, #324]	; (b4b58 <_Z12send_Webhookv+0x20c>)
   b4a12:	4604      	mov	r4, r0
   b4a14:	a826      	add	r0, sp, #152	; 0x98
   b4a16:	f001 fafc 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a1a:	a926      	add	r1, sp, #152	; 0x98
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	f001 fba9 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a22:	4948      	ldr	r1, [pc, #288]	; (b4b44 <_Z12send_Webhookv+0x1f8>)
   b4a24:	4604      	mov	r4, r0
   b4a26:	a82a      	add	r0, sp, #168	; 0xa8
   b4a28:	f001 faf3 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a2c:	a92a      	add	r1, sp, #168	; 0xa8
   b4a2e:	4620      	mov	r0, r4
   b4a30:	f001 fba0 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a34:	4949      	ldr	r1, [pc, #292]	; (b4b5c <_Z12send_Webhookv+0x210>)
   b4a36:	f001 fb9d 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a3a:	4944      	ldr	r1, [pc, #272]	; (b4b4c <_Z12send_Webhookv+0x200>)
   b4a3c:	4604      	mov	r4, r0
   b4a3e:	a82e      	add	r0, sp, #184	; 0xb8
   b4a40:	f001 fae7 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a44:	a92e      	add	r1, sp, #184	; 0xb8
   b4a46:	4620      	mov	r0, r4
   b4a48:	f001 fb94 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a4c:	4944      	ldr	r1, [pc, #272]	; (b4b60 <_Z12send_Webhookv+0x214>)
   b4a4e:	4604      	mov	r4, r0
   b4a50:	a832      	add	r0, sp, #200	; 0xc8
   b4a52:	f001 fade 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a56:	a932      	add	r1, sp, #200	; 0xc8
   b4a58:	4620      	mov	r0, r4
   b4a5a:	f001 fb8b 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a5e:	4939      	ldr	r1, [pc, #228]	; (b4b44 <_Z12send_Webhookv+0x1f8>)
   b4a60:	4604      	mov	r4, r0
   b4a62:	a836      	add	r0, sp, #216	; 0xd8
   b4a64:	f001 fad5 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a68:	a936      	add	r1, sp, #216	; 0xd8
   b4a6a:	4620      	mov	r0, r4
   b4a6c:	f001 fb82 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a70:	493c      	ldr	r1, [pc, #240]	; (b4b64 <_Z12send_Webhookv+0x218>)
   b4a72:	f001 fb7f 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a76:	493c      	ldr	r1, [pc, #240]	; (b4b68 <_Z12send_Webhookv+0x21c>)
   b4a78:	4604      	mov	r4, r0
   b4a7a:	a83a      	add	r0, sp, #232	; 0xe8
   b4a7c:	f001 fac9 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a80:	a93a      	add	r1, sp, #232	; 0xe8
   b4a82:	4620      	mov	r0, r4
   b4a84:	f001 fb76 	bl	b6174 <_ZplRK15StringSumHelperRK6String>
   b4a88:	4601      	mov	r1, r0
   b4a8a:	a802      	add	r0, sp, #8
   b4a8c:	f001 fb01 	bl	b6092 <_ZN6StringC1ERKS_>
   b4a90:	a83a      	add	r0, sp, #232	; 0xe8
   b4a92:	f001 fa73 	bl	b5f7c <_ZN6StringD1Ev>
   b4a96:	a836      	add	r0, sp, #216	; 0xd8
   b4a98:	f001 fa70 	bl	b5f7c <_ZN6StringD1Ev>
   b4a9c:	a832      	add	r0, sp, #200	; 0xc8
   b4a9e:	f001 fa6d 	bl	b5f7c <_ZN6StringD1Ev>
   b4aa2:	a82e      	add	r0, sp, #184	; 0xb8
   b4aa4:	f001 fa6a 	bl	b5f7c <_ZN6StringD1Ev>
   b4aa8:	a82a      	add	r0, sp, #168	; 0xa8
   b4aaa:	f001 fa67 	bl	b5f7c <_ZN6StringD1Ev>
   b4aae:	a826      	add	r0, sp, #152	; 0x98
   b4ab0:	f001 fa64 	bl	b5f7c <_ZN6StringD1Ev>
   b4ab4:	a822      	add	r0, sp, #136	; 0x88
   b4ab6:	f001 fa61 	bl	b5f7c <_ZN6StringD1Ev>
   b4aba:	a81e      	add	r0, sp, #120	; 0x78
   b4abc:	f001 fa5e 	bl	b5f7c <_ZN6StringD1Ev>
   b4ac0:	a81a      	add	r0, sp, #104	; 0x68
   b4ac2:	f001 fa5b 	bl	b5f7c <_ZN6StringD1Ev>
   b4ac6:	a812      	add	r0, sp, #72	; 0x48
   b4ac8:	f001 fa58 	bl	b5f7c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4acc:	a816      	add	r0, sp, #88	; 0x58
   b4ace:	f001 fa55 	bl	b5f7c <_ZN6StringD1Ev>
   b4ad2:	a80e      	add	r0, sp, #56	; 0x38
   b4ad4:	f001 fa52 	bl	b5f7c <_ZN6StringD1Ev>
   b4ad8:	a80a      	add	r0, sp, #40	; 0x28
   b4ada:	f001 fa4f 	bl	b5f7c <_ZN6StringD1Ev>
   b4ade:	a806      	add	r0, sp, #24
   b4ae0:	f001 fa4c 	bl	b5f7c <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4ae4:	4b21      	ldr	r3, [pc, #132]	; (b4b6c <_Z12send_Webhookv+0x220>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ae6:	9a02      	ldr	r2, [sp, #8]
   b4ae8:	781b      	ldrb	r3, [r3, #0]
   b4aea:	f88d 3000 	strb.w	r3, [sp]
   b4aee:	4920      	ldr	r1, [pc, #128]	; (b4b70 <_Z12send_Webhookv+0x224>)
   b4af0:	233c      	movs	r3, #60	; 0x3c
   b4af2:	a83a      	add	r0, sp, #232	; 0xe8
   b4af4:	f001 ff9c 	bl	b6a30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4af8:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   b4afa:	b17c      	cbz	r4, b4b1c <_Z12send_Webhookv+0x1d0>
      if (--_M_use_count == 0)
   b4afc:	6863      	ldr	r3, [r4, #4]
   b4afe:	3b01      	subs	r3, #1
   b4b00:	6063      	str	r3, [r4, #4]
   b4b02:	b95b      	cbnz	r3, b4b1c <_Z12send_Webhookv+0x1d0>
          _M_dispose();
   b4b04:	6823      	ldr	r3, [r4, #0]
   b4b06:	4620      	mov	r0, r4
   b4b08:	689b      	ldr	r3, [r3, #8]
   b4b0a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b0c:	68a3      	ldr	r3, [r4, #8]
   b4b0e:	3b01      	subs	r3, #1
   b4b10:	60a3      	str	r3, [r4, #8]
   b4b12:	b91b      	cbnz	r3, b4b1c <_Z12send_Webhookv+0x1d0>
            _M_destroy();
   b4b14:	6823      	ldr	r3, [r4, #0]
   b4b16:	4620      	mov	r0, r4
   b4b18:	68db      	ldr	r3, [r3, #12]
   b4b1a:	4798      	blx	r3
  Particle.publish("vars-test", eventData, PRIVATE); // Publish the event with the combined string as the data
  delay (1); // wait for 60 seconds to take next reading....print time at serial and publish (in mSeconds)
   b4b1c:	2001      	movs	r0, #1
   b4b1e:	f001 fd91 	bl	b6644 <delay>
   go_To_Sleep();
   b4b22:	f000 f979 	bl	b4e18 <_Z11go_To_Sleepv>
   String eventData = String (String("{")+"\"var2\"") + String(":") + (var2) + "," + String ("\"var3\"") + String(":") + (var3)+String(",")+ String ("\"var4\"") + String(":") + (var4)+String(",") +String ("\"var5\"") + String(":") + (var5)+String("}");// Combine the two variables into a single string, separated by a comma
   b4b26:	a802      	add	r0, sp, #8
   b4b28:	f001 fa28 	bl	b5f7c <_ZN6StringD1Ev>
   //And repeat!
}
   b4b2c:	b03e      	add	sp, #248	; 0xf8
   b4b2e:	bd10      	pop	{r4, pc}
   b4b30:	000b987e 	.word	0x000b987e
   b4b34:	000b9b7f 	.word	0x000b9b7f
   b4b38:	000b989a 	.word	0x000b989a
   b4b3c:	000b98ad 	.word	0x000b98ad
   b4b40:	000b98af 	.word	0x000b98af
   b4b44:	000b96e2 	.word	0x000b96e2
   b4b48:	2003e5c0 	.word	0x2003e5c0
   b4b4c:	000b96cf 	.word	0x000b96cf
   b4b50:	000b98b6 	.word	0x000b98b6
   b4b54:	2003e5d0 	.word	0x2003e5d0
   b4b58:	000b98bd 	.word	0x000b98bd
   b4b5c:	2003e5e0 	.word	0x2003e5e0
   b4b60:	000b98c4 	.word	0x000b98c4
   b4b64:	2003e5f0 	.word	0x2003e5f0
   b4b68:	000b98cb 	.word	0x000b98cb
   b4b6c:	2003e540 	.word	0x2003e540
   b4b70:	000b98cd 	.word	0x000b98cd
   b4b74:	00000000 	.word	0x00000000

000b4b78 <_Z16send_Remote_Datav>:
void send_Remote_Data(){ 
   b4b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b7c:	b087      	sub	sp, #28
    FuelGauge fuel;
   b4b7e:	2100      	movs	r1, #0
   b4b80:	4668      	mov	r0, sp
   b4b82:	f001 fd75 	bl	b6670 <_ZN9FuelGaugeC1Eb>
	voltage = lipo.getVoltage();
   b4b86:	487c      	ldr	r0, [pc, #496]	; (b4d78 <_Z16send_Remote_Datav+0x200>)
    digitalWrite(pwr_On, HIGH);
   b4b88:	4d7c      	ldr	r5, [pc, #496]	; (b4d7c <_Z16send_Remote_Datav+0x204>)
  var3 = (PressureSensorData);
   b4b8a:	f8df b250 	ldr.w	fp, [pc, #592]	; b4ddc <_Z16send_Remote_Datav+0x264>
  var4 = String(als_Correction,1);
   b4b8e:	f8df a250 	ldr.w	sl, [pc, #592]	; b4de0 <_Z16send_Remote_Datav+0x268>
  var5 = String(batLevel,2);//state of charge or voltage
   b4b92:	4e7b      	ldr	r6, [pc, #492]	; (b4d80 <_Z16send_Remote_Datav+0x208>)
   b4b94:	f8df 924c 	ldr.w	r9, [pc, #588]	; b4de4 <_Z16send_Remote_Datav+0x26c>
  var6 = String(calculated_Depth,2);
   b4b98:	f8df 824c 	ldr.w	r8, [pc, #588]	; b4de8 <_Z16send_Remote_Datav+0x270>
   var7 = (300);
   b4b9c:	4f79      	ldr	r7, [pc, #484]	; (b4d84 <_Z16send_Remote_Datav+0x20c>)
	voltage = lipo.getVoltage();
   b4b9e:	f000 fa81 	bl	b50a4 <_ZN8MAX1704310getVoltageEv>
   b4ba2:	4b79      	ldr	r3, [pc, #484]	; (b4d88 <_Z16send_Remote_Datav+0x210>)
	soc = lipo.getSOC();
   b4ba4:	4874      	ldr	r0, [pc, #464]	; (b4d78 <_Z16send_Remote_Datav+0x200>)
	voltage = lipo.getVoltage();
   b4ba6:	ed83 0a00 	vstr	s0, [r3]
	soc = lipo.getSOC();
   b4baa:	f000 fa8d 	bl	b50c8 <_ZN8MAX170436getSOCEv>
   b4bae:	ee10 0a10 	vmov	r0, s0
	soc = soc/2.56;
   b4bb2:	f003 ff07 	bl	b89c4 <__aeabi_f2d>
   b4bb6:	a36e      	add	r3, pc, #440	; (adr r3, b4d70 <_Z16send_Remote_Datav+0x1f8>)
   b4bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bbc:	f004 f884 	bl	b8cc8 <__aeabi_ddiv>
   b4bc0:	f004 fa50 	bl	b9064 <__aeabi_d2f>
   b4bc4:	4b71      	ldr	r3, [pc, #452]	; (b4d8c <_Z16send_Remote_Datav+0x214>)
    digitalWrite(pwr_On, HIGH);
   b4bc6:	2101      	movs	r1, #1
	soc = soc/2.56;
   b4bc8:	6018      	str	r0, [r3, #0]
    digitalWrite(pwr_On, HIGH);
   b4bca:	8828      	ldrh	r0, [r5, #0]
   b4bcc:	f002 fbf5 	bl	b73ba <digitalWrite>
    analogWrite(laser_Cntrl, 255); //PWM output on D2 for 180 Deg. LED Reflective control
   b4bd0:	4b6f      	ldr	r3, [pc, #444]	; (b4d90 <_Z16send_Remote_Datav+0x218>)
   b4bd2:	21ff      	movs	r1, #255	; 0xff
   b4bd4:	8818      	ldrh	r0, [r3, #0]
   b4bd6:	f002 fc20 	bl	b741a <_Z11analogWritetm>
  var2= String(tempSense,1);
   b4bda:	4b6e      	ldr	r3, [pc, #440]	; (b4d94 <_Z16send_Remote_Datav+0x21c>)
   b4bdc:	2101      	movs	r1, #1
   b4bde:	ed93 0a00 	vldr	s0, [r3]
   b4be2:	a802      	add	r0, sp, #8
   b4be4:	f001 fa95 	bl	b6112 <_ZN6StringC1Efi>
   b4be8:	4b6b      	ldr	r3, [pc, #428]	; (b4d98 <_Z16send_Remote_Datav+0x220>)
   b4bea:	a902      	add	r1, sp, #8
   b4bec:	4618      	mov	r0, r3
   b4bee:	f001 fa5b 	bl	b60a8 <_ZN6StringaSEOS_>
   b4bf2:	a802      	add	r0, sp, #8
   b4bf4:	f001 f9c2 	bl	b5f7c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
   b4bf8:	4968      	ldr	r1, [pc, #416]	; (b4d9c <_Z16send_Remote_Datav+0x224>)
   b4bfa:	220a      	movs	r2, #10
   b4bfc:	6809      	ldr	r1, [r1, #0]
   b4bfe:	a802      	add	r0, sp, #8
   b4c00:	f001 fa74 	bl	b60ec <_ZN6StringC1Eih>
  var3 = (PressureSensorData);
   b4c04:	a902      	add	r1, sp, #8
   b4c06:	4658      	mov	r0, fp
   b4c08:	f001 fa56 	bl	b60b8 <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   b4c0c:	a802      	add	r0, sp, #8
   b4c0e:	f001 f9b5 	bl	b5f7c <_ZN6StringD1Ev>
  var4 = String(als_Correction,1);
   b4c12:	4a63      	ldr	r2, [pc, #396]	; (b4da0 <_Z16send_Remote_Datav+0x228>)
   b4c14:	2101      	movs	r1, #1
   b4c16:	ed92 0a00 	vldr	s0, [r2]
   b4c1a:	a802      	add	r0, sp, #8
   b4c1c:	f001 fa79 	bl	b6112 <_ZN6StringC1Efi>
   b4c20:	a902      	add	r1, sp, #8
   b4c22:	4650      	mov	r0, sl
   b4c24:	f001 fa40 	bl	b60a8 <_ZN6StringaSEOS_>
   b4c28:	a802      	add	r0, sp, #8
   b4c2a:	f001 f9a7 	bl	b5f7c <_ZN6StringD1Ev>
  var5 = String(batLevel,2);//state of charge or voltage
   b4c2e:	ed96 0a00 	vldr	s0, [r6]
   b4c32:	2102      	movs	r1, #2
   b4c34:	a802      	add	r0, sp, #8
   b4c36:	f001 fa6c 	bl	b6112 <_ZN6StringC1Efi>
   b4c3a:	a902      	add	r1, sp, #8
   b4c3c:	4648      	mov	r0, r9
   b4c3e:	f001 fa33 	bl	b60a8 <_ZN6StringaSEOS_>
   b4c42:	a802      	add	r0, sp, #8
   b4c44:	f001 f99a 	bl	b5f7c <_ZN6StringD1Ev>
  var6 = String(calculated_Depth,2);
   b4c48:	4a56      	ldr	r2, [pc, #344]	; (b4da4 <_Z16send_Remote_Datav+0x22c>)
   b4c4a:	2102      	movs	r1, #2
   b4c4c:	ed92 0a00 	vldr	s0, [r2]
   b4c50:	a802      	add	r0, sp, #8
   b4c52:	f001 fa5e 	bl	b6112 <_ZN6StringC1Efi>
   b4c56:	a902      	add	r1, sp, #8
   b4c58:	4640      	mov	r0, r8
   b4c5a:	f001 fa25 	bl	b60a8 <_ZN6StringaSEOS_>
   b4c5e:	a802      	add	r0, sp, #8
   b4c60:	f001 f98c 	bl	b5f7c <_ZN6StringD1Ev>
	StringSumHelper(int num) : String(num) {}
   b4c64:	220a      	movs	r2, #10
   b4c66:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b4c6a:	a802      	add	r0, sp, #8
   b4c6c:	f001 fa3e 	bl	b60ec <_ZN6StringC1Eih>
   var7 = (300);
   b4c70:	a902      	add	r1, sp, #8
   b4c72:	4638      	mov	r0, r7
   b4c74:	f001 fa20 	bl	b60b8 <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   b4c78:	a802      	add	r0, sp, #8
   b4c7a:	f001 f97f 	bl	b5f7c <_ZN6StringD1Ev>
 x = 0;
   b4c7e:	4a4a      	ldr	r2, [pc, #296]	; (b4da8 <_Z16send_Remote_Datav+0x230>)
   b4c80:	2400      	movs	r4, #0
   b4c82:	6014      	str	r4, [r2, #0]
Serial.println("");
   b4c84:	f002 f91c 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4c88:	4948      	ldr	r1, [pc, #288]	; (b4dac <_Z16send_Remote_Datav+0x234>)
   b4c8a:	f001 fb12 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.println("String Concantenations:"); 
   b4c8e:	f002 f917 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4c92:	4947      	ldr	r1, [pc, #284]	; (b4db0 <_Z16send_Remote_Datav+0x238>)
   b4c94:	f001 fb0d 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("Server Time Added");
   b4c98:	f002 f912 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4c9c:	4945      	ldr	r1, [pc, #276]	; (b4db4 <_Z16send_Remote_Datav+0x23c>)
   b4c9e:	f001 faf1 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var1);//output to serial console: NOTE: Time variable is added at Server!! No Output here currently for var1
   b4ca2:	f002 f90d 	bl	b6ec0 <_Z16_fetch_usbserialv>
	const char * c_str() const { return buffer; }
   b4ca6:	4a44      	ldr	r2, [pc, #272]	; (b4db8 <_Z16send_Remote_Datav+0x240>)
   b4ca8:	6811      	ldr	r1, [r2, #0]
   b4caa:	f001 fb02 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("Temperature: ");//delay(10);
   b4cae:	f002 f907 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cb2:	4942      	ldr	r1, [pc, #264]	; (b4dbc <_Z16send_Remote_Datav+0x244>)
   b4cb4:	f001 fae6 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var2);
   b4cb8:	f002 f902 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cbc:	4b36      	ldr	r3, [pc, #216]	; (b4d98 <_Z16send_Remote_Datav+0x220>)
   b4cbe:	6819      	ldr	r1, [r3, #0]
   b4cc0:	f001 faf7 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("Atm. Pressure: ");
   b4cc4:	f002 f8fc 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cc8:	493d      	ldr	r1, [pc, #244]	; (b4dc0 <_Z16send_Remote_Datav+0x248>)
   b4cca:	f001 fadb 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var3);
   b4cce:	f002 f8f7 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cd2:	f8db 1000 	ldr.w	r1, [fp]
   b4cd6:	f001 faec 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("ALS: ");//delay(10);
   b4cda:	f002 f8f1 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cde:	4939      	ldr	r1, [pc, #228]	; (b4dc4 <_Z16send_Remote_Datav+0x24c>)
   b4ce0:	f001 fad0 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var4);
   b4ce4:	f002 f8ec 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4ce8:	f8da 1000 	ldr.w	r1, [sl]
   b4cec:	f001 fae1 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("Input Voltage: ");///delay(10);
   b4cf0:	f002 f8e6 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cf4:	4934      	ldr	r1, [pc, #208]	; (b4dc8 <_Z16send_Remote_Datav+0x250>)
   b4cf6:	f001 fac5 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var5);
   b4cfa:	f002 f8e1 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4cfe:	f8d9 1000 	ldr.w	r1, [r9]
   b4d02:	f001 fad6 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("Depth: ");
   b4d06:	f002 f8db 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4d0a:	4930      	ldr	r1, [pc, #192]	; (b4dcc <_Z16send_Remote_Datav+0x254>)
   b4d0c:	f001 faba 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var6);
   b4d10:	f002 f8d6 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4d14:	f8d8 1000 	ldr.w	r1, [r8]
   b4d18:	f001 facb 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print("TDS Placeholder: ");
   b4d1c:	f002 f8d0 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4d20:	492b      	ldr	r1, [pc, #172]	; (b4dd0 <_Z16send_Remote_Datav+0x258>)
   b4d22:	f001 faaf 	bl	b6284 <_ZN5Print5printEPKc>
Serial.println(var7);
   b4d26:	f002 f8cb 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4d2a:	6839      	ldr	r1, [r7, #0]
   b4d2c:	f001 fac1 	bl	b62b2 <_ZN5Print7printlnEPKc>
Serial.print  ("Pwr.Supply Voltage: ");
   b4d30:	f002 f8c6 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4d34:	4927      	ldr	r1, [pc, #156]	; (b4dd4 <_Z16send_Remote_Datav+0x25c>)
   b4d36:	f001 faa5 	bl	b6284 <_ZN5Print5printEPKc>
    Serial.println(batLevel);
   b4d3a:	f002 f8c1 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4d3e:	ed96 0a00 	vldr	s0, [r6]
   b4d42:	2102      	movs	r1, #2
   b4d44:	f001 fbc3 	bl	b64ce <_ZN5Print7printlnEfi>
delay (1);
   b4d48:	2001      	movs	r0, #1
   b4d4a:	f001 fc7b 	bl	b6644 <delay>
digitalWrite(pwr_On, LOW);
   b4d4e:	8828      	ldrh	r0, [r5, #0]
   b4d50:	4621      	mov	r1, r4
   b4d52:	f002 fb32 	bl	b73ba <digitalWrite>
 sentx = 0;
   b4d56:	4b20      	ldr	r3, [pc, #128]	; (b4dd8 <_Z16send_Remote_Datav+0x260>)
   b4d58:	601c      	str	r4, [r3, #0]
send_Webhook();
   b4d5a:	f7ff fdf7 	bl	b494c <_Z12send_Webhookv>
    FuelGauge fuel;
   b4d5e:	4668      	mov	r0, sp
   b4d60:	f001 fc96 	bl	b6690 <_ZN9FuelGaugeD1Ev>
        }
   b4d64:	b007      	add	sp, #28
   b4d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4d6a:	bf00      	nop
   b4d6c:	f3af 8000 	nop.w
   b4d70:	47ae147b 	.word	0x47ae147b
   b4d74:	40047ae1 	.word	0x40047ae1
   b4d78:	2003e664 	.word	0x2003e664
   b4d7c:	2003e4b4 	.word	0x2003e4b4
   b4d80:	2003e548 	.word	0x2003e548
   b4d84:	2003e610 	.word	0x2003e610
   b4d88:	2003e65c 	.word	0x2003e65c
   b4d8c:	2003e58c 	.word	0x2003e58c
   b4d90:	2003e4ac 	.word	0x2003e4ac
   b4d94:	2003e590 	.word	0x2003e590
   b4d98:	2003e5c0 	.word	0x2003e5c0
   b4d9c:	2003e53c 	.word	0x2003e53c
   b4da0:	2003e544 	.word	0x2003e544
   b4da4:	2003e54c 	.word	0x2003e54c
   b4da8:	2003e660 	.word	0x2003e660
   b4dac:	000b9b7f 	.word	0x000b9b7f
   b4db0:	000b98d7 	.word	0x000b98d7
   b4db4:	000b98ef 	.word	0x000b98ef
   b4db8:	2003e5b0 	.word	0x2003e5b0
   b4dbc:	000b9901 	.word	0x000b9901
   b4dc0:	000b990f 	.word	0x000b990f
   b4dc4:	000b96e5 	.word	0x000b96e5
   b4dc8:	000b991f 	.word	0x000b991f
   b4dcc:	000b992f 	.word	0x000b992f
   b4dd0:	000b9937 	.word	0x000b9937
   b4dd4:	000b9949 	.word	0x000b9949
   b4dd8:	2003e588 	.word	0x2003e588
   b4ddc:	2003e5d0 	.word	0x2003e5d0
   b4de0:	2003e5e0 	.word	0x2003e5e0
   b4de4:	2003e5f0 	.word	0x2003e5f0
   b4de8:	2003e600 	.word	0x2003e600

000b4dec <loop>:
{
   b4dec:	b508      	push	{r3, lr}
  Get_Bat_Level();
   b4dee:	f7ff fa7b 	bl	b42e8 <_Z13Get_Bat_Levelv>
  get_Temperature();  
   b4df2:	f7ff fa99 	bl	b4328 <_Z15get_Temperaturev>
  get_Pressure_Data();
   b4df6:	f7ff fb03 	bl	b4400 <_Z17get_Pressure_Datav>
  get_ALS_Reading(); 
   b4dfa:	f7ff faa3 	bl	b4344 <_Z15get_ALS_Readingv>
  send_Over_USB_Link();//so we can look at it on the serial monitor
   b4dfe:	f7ff fb47 	bl	b4490 <_Z18send_Over_USB_Linkv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4e02:	f000 fead 	bl	b5b60 <spark_cloud_flag_connected>
  if (Particle.connected() && Time.isValid()) {
   b4e06:	b130      	cbz	r0, b4e16 <loop+0x2a>
   b4e08:	f001 fbe4 	bl	b65d4 <_ZN9TimeClass7isValidEv>
   b4e0c:	b118      	cbz	r0, b4e16 <loop+0x2a>
}
   b4e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      send_Remote_Data();
   b4e12:	f7ff beb1 	b.w	b4b78 <_Z16send_Remote_Datav>
}
   b4e16:	bd08      	pop	{r3, pc}

000b4e18 <_Z11go_To_Sleepv>:
void go_To_Sleep(){
   b4e18:	b530      	push	{r4, r5, lr}
    digitalWrite(pwr_On, LOW);
   b4e1a:	4b45      	ldr	r3, [pc, #276]	; (b4f30 <_Z11go_To_Sleepv+0x118>)
void go_To_Sleep(){
   b4e1c:	b08b      	sub	sp, #44	; 0x2c
    digitalWrite(pwr_On, LOW);
   b4e1e:	8818      	ldrh	r0, [r3, #0]
   b4e20:	2100      	movs	r1, #0
   b4e22:	f002 faca 	bl	b73ba <digitalWrite>
    delay (1000); 
   b4e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4e2a:	f001 fc0b 	bl	b6644 <delay>
    sentx = 0; //reset counter for data tx
   b4e2e:	4b41      	ldr	r3, [pc, #260]	; (b4f34 <_Z11go_To_Sleepv+0x11c>)
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4e30:	4941      	ldr	r1, [pc, #260]	; (b4f38 <_Z11go_To_Sleepv+0x120>)
   b4e32:	2500      	movs	r5, #0
   b4e34:	601d      	str	r5, [r3, #0]
        : config_(config) {
   b4e36:	ab05      	add	r3, sp, #20
   b4e38:	9304      	str	r3, [sp, #16]
              valid_(true) {
   b4e3a:	2301      	movs	r3, #1
        config_.size = sizeof(hal_sleep_config_t);
   b4e3c:	2210      	movs	r2, #16
              valid_(true) {
   b4e3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.version = HAL_SLEEP_VERSION;
   b4e42:	2303      	movs	r3, #3
   b4e44:	f8ad 3016 	strh.w	r3, [sp, #22]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4e48:	4610      	mov	r0, r2
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4e4a:	2302      	movs	r3, #2
              valid_(true) {
   b4e4c:	e9cd 5506 	strd	r5, r5, [sp, #24]
   b4e50:	9508      	str	r5, [sp, #32]
        config_.size = sizeof(hal_sleep_config_t);
   b4e52:	f8ad 2014 	strh.w	r2, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4e56:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4e5a:	f002 fbc1 	bl	b75e0 <_ZnwjRKSt9nothrow_t>
   b4e5e:	4604      	mov	r4, r0
   b4e60:	2800      	cmp	r0, #0
   b4e62:	d05f      	beq.n	b4f24 <_Z11go_To_Sleepv+0x10c>
   b4e64:	2210      	movs	r2, #16
   b4e66:	4629      	mov	r1, r5
   b4e68:	f004 fb5a 	bl	b9520 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4e6c:	4b33      	ldr	r3, [pc, #204]	; (b4f3c <_Z11go_To_Sleepv+0x124>)
   b4e6e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4e70:	2304      	movs	r3, #4
   b4e72:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4e74:	9b08      	ldr	r3, [sp, #32]
   b4e76:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   b4e78:	f64e 2360 	movw	r3, #60000	; 0xea60
   b4e7c:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4e7e:	9408      	str	r4, [sp, #32]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   b4e80:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4e84:	b1b3      	cbz	r3, b4eb4 <_Z11go_To_Sleepv+0x9c>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e86:	9b04      	ldr	r3, [sp, #16]
   b4e88:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4e8a:	2b00      	cmp	r3, #0
   b4e8c:	d031      	beq.n	b4ef2 <_Z11go_To_Sleepv+0xda>
            if (start->type == type) {
   b4e8e:	889a      	ldrh	r2, [r3, #4]
   b4e90:	2a0e      	cmp	r2, #14
   b4e92:	d006      	beq.n	b4ea2 <_Z11go_To_Sleepv+0x8a>
            start = start->next;
   b4e94:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4e96:	e7f8      	b.n	b4e8a <_Z11go_To_Sleepv+0x72>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   b4e98:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4e9a:	b353      	cbz	r3, b4ef2 <_Z11go_To_Sleepv+0xda>
            if (start->type == type) {
   b4e9c:	889a      	ldrh	r2, [r3, #4]
   b4e9e:	2a0e      	cmp	r2, #14
   b4ea0:	d1fa      	bne.n	b4e98 <_Z11go_To_Sleepv+0x80>
                if (networkWakeup->index == netif) {
   b4ea2:	7b1a      	ldrb	r2, [r3, #12]
   b4ea4:	2a04      	cmp	r2, #4
   b4ea6:	d1f7      	bne.n	b4e98 <_Z11go_To_Sleepv+0x80>
                    if (networkWakeup->flags != flags.value()) {
   b4ea8:	89da      	ldrh	r2, [r3, #14]
   b4eaa:	2a01      	cmp	r2, #1
   b4eac:	d002      	beq.n	b4eb4 <_Z11go_To_Sleepv+0x9c>
                        networkWakeup->flags |= flags.value();
   b4eae:	f042 0201 	orr.w	r2, r2, #1
   b4eb2:	81da      	strh	r2, [r3, #14]
Serial.println ("Powering off, going to sleep...");
   b4eb4:	f002 f804 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b4eb8:	4921      	ldr	r1, [pc, #132]	; (b4f40 <_Z11go_To_Sleepv+0x128>)
   b4eba:	f001 f9fa 	bl	b62b2 <_ZN5Print7printlnEPKc>
SystemSleepResult result = System.sleep(config);    // Device sleeps here
   b4ebe:	a904      	add	r1, sp, #16
   b4ec0:	a801      	add	r0, sp, #4
   b4ec2:	f000 ff3d 	bl	b5d40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4ec6:	9b01      	ldr	r3, [sp, #4]
        if (wakeupSource_) {
   b4ec8:	b12b      	cbz	r3, b4ed6 <_Z11go_To_Sleepv+0xbe>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4eca:	889a      	ldrh	r2, [r3, #4]
   b4ecc:	2a01      	cmp	r2, #1
   b4ece:	d102      	bne.n	b4ed6 <_Z11go_To_Sleepv+0xbe>
if (result.wakeupPin() == D2) {              // Woke by pin interrupt
   b4ed0:	899b      	ldrh	r3, [r3, #12]
   b4ed2:	2b02      	cmp	r3, #2
   b4ed4:	d001      	beq.n	b4eda <_Z11go_To_Sleepv+0xc2>
     send_Remote_Data();
   b4ed6:	f7ff fe4f 	bl	b4b78 <_Z16send_Remote_Datav>
        if (wakeupSource_) {
   b4eda:	9801      	ldr	r0, [sp, #4]
   b4edc:	b108      	cbz	r0, b4ee2 <_Z11go_To_Sleepv+0xca>
            free(wakeupSource_);
   b4ede:	f000 fe6f 	bl	b5bc0 <free>
        auto wakeupSource = config_.wakeup_sources;
   b4ee2:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
   b4ee4:	b308      	cbz	r0, b4f2a <_Z11go_To_Sleepv+0x112>
            auto next = wakeupSource->next;
   b4ee6:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   b4ee8:	210c      	movs	r1, #12
   b4eea:	f7ff f8d8 	bl	b409e <_ZdlPvj>
            wakeupSource = next;
   b4eee:	4620      	mov	r0, r4
        while (wakeupSource) {
   b4ef0:	e7f8      	b.n	b4ee4 <_Z11go_To_Sleepv+0xcc>
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   b4ef2:	4911      	ldr	r1, [pc, #68]	; (b4f38 <_Z11go_To_Sleepv+0x120>)
   b4ef4:	2014      	movs	r0, #20
   b4ef6:	f002 fb73 	bl	b75e0 <_ZnwjRKSt9nothrow_t>
   b4efa:	4604      	mov	r4, r0
   b4efc:	b178      	cbz	r0, b4f1e <_Z11go_To_Sleepv+0x106>
   b4efe:	2214      	movs	r2, #20
   b4f00:	2100      	movs	r1, #0
   b4f02:	f004 fb0d 	bl	b9520 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4f06:	4b0d      	ldr	r3, [pc, #52]	; (b4f3c <_Z11go_To_Sleepv+0x124>)
   b4f08:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   b4f0a:	230e      	movs	r3, #14
   b4f0c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4f0e:	9b08      	ldr	r3, [sp, #32]
   b4f10:	60a3      	str	r3, [r4, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   b4f12:	2304      	movs	r3, #4
   b4f14:	7323      	strb	r3, [r4, #12]
            wakeupSource->flags = flags.value();
   b4f16:	2301      	movs	r3, #1
   b4f18:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4f1a:	9408      	str	r4, [sp, #32]
   b4f1c:	e7ca      	b.n	b4eb4 <_Z11go_To_Sleepv+0x9c>
                valid_ = false;
   b4f1e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
   b4f22:	e7c7      	b.n	b4eb4 <_Z11go_To_Sleepv+0x9c>
                valid_ = false;
   b4f24:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
   b4f28:	e7aa      	b.n	b4e80 <_Z11go_To_Sleepv+0x68>
}
   b4f2a:	b00b      	add	sp, #44	; 0x2c
   b4f2c:	bd30      	pop	{r4, r5, pc}
   b4f2e:	bf00      	nop
   b4f30:	2003e4b4 	.word	0x2003e4b4
   b4f34:	2003e588 	.word	0x2003e588
   b4f38:	000b9b48 	.word	0x000b9b48
   b4f3c:	00030010 	.word	0x00030010
   b4f40:	000b995e 	.word	0x000b995e

000b4f44 <_GLOBAL__sub_I_pressureSensor>:
        val_(val) {
   b4f44:	4b18      	ldr	r3, [pc, #96]	; (b4fa8 <_GLOBAL__sub_I_pressureSensor+0x64>)
LPS28DFW pressureSensor;
   b4f46:	4819      	ldr	r0, [pc, #100]	; (b4fac <_GLOBAL__sub_I_pressureSensor+0x68>)
   b4f48:	2201      	movs	r2, #1
 //wakeupTime.Hour = wakeupHour;
 Serial.print(Time.hour());
 //wakeupTime.Minute = wakeupMinute;

  
}
   b4f4a:	b510      	push	{r4, lr}
   b4f4c:	701a      	strb	r2, [r3, #0]
  String var1 = ("");
   b4f4e:	4c18      	ldr	r4, [pc, #96]	; (b4fb0 <_GLOBAL__sub_I_pressureSensor+0x6c>)
LPS28DFW pressureSensor;
   b4f50:	f000 fb4e 	bl	b55f0 <_ZN8LPS28DFWC1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();   //VEML7700 instance
   b4f54:	4817      	ldr	r0, [pc, #92]	; (b4fb4 <_GLOBAL__sub_I_pressureSensor+0x70>)
   b4f56:	f000 f8d5 	bl	b5104 <_ZN17Adafruit_VEML7700C1Ev>
  String var1 = ("");
   b4f5a:	4621      	mov	r1, r4
   b4f5c:	4816      	ldr	r0, [pc, #88]	; (b4fb8 <_GLOBAL__sub_I_pressureSensor+0x74>)
   b4f5e:	f001 f858 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String var2 = ("");
   b4f62:	4621      	mov	r1, r4
   b4f64:	4815      	ldr	r0, [pc, #84]	; (b4fbc <_GLOBAL__sub_I_pressureSensor+0x78>)
   b4f66:	f001 f854 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String var3 = ("");
   b4f6a:	4621      	mov	r1, r4
   b4f6c:	4814      	ldr	r0, [pc, #80]	; (b4fc0 <_GLOBAL__sub_I_pressureSensor+0x7c>)
   b4f6e:	f001 f850 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String var4 = ("");
   b4f72:	4621      	mov	r1, r4
   b4f74:	4813      	ldr	r0, [pc, #76]	; (b4fc4 <_GLOBAL__sub_I_pressureSensor+0x80>)
   b4f76:	f001 f84c 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String var5 = ("");
   b4f7a:	4621      	mov	r1, r4
   b4f7c:	4812      	ldr	r0, [pc, #72]	; (b4fc8 <_GLOBAL__sub_I_pressureSensor+0x84>)
   b4f7e:	f001 f848 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String var6 = ("");
   b4f82:	4621      	mov	r1, r4
   b4f84:	4811      	ldr	r0, [pc, #68]	; (b4fcc <_GLOBAL__sub_I_pressureSensor+0x88>)
   b4f86:	f001 f844 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String var7 = ("");
   b4f8a:	4621      	mov	r1, r4
   b4f8c:	4810      	ldr	r0, [pc, #64]	; (b4fd0 <_GLOBAL__sub_I_pressureSensor+0x8c>)
   b4f8e:	f001 f840 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
  String time_Sent = ("");
   b4f92:	4621      	mov	r1, r4
   b4f94:	480f      	ldr	r0, [pc, #60]	; (b4fd4 <_GLOBAL__sub_I_pressureSensor+0x90>)
   b4f96:	f001 f83c 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b4f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   FuelGauge fuel;
   b4f9e:	480e      	ldr	r0, [pc, #56]	; (b4fd8 <_GLOBAL__sub_I_pressureSensor+0x94>)
   b4fa0:	2100      	movs	r1, #0
   b4fa2:	f001 bb65 	b.w	b6670 <_ZN9FuelGaugeC1Eb>
   b4fa6:	bf00      	nop
   b4fa8:	2003e540 	.word	0x2003e540
   b4fac:	2003e55c 	.word	0x2003e55c
   b4fb0:	000b9b7f 	.word	0x000b9b7f
   b4fb4:	2003e620 	.word	0x2003e620
   b4fb8:	2003e5b0 	.word	0x2003e5b0
   b4fbc:	2003e5c0 	.word	0x2003e5c0
   b4fc0:	2003e5d0 	.word	0x2003e5d0
   b4fc4:	2003e5e0 	.word	0x2003e5e0
   b4fc8:	2003e5f0 	.word	0x2003e5f0
   b4fcc:	2003e600 	.word	0x2003e600
   b4fd0:	2003e610 	.word	0x2003e610
   b4fd4:	2003e594 	.word	0x2003e594
   b4fd8:	2003e550 	.word	0x2003e550

000b4fdc <_ZN8MAX170435beginEv>:
{

}

uint8_t MAX17043::begin()
{
   b4fdc:	b508      	push	{r3, lr}
  Wire.begin();
   b4fde:	f002 fab7 	bl	b7550 <_Z19__fetch_global_Wirev>
   b4fe2:	f002 f897 	bl	b7114 <_ZN7TwoWire5beginEv>
  return 1;
}
   b4fe6:	2001      	movs	r0, #1
   b4fe8:	bd08      	pop	{r3, pc}

000b4fea <_ZN8MAX170437write16Eth>:
  configReg |= ((uint16_t)newCompensation << 8) | configReg;
  return write16(configReg, MAX17043_CONFIG);
}

uint8_t MAX17043::write16(uint16_t data, uint8_t address)
{
   b4fea:	b538      	push	{r3, r4, r5, lr}
   b4fec:	4615      	mov	r5, r2
   b4fee:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  msb = (data & 0xFF00) >> 8;
  lsb = (data & 0x00FF);
  Wire.beginTransmission(MAX17043_ADDRESS);
   b4ff0:	f002 faae 	bl	b7550 <_Z19__fetch_global_Wirev>
   b4ff4:	2136      	movs	r1, #54	; 0x36
   b4ff6:	f002 f8c3 	bl	b7180 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   b4ffa:	f002 faa9 	bl	b7550 <_Z19__fetch_global_Wirev>
   b4ffe:	6803      	ldr	r3, [r0, #0]
   b5000:	4629      	mov	r1, r5
   b5002:	689b      	ldr	r3, [r3, #8]
   b5004:	4798      	blx	r3
  Wire.write(msb);
   b5006:	f002 faa3 	bl	b7550 <_Z19__fetch_global_Wirev>
   b500a:	6803      	ldr	r3, [r0, #0]
   b500c:	0a21      	lsrs	r1, r4, #8
   b500e:	689b      	ldr	r3, [r3, #8]
   b5010:	4798      	blx	r3
  Wire.write(lsb);
   b5012:	f002 fa9d 	bl	b7550 <_Z19__fetch_global_Wirev>
   b5016:	6803      	ldr	r3, [r0, #0]
   b5018:	b2e1      	uxtb	r1, r4
   b501a:	689b      	ldr	r3, [r3, #8]
   b501c:	4798      	blx	r3
  return (Wire.endTransmission());
   b501e:	f002 fa97 	bl	b7550 <_Z19__fetch_global_Wirev>
}
   b5022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (Wire.endTransmission());
   b5026:	f002 b8b2 	b.w	b718e <_ZN7TwoWire15endTransmissionEv>

000b502a <_ZN8MAX1704310quickStartEv>:
  return write16(MAX17043_MODE_QUICKSTART, MAX17043_MODE);
   b502a:	2206      	movs	r2, #6
   b502c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   b5030:	f7ff bfdb 	b.w	b4fea <_ZN8MAX170437write16Eth>

000b5034 <_ZN8MAX170436read16Eh>:

uint16_t MAX17043::read16(uint8_t address)
{
   b5034:	b510      	push	{r4, lr}
   b5036:	460c      	mov	r4, r1
  uint8_t msb, lsb;
  int16_t timeout = 1000;

  Wire.beginTransmission(MAX17043_ADDRESS);
   b5038:	f002 fa8a 	bl	b7550 <_Z19__fetch_global_Wirev>
   b503c:	2136      	movs	r1, #54	; 0x36
   b503e:	f002 f89f 	bl	b7180 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);
   b5042:	f002 fa85 	bl	b7550 <_Z19__fetch_global_Wirev>
   b5046:	6803      	ldr	r3, [r0, #0]
   b5048:	4621      	mov	r1, r4
   b504a:	689b      	ldr	r3, [r3, #8]
   b504c:	4798      	blx	r3
  Wire.endTransmission(false);
   b504e:	f002 fa7f 	bl	b7550 <_Z19__fetch_global_Wirev>
   b5052:	2100      	movs	r1, #0
   b5054:	f002 f897 	bl	b7186 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MAX17043_ADDRESS, 2);
   b5058:	f002 fa7a 	bl	b7550 <_Z19__fetch_global_Wirev>
   b505c:	2202      	movs	r2, #2
   b505e:	2136      	movs	r1, #54	; 0x36
   b5060:	f002 f887 	bl	b7172 <_ZN7TwoWire11requestFromEhj>
   b5064:	f240 34e9 	movw	r4, #1001	; 0x3e9
  while ((Wire.available() < 2) && (timeout-- > 0))
   b5068:	f002 fa72 	bl	b7550 <_Z19__fetch_global_Wirev>
   b506c:	6803      	ldr	r3, [r0, #0]
   b506e:	691b      	ldr	r3, [r3, #16]
   b5070:	4798      	blx	r3
   b5072:	2801      	cmp	r0, #1
   b5074:	dc06      	bgt.n	b5084 <_ZN8MAX170436read16Eh+0x50>
   b5076:	3c01      	subs	r4, #1
   b5078:	b2a4      	uxth	r4, r4
   b507a:	b11c      	cbz	r4, b5084 <_ZN8MAX170436read16Eh+0x50>
    delay(1);
   b507c:	2001      	movs	r0, #1
   b507e:	f001 fae1 	bl	b6644 <delay>
  while ((Wire.available() < 2) && (timeout-- > 0))
   b5082:	e7f1      	b.n	b5068 <_ZN8MAX170436read16Eh+0x34>
  msb = Wire.read();
   b5084:	f002 fa64 	bl	b7550 <_Z19__fetch_global_Wirev>
   b5088:	6803      	ldr	r3, [r0, #0]
   b508a:	695b      	ldr	r3, [r3, #20]
   b508c:	4798      	blx	r3
   b508e:	4604      	mov	r4, r0
  lsb = Wire.read();
   b5090:	f002 fa5e 	bl	b7550 <_Z19__fetch_global_Wirev>
   b5094:	6803      	ldr	r3, [r0, #0]
   b5096:	695b      	ldr	r3, [r3, #20]
   b5098:	4798      	blx	r3

  return ((uint16_t) msb << 8) | lsb;
   b509a:	b2c3      	uxtb	r3, r0
   b509c:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
}
   b50a0:	b280      	uxth	r0, r0
   b50a2:	bd10      	pop	{r4, pc}

000b50a4 <_ZN8MAX1704310getVoltageEv>:
{
   b50a4:	b508      	push	{r3, lr}
  vCell = read16(MAX17043_VCELL);
   b50a6:	2102      	movs	r1, #2
   b50a8:	f7ff ffc4 	bl	b5034 <_ZN8MAX170436read16Eh>
  return ((float) vCell / 800.0);
   b50ac:	f3c0 130f 	ubfx	r3, r0, #4, #16
   b50b0:	ee00 3a10 	vmov	s0, r3
}
   b50b4:	eddf 7a03 	vldr	s15, [pc, #12]	; b50c4 <_ZN8MAX1704310getVoltageEv+0x20>
  return ((float) vCell / 800.0);
   b50b8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b50bc:	ee80 0a27 	vdiv.f32	s0, s0, s15
   b50c0:	bd08      	pop	{r3, pc}
   b50c2:	bf00      	nop
   b50c4:	44480000 	.word	0x44480000

000b50c8 <_ZN8MAX170436getSOCEv>:
{
   b50c8:	b508      	push	{r3, lr}
  soc = read16(MAX17043_SOC);
   b50ca:	2104      	movs	r1, #4
{
   b50cc:	ed2d 8b02 	vpush	{d8}
  soc = read16(MAX17043_SOC);
   b50d0:	f7ff ffb0 	bl	b5034 <_ZN8MAX170436read16Eh>
  percent = (soc & 0xFF00) >> 8;
   b50d4:	f3c0 230f 	ubfx	r3, r0, #8, #16
  percent += (float) (((uint8_t) soc) / 256.0);
   b50d8:	b2c0      	uxtb	r0, r0
  percent = (soc & 0xFF00) >> 8;
   b50da:	ee08 3a10 	vmov	s16, r3
  percent += (float) (((uint8_t) soc) / 256.0);
   b50de:	f003 fc5f 	bl	b89a0 <__aeabi_i2d>
   b50e2:	4b07      	ldr	r3, [pc, #28]	; (b5100 <_ZN8MAX170436getSOCEv+0x38>)
   b50e4:	2200      	movs	r2, #0
   b50e6:	f003 fcc5 	bl	b8a74 <__aeabi_dmul>
   b50ea:	f003 ffbb 	bl	b9064 <__aeabi_d2f>
  percent = (soc & 0xFF00) >> 8;
   b50ee:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
}
   b50f2:	ee07 0a90 	vmov	s15, r0
   b50f6:	ee37 0a88 	vadd.f32	s0, s15, s16
   b50fa:	ecbd 8b02 	vpop	{d8}
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	3f700000 	.word	0x3f700000

000b5104 <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   b5104:	4770      	bx	lr

000b5106 <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   b5106:	b508      	push	{r3, lr}
  return ALS_Data->read();
   b5108:	6840      	ldr	r0, [r0, #4]
   b510a:	f000 f955 	bl	b53b8 <_ZN20Adafruit_I2CRegister4readEv>
}
   b510e:	b280      	uxth	r0, r0
   b5110:	bd08      	pop	{r3, pc}

000b5112 <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   b5112:	69c0      	ldr	r0, [r0, #28]
   b5114:	f081 0101 	eor.w	r1, r1, #1
   b5118:	f000 b97d 	b.w	b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b511c <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   b511c:	6a00      	ldr	r0, [r0, #32]
   b511e:	f000 b97a 	b.w	b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5122 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   b5122:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5124:	f000 b977 	b.w	b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5128 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   b5128:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b512a:	f000 b974 	b.w	b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b512e <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   b512e:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   b5130:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5132:	f000 f962 	bl	b53fa <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b5136:	b2c0      	uxtb	r0, r0
   b5138:	bd08      	pop	{r3, pc}

000b513a <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   b513a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b513c:	f000 b96b 	b.w	b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5140 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   b5140:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   b5142:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5144:	f000 f959 	bl	b53fa <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   b5148:	b2c0      	uxtb	r0, r0
   b514a:	bd08      	pop	{r3, pc}

000b514c <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   b514c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b514e:	f000 b962 	b.w	b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>

000b5152 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   b5152:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5154:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b5156:	200c      	movs	r0, #12
{
   b5158:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   b515a:	f7fe ff9c 	bl	b4096 <_Znwj>
   b515e:	4605      	mov	r5, r0
   b5160:	b118      	cbz	r0, b516a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   b5162:	9a03      	ldr	r2, [sp, #12]
   b5164:	2110      	movs	r1, #16
   b5166:	f000 f970 	bl	b544a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b516a:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   b516c:	4628      	mov	r0, r5
   b516e:	f000 f985 	bl	b547c <_ZN18Adafruit_I2CDevice5beginEv>
   b5172:	4605      	mov	r5, r0
   b5174:	2800      	cmp	r0, #0
   b5176:	f000 80d2 	beq.w	b531e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   b517a:	2010      	movs	r0, #16
   b517c:	f7fe ff8b 	bl	b4096 <_Znwj>
   b5180:	4606      	mov	r6, r0
   b5182:	b138      	cbz	r0, b5194 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   b5184:	2301      	movs	r3, #1
   b5186:	2200      	movs	r2, #0
   b5188:	e9cd 2300 	strd	r2, r3, [sp]
   b518c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b518e:	2302      	movs	r3, #2
   b5190:	f000 f8c8 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b5194:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   b5196:	2010      	movs	r0, #16
   b5198:	f7fe ff7d 	bl	b4096 <_Znwj>
   b519c:	4606      	mov	r6, r0
   b519e:	b138      	cbz	r0, b51b0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   b51a0:	2300      	movs	r3, #0
   b51a2:	2201      	movs	r2, #1
   b51a4:	e9cd 3200 	strd	r3, r2, [sp]
   b51a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b51aa:	2302      	movs	r3, #2
   b51ac:	f000 f8ba 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b51b0:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   b51b2:	2010      	movs	r0, #16
   b51b4:	f7fe ff6f 	bl	b4096 <_Znwj>
   b51b8:	4606      	mov	r6, r0
   b51ba:	b140      	cbz	r0, b51ce <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   b51bc:	2300      	movs	r3, #0
   b51be:	2201      	movs	r2, #1
   b51c0:	e9cd 3200 	strd	r3, r2, [sp]
   b51c4:	2302      	movs	r3, #2
   b51c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b51c8:	461a      	mov	r2, r3
   b51ca:	f000 f8ab 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b51ce:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   b51d0:	2010      	movs	r0, #16
   b51d2:	f7fe ff60 	bl	b4096 <_Znwj>
   b51d6:	4606      	mov	r6, r0
   b51d8:	b148      	cbz	r0, b51ee <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   b51da:	2300      	movs	r3, #0
   b51dc:	f04f 0e01 	mov.w	lr, #1
   b51e0:	e9cd 3e00 	strd	r3, lr, [sp]
   b51e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b51e6:	2302      	movs	r3, #2
   b51e8:	2203      	movs	r2, #3
   b51ea:	f000 f89b 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b51ee:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   b51f0:	2010      	movs	r0, #16
   b51f2:	f7fe ff50 	bl	b4096 <_Znwj>
   b51f6:	4606      	mov	r6, r0
   b51f8:	b148      	cbz	r0, b520e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   b51fa:	2300      	movs	r3, #0
   b51fc:	f04f 0c01 	mov.w	ip, #1
   b5200:	e9cd 3c00 	strd	r3, ip, [sp]
   b5204:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5206:	2302      	movs	r3, #2
   b5208:	2204      	movs	r2, #4
   b520a:	f000 f88b 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b520e:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   b5210:	2010      	movs	r0, #16
   b5212:	f7fe ff40 	bl	b4096 <_Znwj>
   b5216:	4606      	mov	r6, r0
   b5218:	b140      	cbz	r0, b522c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   b521a:	2300      	movs	r3, #0
   b521c:	2101      	movs	r1, #1
   b521e:	e9cd 3100 	strd	r3, r1, [sp]
   b5222:	2205      	movs	r2, #5
   b5224:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5226:	2302      	movs	r3, #2
   b5228:	f000 f87c 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b522c:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   b522e:	2010      	movs	r0, #16
   b5230:	f7fe ff31 	bl	b4096 <_Znwj>
   b5234:	4606      	mov	r6, r0
   b5236:	b140      	cbz	r0, b524a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   b5238:	2300      	movs	r3, #0
   b523a:	2201      	movs	r2, #1
   b523c:	e9cd 3200 	strd	r3, r2, [sp]
   b5240:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5242:	2302      	movs	r3, #2
   b5244:	2206      	movs	r2, #6
   b5246:	f000 f86d 	bl	b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   b524a:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   b524c:	2008      	movs	r0, #8
   b524e:	f7fe ff22 	bl	b4096 <_Znwj>
   b5252:	4606      	mov	r6, r0
   b5254:	b120      	cbz	r0, b5260 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   b5256:	6821      	ldr	r1, [r4, #0]
   b5258:	2300      	movs	r3, #0
   b525a:	2201      	movs	r2, #1
   b525c:	f000 f8c8 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b5260:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   b5262:	2008      	movs	r0, #8
   b5264:	f7fe ff17 	bl	b4096 <_Znwj>
   b5268:	4606      	mov	r6, r0
   b526a:	b120      	cbz	r0, b5276 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   b526c:	2301      	movs	r3, #1
   b526e:	6821      	ldr	r1, [r4, #0]
   b5270:	461a      	mov	r2, r3
   b5272:	f000 f8bd 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b5276:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   b5278:	2008      	movs	r0, #8
   b527a:	f7fe ff0c 	bl	b4096 <_Znwj>
   b527e:	4606      	mov	r6, r0
   b5280:	b120      	cbz	r0, b528c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   b5282:	6821      	ldr	r1, [r4, #0]
   b5284:	2304      	movs	r3, #4
   b5286:	2202      	movs	r2, #2
   b5288:	f000 f8b2 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b528c:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   b528e:	2008      	movs	r0, #8
   b5290:	f7fe ff01 	bl	b4096 <_Znwj>
   b5294:	4606      	mov	r6, r0
   b5296:	b120      	cbz	r0, b52a2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   b5298:	6821      	ldr	r1, [r4, #0]
   b529a:	2306      	movs	r3, #6
   b529c:	2204      	movs	r2, #4
   b529e:	f000 f8a7 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b52a2:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   b52a4:	2008      	movs	r0, #8
   b52a6:	f7fe fef6 	bl	b4096 <_Znwj>
   b52aa:	4606      	mov	r6, r0
   b52ac:	b120      	cbz	r0, b52b8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   b52ae:	6821      	ldr	r1, [r4, #0]
   b52b0:	230b      	movs	r3, #11
   b52b2:	2202      	movs	r2, #2
   b52b4:	f000 f89c 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b52b8:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   b52ba:	2008      	movs	r0, #8
   b52bc:	f7fe feeb 	bl	b4096 <_Znwj>
   b52c0:	4606      	mov	r6, r0
   b52c2:	b120      	cbz	r0, b52ce <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   b52c4:	6961      	ldr	r1, [r4, #20]
   b52c6:	2300      	movs	r3, #0
   b52c8:	2201      	movs	r2, #1
   b52ca:	f000 f891 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   b52ce:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b52d0:	2008      	movs	r0, #8
   b52d2:	f7fe fee0 	bl	b4096 <_Znwj>
   b52d6:	4606      	mov	r6, r0
   b52d8:	b120      	cbz	r0, b52e4 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   b52da:	6961      	ldr	r1, [r4, #20]
   b52dc:	2301      	movs	r3, #1
   b52de:	2202      	movs	r2, #2
   b52e0:	f000 f886 	bl	b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   b52e4:	2100      	movs	r1, #0
   b52e6:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   b52e8:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   b52ea:	f7ff ff12 	bl	b5112 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   b52ee:	2100      	movs	r1, #0
   b52f0:	4620      	mov	r0, r4
   b52f2:	f7ff ff13 	bl	b511c <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   b52f6:	2100      	movs	r1, #0
   b52f8:	4620      	mov	r0, r4
   b52fa:	f7ff ff12 	bl	b5122 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   b52fe:	2100      	movs	r1, #0
   b5300:	4620      	mov	r0, r4
   b5302:	f7ff ff1a 	bl	b513a <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   b5306:	2100      	movs	r1, #0
   b5308:	4620      	mov	r0, r4
   b530a:	f7ff ff0d 	bl	b5128 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   b530e:	2100      	movs	r1, #0
   b5310:	4620      	mov	r0, r4
   b5312:	f7ff ff1b 	bl	b514c <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   b5316:	2101      	movs	r1, #1
   b5318:	4620      	mov	r0, r4
   b531a:	f7ff fefa 	bl	b5112 <_ZN17Adafruit_VEML77006enableEb>
}
   b531e:	4628      	mov	r0, r5
   b5320:	b004      	add	sp, #16
   b5322:	bd70      	pop	{r4, r5, r6, pc}

000b5324 <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   b5324:	b510      	push	{r4, lr}
  _device = device;
   b5326:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   b5328:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   b532a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   b532e:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   b5332:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   b5334:	7202      	strb	r2, [r0, #8]
  _width = width;
   b5336:	7183      	strb	r3, [r0, #6]
}
   b5338:	bd10      	pop	{r4, pc}

000b533a <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   b533a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   b533c:	8883      	ldrh	r3, [r0, #4]
   b533e:	f88d 300c 	strb.w	r3, [sp, #12]
   b5342:	0a1b      	lsrs	r3, r3, #8
   b5344:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   b5348:	79c3      	ldrb	r3, [r0, #7]
   b534a:	9301      	str	r3, [sp, #4]
   b534c:	ab03      	add	r3, sp, #12
   b534e:	9300      	str	r3, [sp, #0]
   b5350:	6800      	ldr	r0, [r0, #0]
   b5352:	2301      	movs	r3, #1
   b5354:	f000 f89e 	bl	b5494 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   b5358:	b005      	add	sp, #20
   b535a:	f85d fb04 	ldr.w	pc, [sp], #4

000b535e <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   b535e:	b4f0      	push	{r4, r5, r6, r7}
   b5360:	460c      	mov	r4, r1
  if (numbytes == 0) {
   b5362:	b902      	cbnz	r2, b5366 <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   b5364:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   b5366:	2a04      	cmp	r2, #4
   b5368:	d813      	bhi.n	b5392 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   b536a:	f100 0509 	add.w	r5, r0, #9
   b536e:	1883      	adds	r3, r0, r2
   b5370:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   b5372:	4283      	cmp	r3, r0
   b5374:	d009      	beq.n	b538a <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   b5376:	7a07      	ldrb	r7, [r0, #8]
      _buffer[i] = value & 0xFF;
   b5378:	b2e6      	uxtb	r6, r4
    if (_bitorder == LSBFIRST) {
   b537a:	b927      	cbnz	r7, b5386 <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   b537c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   b537e:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   b5380:	3501      	adds	r5, #1
   b5382:	3b01      	subs	r3, #1
   b5384:	e7f5      	b.n	b5372 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   b5386:	721e      	strb	r6, [r3, #8]
   b5388:	e7f9      	b.n	b537e <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   b538a:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b538c:	4618      	mov	r0, r3
   b538e:	f7ff bfd4 	b.w	b533a <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   b5392:	2000      	movs	r0, #0
   b5394:	bcf0      	pop	{r4, r5, r6, r7}
   b5396:	4770      	bx	lr

000b5398 <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b5398:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   b539a:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   b539c:	460b      	mov	r3, r1
  _buffer[0] = _address;
   b539e:	8881      	ldrh	r1, [r0, #4]
   b53a0:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   b53a4:	2100      	movs	r1, #0
   b53a6:	e9cd 2100 	strd	r2, r1, [sp]
   b53aa:	2201      	movs	r2, #1
   b53ac:	4621      	mov	r1, r4
   b53ae:	6800      	ldr	r0, [r0, #0]
   b53b0:	f000 f8b9 	bl	b5526 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   b53b4:	b002      	add	sp, #8
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   b53b8:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   b53ba:	f100 0509 	add.w	r5, r0, #9
   b53be:	7982      	ldrb	r2, [r0, #6]
   b53c0:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   b53c2:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   b53c4:	f7ff ffe8 	bl	b5398 <_ZN20Adafruit_I2CRegister4readEPhh>
   b53c8:	b178      	cbz	r0, b53ea <_ZN20Adafruit_I2CRegister4readEv+0x32>
   b53ca:	79a2      	ldrb	r2, [r4, #6]
   b53cc:	4629      	mov	r1, r5
   b53ce:	4422      	add	r2, r4
  uint32_t value = 0;
   b53d0:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   b53d2:	42a2      	cmp	r2, r4
   b53d4:	d00b      	beq.n	b53ee <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   b53d6:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   b53d8:	7a20      	ldrb	r0, [r4, #8]
   b53da:	b920      	cbnz	r0, b53e6 <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   b53dc:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   b53de:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   b53e0:	3a01      	subs	r2, #1
   b53e2:	3101      	adds	r1, #1
   b53e4:	e7f5      	b.n	b53d2 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   b53e6:	7808      	ldrb	r0, [r1, #0]
   b53e8:	e7f9      	b.n	b53de <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   b53ea:	f04f 30ff 	mov.w	r0, #4294967295
}
   b53ee:	bd38      	pop	{r3, r4, r5, pc}

000b53f0 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   b53f0:	b510      	push	{r4, lr}
  _register = reg;
   b53f2:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b53f4:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b53f6:	7143      	strb	r3, [r0, #5]
}
   b53f8:	bd10      	pop	{r4, pc}

000b53fa <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   b53fa:	b510      	push	{r4, lr}
   b53fc:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b53fe:	6800      	ldr	r0, [r0, #0]
   b5400:	f7ff ffda 	bl	b53b8 <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   b5404:	7923      	ldrb	r3, [r4, #4]
   b5406:	1c5a      	adds	r2, r3, #1
   b5408:	2301      	movs	r3, #1
   b540a:	4093      	lsls	r3, r2
  val >>= _shift;
   b540c:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   b540e:	3b01      	subs	r3, #1
  val >>= _shift;
   b5410:	40d0      	lsrs	r0, r2
}
   b5412:	4018      	ands	r0, r3
   b5414:	bd10      	pop	{r4, pc}

000b5416 <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b5416:	b570      	push	{r4, r5, r6, lr}
   b5418:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b541a:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   b541c:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b541e:	f7ff ffcb 	bl	b53b8 <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   b5422:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b5424:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits+1)) - 1;
   b5426:	3301      	adds	r3, #1
   b5428:	2201      	movs	r2, #1
   b542a:	409a      	lsls	r2, r3
   b542c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b542e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;      // remove the current data at that spot
   b5432:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b5436:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   b5438:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b543a:	fa03 f101 	lsl.w	r1, r3, r1
  _register->write(val, _register->width());
   b543e:	4329      	orrs	r1, r5
   b5440:	7982      	ldrb	r2, [r0, #6]
   b5442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   b5446:	f7ff bf8a 	b.w	b535e <_ZN20Adafruit_I2CRegister5writeEmh>

000b544a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b544a:	6042      	str	r2, [r0, #4]
  _begun = false;
   b544c:	2200      	movs	r2, #0
  _addr = addr;
   b544e:	7001      	strb	r1, [r0, #0]
  _begun = false;
   b5450:	7202      	strb	r2, [r0, #8]
}
   b5452:	4770      	bx	lr

000b5454 <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   b5454:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b5456:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b5458:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b545a:	b153      	cbz	r3, b5472 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b545c:	7821      	ldrb	r1, [r4, #0]
   b545e:	6860      	ldr	r0, [r4, #4]
   b5460:	f001 fe8a 	bl	b7178 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   b5464:	6860      	ldr	r0, [r4, #4]
   b5466:	f001 fe92 	bl	b718e <_ZN7TwoWire15endTransmissionEv>
   b546a:	fab0 f080 	clz	r0, r0
   b546e:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   b5470:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b5472:	f000 f803 	bl	b547c <_ZN18Adafruit_I2CDevice5beginEv>
   b5476:	2800      	cmp	r0, #0
   b5478:	d1f0      	bne.n	b545c <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b547a:	e7f9      	b.n	b5470 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b547c <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   b547c:	b510      	push	{r4, lr}
   b547e:	4604      	mov	r4, r0
  _wire->begin();
   b5480:	6840      	ldr	r0, [r0, #4]
   b5482:	f001 fe47 	bl	b7114 <_ZN7TwoWire5beginEv>
  _begun = true;
   b5486:	2301      	movs	r3, #1
   b5488:	7223      	strb	r3, [r4, #8]
  return detected();
   b548a:	4620      	mov	r0, r4
}
   b548c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   b5490:	f7ff bfe0 	b.w	b5454 <_ZN18Adafruit_I2CDevice8detectedEv>

000b5494 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b5494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5498:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b549c:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   b549e:	1993      	adds	r3, r2, r6
   b54a0:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   b54a2:	4604      	mov	r4, r0
   b54a4:	4688      	mov	r8, r1
   b54a6:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   b54a8:	d902      	bls.n	b54b0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b54aa:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   b54ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b54b0:	7801      	ldrb	r1, [r0, #0]
   b54b2:	6840      	ldr	r0, [r0, #4]
   b54b4:	f001 fe60 	bl	b7178 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b54b8:	b97e      	cbnz	r6, b54da <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   b54ba:	6860      	ldr	r0, [r4, #4]
   b54bc:	6803      	ldr	r3, [r0, #0]
   b54be:	462a      	mov	r2, r5
   b54c0:	68db      	ldr	r3, [r3, #12]
   b54c2:	4641      	mov	r1, r8
   b54c4:	4798      	blx	r3
   b54c6:	4285      	cmp	r5, r0
   b54c8:	d1ef      	bne.n	b54aa <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   b54ca:	6860      	ldr	r0, [r4, #4]
   b54cc:	4639      	mov	r1, r7
   b54ce:	f001 fe5a 	bl	b7186 <_ZN7TwoWire15endTransmissionEh>
   b54d2:	fab0 f080 	clz	r0, r0
   b54d6:	0940      	lsrs	r0, r0, #5
   b54d8:	e7e8      	b.n	b54ac <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b54da:	f1b9 0f00 	cmp.w	r9, #0
   b54de:	d0ec      	beq.n	b54ba <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b54e0:	6860      	ldr	r0, [r4, #4]
   b54e2:	6803      	ldr	r3, [r0, #0]
   b54e4:	4632      	mov	r2, r6
   b54e6:	68db      	ldr	r3, [r3, #12]
   b54e8:	4649      	mov	r1, r9
   b54ea:	4798      	blx	r3
   b54ec:	4286      	cmp	r6, r0
   b54ee:	d1dc      	bne.n	b54aa <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   b54f0:	e7e3      	b.n	b54ba <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000b54f2 <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   b54f2:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b54f4:	b570      	push	{r4, r5, r6, lr}
   b54f6:	4606      	mov	r6, r0
   b54f8:	460c      	mov	r4, r1
   b54fa:	4615      	mov	r5, r2
  if (len > 32) {
   b54fc:	d80f      	bhi.n	b551e <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   b54fe:	7801      	ldrb	r1, [r0, #0]
   b5500:	6840      	ldr	r0, [r0, #4]
   b5502:	f001 fe24 	bl	b714e <_ZN7TwoWire11requestFromEhjh>
   b5506:	42a8      	cmp	r0, r5
   b5508:	d109      	bne.n	b551e <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   b550a:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   b550c:	42a5      	cmp	r5, r4
   b550e:	d008      	beq.n	b5522 <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   b5510:	6870      	ldr	r0, [r6, #4]
   b5512:	6803      	ldr	r3, [r0, #0]
   b5514:	695b      	ldr	r3, [r3, #20]
   b5516:	4798      	blx	r3
   b5518:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   b551c:	e7f6      	b.n	b550c <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   b551e:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5520:	bd70      	pop	{r4, r5, r6, pc}
   b5522:	2001      	movs	r0, #1
   b5524:	e7fc      	b.n	b5520 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000b5526 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b5526:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5528:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   b552a:	2300      	movs	r3, #0
   b552c:	e9cd 3300 	strd	r3, r3, [sp]
   b5530:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   b5534:	9e06      	ldr	r6, [sp, #24]
   b5536:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   b5538:	f7ff ffac 	bl	b5494 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   b553c:	b140      	cbz	r0, b5550 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   b553e:	2301      	movs	r3, #1
   b5540:	4632      	mov	r2, r6
   b5542:	4629      	mov	r1, r5
   b5544:	4620      	mov	r0, r4
}
   b5546:	b002      	add	sp, #8
   b5548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b554c:	f7ff bfd1 	b.w	b54f2 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b5550:	b002      	add	sp, #8
   b5552:	bd70      	pop	{r4, r5, r6, pc}

000b5554 <_ZN8LPS28DFW13readRegistersEPvhPht>:
/// @param regAddress Start address to read
/// @param dataBuffer Buffer to store register values
/// @param numBytes Number of bytes to read
/// @return Error code. 0 means success, negative means failure
int32_t LPS28DFW::readRegisters(void* interfacePtr, uint8_t regAddress, uint8_t* dataBuffer, uint16_t numBytes)
{
   b5554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5556:	4604      	mov	r4, r0
   b5558:	460d      	mov	r5, r1
   b555a:	4617      	mov	r7, r2
    // Make sure the number of bytes is valid
    if(numBytes == 0)
   b555c:	461e      	mov	r6, r3
   b555e:	b313      	cbz	r3, b55a6 <_ZN8LPS28DFW13readRegistersEPvhPht+0x52>

    // Get interface data
    LPS28DFW_InterfaceData* interfaceData = (LPS28DFW_InterfaceData*) interfacePtr;

    // Jump to desired register address
    interfaceData->i2cPort->beginTransmission(interfaceData->i2cAddress);
   b5560:	7801      	ldrb	r1, [r0, #0]
   b5562:	6840      	ldr	r0, [r0, #4]
   b5564:	f001 fe08 	bl	b7178 <_ZN7TwoWire17beginTransmissionEh>
    interfaceData->i2cPort->write(regAddress);
   b5568:	6860      	ldr	r0, [r4, #4]
   b556a:	6803      	ldr	r3, [r0, #0]
   b556c:	4629      	mov	r1, r5
   b556e:	689b      	ldr	r3, [r3, #8]
   b5570:	4798      	blx	r3
    if(interfaceData->i2cPort->endTransmission())
   b5572:	6860      	ldr	r0, [r4, #4]
   b5574:	f001 fe0b 	bl	b718e <_ZN7TwoWire15endTransmissionEv>
   b5578:	4605      	mov	r5, r0
   b557a:	b9a0      	cbnz	r0, b55a6 <_ZN8LPS28DFW13readRegistersEPvhPht+0x52>
    {
        return LPS28DFW_E_COM_FAIL;
    }

    // Read bytes from these registers
    interfaceData->i2cPort->requestFrom(interfaceData->i2cAddress, (uint8_t) numBytes);
   b557c:	7821      	ldrb	r1, [r4, #0]
   b557e:	6860      	ldr	r0, [r4, #4]
   b5580:	b2f2      	uxtb	r2, r6
   b5582:	f001 fdf6 	bl	b7172 <_ZN7TwoWire11requestFromEhj>

    // Store all requested bytes
    for(uint32_t i = 0; i < numBytes && interfaceData->i2cPort->available(); i++)
   b5586:	6860      	ldr	r0, [r4, #4]
   b5588:	6803      	ldr	r3, [r0, #0]
   b558a:	691b      	ldr	r3, [r3, #16]
   b558c:	4798      	blx	r3
   b558e:	b908      	cbnz	r0, b5594 <_ZN8LPS28DFW13readRegistersEPvhPht+0x40>
    {
        dataBuffer[i] = interfaceData->i2cPort->read();
    }

    return LPS28DFW_OK;
   b5590:	2000      	movs	r0, #0
}
   b5592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dataBuffer[i] = interfaceData->i2cPort->read();
   b5594:	6860      	ldr	r0, [r4, #4]
   b5596:	6803      	ldr	r3, [r0, #0]
   b5598:	695b      	ldr	r3, [r3, #20]
   b559a:	4798      	blx	r3
   b559c:	5578      	strb	r0, [r7, r5]
    for(uint32_t i = 0; i < numBytes && interfaceData->i2cPort->available(); i++)
   b559e:	3501      	adds	r5, #1
   b55a0:	42ae      	cmp	r6, r5
   b55a2:	d8f0      	bhi.n	b5586 <_ZN8LPS28DFW13readRegistersEPvhPht+0x32>
   b55a4:	e7f4      	b.n	b5590 <_ZN8LPS28DFW13readRegistersEPvhPht+0x3c>
        return LPS28DFW_E_COM_FAIL;
   b55a6:	f06f 0001 	mvn.w	r0, #1
   b55aa:	e7f2      	b.n	b5592 <_ZN8LPS28DFW13readRegistersEPvhPht+0x3e>

000b55ac <_ZN8LPS28DFW7msDelayEm>:

/// @brief Helper function to delay for some amount of time
/// @param period Number of milliseconds to delay
void LPS28DFW::msDelay(uint32_t period)
{
    delay(period);
   b55ac:	f001 b84a 	b.w	b6644 <delay>

000b55b0 <_ZN8LPS28DFW14writeRegistersEPvhPKht>:
{
   b55b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55b2:	4604      	mov	r4, r0
   b55b4:	460d      	mov	r5, r1
   b55b6:	4617      	mov	r7, r2
    if(numBytes == 0)
   b55b8:	461e      	mov	r6, r3
   b55ba:	b1ab      	cbz	r3, b55e8 <_ZN8LPS28DFW14writeRegistersEPvhPKht+0x38>
    interfaceData->i2cPort->beginTransmission(interfaceData->i2cAddress);
   b55bc:	7801      	ldrb	r1, [r0, #0]
   b55be:	6840      	ldr	r0, [r0, #4]
   b55c0:	f001 fdda 	bl	b7178 <_ZN7TwoWire17beginTransmissionEh>
    interfaceData->i2cPort->write(regAddress);
   b55c4:	6860      	ldr	r0, [r4, #4]
   b55c6:	6803      	ldr	r3, [r0, #0]
   b55c8:	4629      	mov	r1, r5
   b55ca:	689b      	ldr	r3, [r3, #8]
   b55cc:	4798      	blx	r3
    for(uint32_t i = 0; i < numBytes; i++)
   b55ce:	2500      	movs	r5, #0
        interfaceData->i2cPort->write(dataBuffer[i]);
   b55d0:	6860      	ldr	r0, [r4, #4]
   b55d2:	5d79      	ldrb	r1, [r7, r5]
   b55d4:	6803      	ldr	r3, [r0, #0]
    for(uint32_t i = 0; i < numBytes; i++)
   b55d6:	3501      	adds	r5, #1
        interfaceData->i2cPort->write(dataBuffer[i]);
   b55d8:	689b      	ldr	r3, [r3, #8]
   b55da:	4798      	blx	r3
    for(uint32_t i = 0; i < numBytes; i++)
   b55dc:	42ae      	cmp	r6, r5
   b55de:	d8f7      	bhi.n	b55d0 <_ZN8LPS28DFW14writeRegistersEPvhPKht+0x20>
    if(interfaceData->i2cPort->endTransmission())
   b55e0:	6860      	ldr	r0, [r4, #4]
   b55e2:	f001 fdd4 	bl	b718e <_ZN7TwoWire15endTransmissionEv>
   b55e6:	b108      	cbz	r0, b55ec <_ZN8LPS28DFW14writeRegistersEPvhPKht+0x3c>
        return LPS28DFW_E_COM_FAIL;
   b55e8:	f06f 0001 	mvn.w	r0, #1
}
   b55ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b55f0 <_ZN8LPS28DFWC1Ev>:
    sensor.read_reg = readRegisters;
   b55f0:	4b09      	ldr	r3, [pc, #36]	; (b5618 <_ZN8LPS28DFWC1Ev+0x28>)
LPS28DFW::LPS28DFW()
   b55f2:	b510      	push	{r4, lr}
    sensor.read_reg = readRegisters;
   b55f4:	6143      	str	r3, [r0, #20]
    sensor.write_reg = writeRegisters;
   b55f6:	4b09      	ldr	r3, [pc, #36]	; (b561c <_ZN8LPS28DFWC1Ev+0x2c>)
   b55f8:	6103      	str	r3, [r0, #16]
    sensor.mdelay = msDelay;
   b55fa:	4b09      	ldr	r3, [pc, #36]	; (b5620 <_ZN8LPS28DFWC1Ev+0x30>)
   b55fc:	6183      	str	r3, [r0, #24]
    interfaceData.i2cAddress = LPS28DFW_I2C_ADDRESS_DEFAULT;
   b55fe:	235c      	movs	r3, #92	; 0x5c
   b5600:	f880 3020 	strb.w	r3, [r0, #32]
LPS28DFW::LPS28DFW()
   b5604:	4604      	mov	r4, r0
    interfaceData.i2cPort = &Wire;
   b5606:	f001 ffa3 	bl	b7550 <_Z19__fetch_global_Wirev>
    sensor.handle = &interfaceData;
   b560a:	f104 0320 	add.w	r3, r4, #32
    interfaceData.i2cPort = &Wire;
   b560e:	6260      	str	r0, [r4, #36]	; 0x24
    sensor.handle = &interfaceData;
   b5610:	61e3      	str	r3, [r4, #28]
}
   b5612:	4620      	mov	r0, r4
   b5614:	bd10      	pop	{r4, pc}
   b5616:	bf00      	nop
   b5618:	000b5555 	.word	0x000b5555
   b561c:	000b55b1 	.word	0x000b55b1
   b5620:	000b55ad 	.word	0x000b55ad

000b5624 <_ZN8LPS28DFW4initEv>:
    return lps28dfw_init_set(&sensor, LPS28DFW_DRV_RDY);
   b5624:	2100      	movs	r1, #0
   b5626:	3010      	adds	r0, #16
   b5628:	f7fe bd5e 	b.w	b40e8 <lps28dfw_init_set>

000b562c <_ZN8LPS28DFW5resetEv>:
{
   b562c:	b513      	push	{r0, r1, r4, lr}
    err = lps28dfw_init_set(&sensor, LPS28DFW_RESET);
   b562e:	f100 0410 	add.w	r4, r0, #16
   b5632:	2102      	movs	r1, #2
   b5634:	4620      	mov	r0, r4
   b5636:	f7fe fd57 	bl	b40e8 <lps28dfw_init_set>
    return lps28dfw_status_get(&sensor, status);
   b563a:	a901      	add	r1, sp, #4
   b563c:	4620      	mov	r0, r4
   b563e:	f7fe fd85 	bl	b414c <lps28dfw_status_get>
        if(err != LPS28DFW_OK)
   b5642:	b918      	cbnz	r0, b564c <_ZN8LPS28DFW5resetEv+0x20>
    } while(status.sw_reset);
   b5644:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5648:	07db      	lsls	r3, r3, #31
   b564a:	d4f6      	bmi.n	b563a <_ZN8LPS28DFW5resetEv+0xe>
}
   b564c:	b002      	add	sp, #8
   b564e:	bd10      	pop	{r4, pc}

000b5650 <_ZN8LPS28DFW5beginEhR7TwoWire>:
{
   b5650:	b513      	push	{r0, r1, r4, lr}
    interfaceData.i2cAddress = address;
   b5652:	f880 1020 	strb.w	r1, [r0, #32]
{
   b5656:	4604      	mov	r4, r0
    interfaceData.i2cPort = &wirePort;
   b5658:	6242      	str	r2, [r0, #36]	; 0x24
    err = lps28dfw_id_get(&sensor, &chipID);
   b565a:	a901      	add	r1, sp, #4
   b565c:	3010      	adds	r0, #16
   b565e:	f7fe fd36 	bl	b40ce <lps28dfw_id_get>
    if(err != LPS28DFW_OK)
   b5662:	b950      	cbnz	r0, b567a <_ZN8LPS28DFW5beginEhR7TwoWire+0x2a>
    if(chipID.whoami != LPS28DFW_ID)
   b5664:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5668:	2bb4      	cmp	r3, #180	; 0xb4
   b566a:	d108      	bne.n	b567e <_ZN8LPS28DFW5beginEhR7TwoWire+0x2e>
    err = reset();
   b566c:	4620      	mov	r0, r4
   b566e:	f7ff ffdd 	bl	b562c <_ZN8LPS28DFW5resetEv>
    if(err != LPS28DFW_OK)
   b5672:	b910      	cbnz	r0, b567a <_ZN8LPS28DFW5beginEhR7TwoWire+0x2a>
    return init();
   b5674:	4620      	mov	r0, r4
   b5676:	f7ff ffd5 	bl	b5624 <_ZN8LPS28DFW4initEv>
}
   b567a:	b002      	add	sp, #8
   b567c:	bd10      	pop	{r4, pc}
        return LPS28DFW_E_NOT_CONNECTED;
   b567e:	f04f 30ff 	mov.w	r0, #4294967295
   b5682:	e7fa      	b.n	b567a <_ZN8LPS28DFW5beginEhR7TwoWire+0x2a>

000b5684 <_ZN8LPS28DFW13getSensorDataEv>:
{
   b5684:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(modeConfig.odr == LPS28DFW_ONE_SHOT)
   b5686:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
   b568a:	4604      	mov	r4, r0
        err = lps28dfw_trigger_sw(&sensor, &modeConfig);
   b568c:	f100 0510 	add.w	r5, r0, #16
    if(modeConfig.odr == LPS28DFW_ONE_SHOT)
   b5690:	b92b      	cbnz	r3, b569e <_ZN8LPS28DFW13getSensorDataEv+0x1a>
        err = lps28dfw_trigger_sw(&sensor, &modeConfig);
   b5692:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5696:	4628      	mov	r0, r5
   b5698:	f7fe fda3 	bl	b41e2 <lps28dfw_trigger_sw>
        if(err != LPS28DFW_OK)
   b569c:	b970      	cbnz	r0, b56bc <_ZN8LPS28DFW13getSensorDataEv+0x38>
    return lps28dfw_status_get(&sensor, status);
   b569e:	a901      	add	r1, sp, #4
   b56a0:	4628      	mov	r0, r5
   b56a2:	f7fe fd53 	bl	b414c <lps28dfw_status_get>
        if(err != LPS28DFW_OK)
   b56a6:	b948      	cbnz	r0, b56bc <_ZN8LPS28DFW13getSensorDataEv+0x38>
    } while(!status.end_meas);
   b56a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b56ac:	065b      	lsls	r3, r3, #25
   b56ae:	d5f6      	bpl.n	b569e <_ZN8LPS28DFW13getSensorDataEv+0x1a>
    return lps28dfw_data_get(&sensor, &modeConfig, &data);
   b56b0:	4622      	mov	r2, r4
   b56b2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   b56b6:	4628      	mov	r0, r5
   b56b8:	f7fe fdae 	bl	b4218 <lps28dfw_data_get>
}
   b56bc:	b003      	add	sp, #12
   b56be:	bd30      	pop	{r4, r5, pc}

000b56c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <netdb_freeaddrinfo+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	689b      	ldr	r3, [r3, #8]
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030268 	.word	0x00030268

000b56d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <netdb_getaddrinfo+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	68db      	ldr	r3, [r3, #12]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	00030268 	.word	0x00030268

000b56e0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <HAL_Validate_Pin_Function+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	685b      	ldr	r3, [r3, #4]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	0003022c 	.word	0x0003022c

000b56f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <HAL_Pin_Mode+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	689b      	ldr	r3, [r3, #8]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003022c 	.word	0x0003022c

000b5700 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <HAL_Get_Pin_Mode+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	68db      	ldr	r3, [r3, #12]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003022c 	.word	0x0003022c

000b5710 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <HAL_GPIO_Write+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	691b      	ldr	r3, [r3, #16]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003022c 	.word	0x0003022c

000b5720 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <HAL_DAC_Write+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003022c 	.word	0x0003022c

000b5730 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <hal_adc_read+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003022c 	.word	0x0003022c

000b5740 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <hal_pwm_write_ext+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	0003022c 	.word	0x0003022c

000b5750 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <HAL_RNG_GetRandomNumber+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	685b      	ldr	r3, [r3, #4]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	00030218 	.word	0x00030218

000b5760 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	695b      	ldr	r3, [r3, #20]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	00030218 	.word	0x00030218

000b5770 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <hal_rtc_time_is_valid+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	00030218 	.word	0x00030218

000b5780 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <hal_rtc_get_time+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	00030218 	.word	0x00030218

000b5790 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <os_mutex_recursive_create+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	00030248 	.word	0x00030248

000b57a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <inet_inet_ntop+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	695b      	ldr	r3, [r3, #20]
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	00030264 	.word	0x00030264

000b57b0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b02      	ldr	r3, [pc, #8]	; (b57bc <hal_usart_write+0xc>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	68db      	ldr	r3, [r3, #12]
   b57b8:	9301      	str	r3, [sp, #4]
   b57ba:	bd08      	pop	{r3, pc}
   b57bc:	0003023c 	.word	0x0003023c

000b57c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b57c0:	b508      	push	{r3, lr}
   b57c2:	4b02      	ldr	r3, [pc, #8]	; (b57cc <hal_usart_available+0xc>)
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	691b      	ldr	r3, [r3, #16]
   b57c8:	9301      	str	r3, [sp, #4]
   b57ca:	bd08      	pop	{r3, pc}
   b57cc:	0003023c 	.word	0x0003023c

000b57d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b57d0:	b508      	push	{r3, lr}
   b57d2:	4b02      	ldr	r3, [pc, #8]	; (b57dc <hal_usart_read+0xc>)
   b57d4:	681b      	ldr	r3, [r3, #0]
   b57d6:	695b      	ldr	r3, [r3, #20]
   b57d8:	9301      	str	r3, [sp, #4]
   b57da:	bd08      	pop	{r3, pc}
   b57dc:	0003023c 	.word	0x0003023c

000b57e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b57e0:	b508      	push	{r3, lr}
   b57e2:	4b02      	ldr	r3, [pc, #8]	; (b57ec <hal_usart_peek+0xc>)
   b57e4:	681b      	ldr	r3, [r3, #0]
   b57e6:	699b      	ldr	r3, [r3, #24]
   b57e8:	9301      	str	r3, [sp, #4]
   b57ea:	bd08      	pop	{r3, pc}
   b57ec:	0003023c 	.word	0x0003023c

000b57f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b57f0:	b508      	push	{r3, lr}
   b57f2:	4b02      	ldr	r3, [pc, #8]	; (b57fc <hal_usart_flush+0xc>)
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	69db      	ldr	r3, [r3, #28]
   b57f8:	9301      	str	r3, [sp, #4]
   b57fa:	bd08      	pop	{r3, pc}
   b57fc:	0003023c 	.word	0x0003023c

000b5800 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b02      	ldr	r3, [pc, #8]	; (b580c <hal_usart_is_enabled+0xc>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	6a1b      	ldr	r3, [r3, #32]
   b5808:	9301      	str	r3, [sp, #4]
   b580a:	bd08      	pop	{r3, pc}
   b580c:	0003023c 	.word	0x0003023c

000b5810 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5810:	b508      	push	{r3, lr}
   b5812:	4b02      	ldr	r3, [pc, #8]	; (b581c <hal_usart_available_data_for_write+0xc>)
   b5814:	681b      	ldr	r3, [r3, #0]
   b5816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5818:	9301      	str	r3, [sp, #4]
   b581a:	bd08      	pop	{r3, pc}
   b581c:	0003023c 	.word	0x0003023c

000b5820 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5820:	b508      	push	{r3, lr}
   b5822:	4b02      	ldr	r3, [pc, #8]	; (b582c <hal_usart_begin_config+0xc>)
   b5824:	681b      	ldr	r3, [r3, #0]
   b5826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5828:	9301      	str	r3, [sp, #4]
   b582a:	bd08      	pop	{r3, pc}
   b582c:	0003023c 	.word	0x0003023c

000b5830 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5830:	b508      	push	{r3, lr}
   b5832:	4b02      	ldr	r3, [pc, #8]	; (b583c <hal_usart_init_ex+0xc>)
   b5834:	681b      	ldr	r3, [r3, #0]
   b5836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5838:	9301      	str	r3, [sp, #4]
   b583a:	bd08      	pop	{r3, pc}
   b583c:	0003023c 	.word	0x0003023c

000b5840 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5840:	b508      	push	{r3, lr}
   b5842:	4b02      	ldr	r3, [pc, #8]	; (b584c <hal_i2c_begin+0xc>)
   b5844:	681b      	ldr	r3, [r3, #0]
   b5846:	68db      	ldr	r3, [r3, #12]
   b5848:	9301      	str	r3, [sp, #4]
   b584a:	bd08      	pop	{r3, pc}
   b584c:	00030228 	.word	0x00030228

000b5850 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5850:	b508      	push	{r3, lr}
   b5852:	4b02      	ldr	r3, [pc, #8]	; (b585c <hal_i2c_begin_transmission+0xc>)
   b5854:	681b      	ldr	r3, [r3, #0]
   b5856:	699b      	ldr	r3, [r3, #24]
   b5858:	9301      	str	r3, [sp, #4]
   b585a:	bd08      	pop	{r3, pc}
   b585c:	00030228 	.word	0x00030228

000b5860 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5860:	b508      	push	{r3, lr}
   b5862:	4b02      	ldr	r3, [pc, #8]	; (b586c <hal_i2c_end_transmission+0xc>)
   b5864:	681b      	ldr	r3, [r3, #0]
   b5866:	69db      	ldr	r3, [r3, #28]
   b5868:	9301      	str	r3, [sp, #4]
   b586a:	bd08      	pop	{r3, pc}
   b586c:	00030228 	.word	0x00030228

000b5870 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5870:	b508      	push	{r3, lr}
   b5872:	4b02      	ldr	r3, [pc, #8]	; (b587c <hal_i2c_write+0xc>)
   b5874:	681b      	ldr	r3, [r3, #0]
   b5876:	6a1b      	ldr	r3, [r3, #32]
   b5878:	9301      	str	r3, [sp, #4]
   b587a:	bd08      	pop	{r3, pc}
   b587c:	00030228 	.word	0x00030228

000b5880 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5880:	b508      	push	{r3, lr}
   b5882:	4b02      	ldr	r3, [pc, #8]	; (b588c <hal_i2c_available+0xc>)
   b5884:	681b      	ldr	r3, [r3, #0]
   b5886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5888:	9301      	str	r3, [sp, #4]
   b588a:	bd08      	pop	{r3, pc}
   b588c:	00030228 	.word	0x00030228

000b5890 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5890:	b508      	push	{r3, lr}
   b5892:	4b02      	ldr	r3, [pc, #8]	; (b589c <hal_i2c_read+0xc>)
   b5894:	681b      	ldr	r3, [r3, #0]
   b5896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5898:	9301      	str	r3, [sp, #4]
   b589a:	bd08      	pop	{r3, pc}
   b589c:	00030228 	.word	0x00030228

000b58a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b58a0:	b508      	push	{r3, lr}
   b58a2:	4b02      	ldr	r3, [pc, #8]	; (b58ac <hal_i2c_peek+0xc>)
   b58a4:	681b      	ldr	r3, [r3, #0]
   b58a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b58a8:	9301      	str	r3, [sp, #4]
   b58aa:	bd08      	pop	{r3, pc}
   b58ac:	00030228 	.word	0x00030228

000b58b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b58b0:	b508      	push	{r3, lr}
   b58b2:	4b02      	ldr	r3, [pc, #8]	; (b58bc <hal_i2c_flush+0xc>)
   b58b4:	681b      	ldr	r3, [r3, #0]
   b58b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58b8:	9301      	str	r3, [sp, #4]
   b58ba:	bd08      	pop	{r3, pc}
   b58bc:	00030228 	.word	0x00030228

000b58c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b58c0:	b508      	push	{r3, lr}
   b58c2:	4b02      	ldr	r3, [pc, #8]	; (b58cc <hal_i2c_is_enabled+0xc>)
   b58c4:	681b      	ldr	r3, [r3, #0]
   b58c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b58c8:	9301      	str	r3, [sp, #4]
   b58ca:	bd08      	pop	{r3, pc}
   b58cc:	00030228 	.word	0x00030228

000b58d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b58d0:	b508      	push	{r3, lr}
   b58d2:	4b02      	ldr	r3, [pc, #8]	; (b58dc <hal_i2c_init+0xc>)
   b58d4:	681b      	ldr	r3, [r3, #0]
   b58d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58d8:	9301      	str	r3, [sp, #4]
   b58da:	bd08      	pop	{r3, pc}
   b58dc:	00030228 	.word	0x00030228

000b58e0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b58e0:	b508      	push	{r3, lr}
   b58e2:	4b02      	ldr	r3, [pc, #8]	; (b58ec <hal_i2c_lock+0xc>)
   b58e4:	681b      	ldr	r3, [r3, #0]
   b58e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b58e8:	9301      	str	r3, [sp, #4]
   b58ea:	bd08      	pop	{r3, pc}
   b58ec:	00030228 	.word	0x00030228

000b58f0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b58f0:	b508      	push	{r3, lr}
   b58f2:	4b02      	ldr	r3, [pc, #8]	; (b58fc <hal_i2c_unlock+0xc>)
   b58f4:	681b      	ldr	r3, [r3, #0]
   b58f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b58f8:	9301      	str	r3, [sp, #4]
   b58fa:	bd08      	pop	{r3, pc}
   b58fc:	00030228 	.word	0x00030228

000b5900 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5900:	b508      	push	{r3, lr}
   b5902:	4b02      	ldr	r3, [pc, #8]	; (b590c <hal_i2c_request_ex+0xc>)
   b5904:	681b      	ldr	r3, [r3, #0]
   b5906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5908:	9301      	str	r3, [sp, #4]
   b590a:	bd08      	pop	{r3, pc}
   b590c:	00030228 	.word	0x00030228

000b5910 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5910:	b508      	push	{r3, lr}
   b5912:	4b02      	ldr	r3, [pc, #8]	; (b591c <hal_spi_init+0xc>)
   b5914:	681b      	ldr	r3, [r3, #0]
   b5916:	69db      	ldr	r3, [r3, #28]
   b5918:	9301      	str	r3, [sp, #4]
   b591a:	bd08      	pop	{r3, pc}
   b591c:	00030230 	.word	0x00030230

000b5920 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5920:	b508      	push	{r3, lr}
   b5922:	4b02      	ldr	r3, [pc, #8]	; (b592c <hal_spi_is_enabled+0xc>)
   b5924:	681b      	ldr	r3, [r3, #0]
   b5926:	6a1b      	ldr	r3, [r3, #32]
   b5928:	9301      	str	r3, [sp, #4]
   b592a:	bd08      	pop	{r3, pc}
   b592c:	00030230 	.word	0x00030230

000b5930 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5930:	b508      	push	{r3, lr}
   b5932:	4b02      	ldr	r3, [pc, #8]	; (b593c <HAL_USB_USART_Init+0xc>)
   b5934:	681b      	ldr	r3, [r3, #0]
   b5936:	681b      	ldr	r3, [r3, #0]
   b5938:	9301      	str	r3, [sp, #4]
   b593a:	bd08      	pop	{r3, pc}
   b593c:	0003024c 	.word	0x0003024c

000b5940 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5940:	b508      	push	{r3, lr}
   b5942:	4b02      	ldr	r3, [pc, #8]	; (b594c <HAL_USB_USART_Begin+0xc>)
   b5944:	681b      	ldr	r3, [r3, #0]
   b5946:	685b      	ldr	r3, [r3, #4]
   b5948:	9301      	str	r3, [sp, #4]
   b594a:	bd08      	pop	{r3, pc}
   b594c:	0003024c 	.word	0x0003024c

000b5950 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5950:	b508      	push	{r3, lr}
   b5952:	4b02      	ldr	r3, [pc, #8]	; (b595c <HAL_USB_USART_Available_Data+0xc>)
   b5954:	681b      	ldr	r3, [r3, #0]
   b5956:	691b      	ldr	r3, [r3, #16]
   b5958:	9301      	str	r3, [sp, #4]
   b595a:	bd08      	pop	{r3, pc}
   b595c:	0003024c 	.word	0x0003024c

000b5960 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5960:	b508      	push	{r3, lr}
   b5962:	4b02      	ldr	r3, [pc, #8]	; (b596c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5964:	681b      	ldr	r3, [r3, #0]
   b5966:	695b      	ldr	r3, [r3, #20]
   b5968:	9301      	str	r3, [sp, #4]
   b596a:	bd08      	pop	{r3, pc}
   b596c:	0003024c 	.word	0x0003024c

000b5970 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5970:	b508      	push	{r3, lr}
   b5972:	4b02      	ldr	r3, [pc, #8]	; (b597c <HAL_USB_USART_Receive_Data+0xc>)
   b5974:	681b      	ldr	r3, [r3, #0]
   b5976:	699b      	ldr	r3, [r3, #24]
   b5978:	9301      	str	r3, [sp, #4]
   b597a:	bd08      	pop	{r3, pc}
   b597c:	0003024c 	.word	0x0003024c

000b5980 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5980:	b508      	push	{r3, lr}
   b5982:	4b02      	ldr	r3, [pc, #8]	; (b598c <HAL_USB_USART_Send_Data+0xc>)
   b5984:	681b      	ldr	r3, [r3, #0]
   b5986:	69db      	ldr	r3, [r3, #28]
   b5988:	9301      	str	r3, [sp, #4]
   b598a:	bd08      	pop	{r3, pc}
   b598c:	0003024c 	.word	0x0003024c

000b5990 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5990:	b508      	push	{r3, lr}
   b5992:	4b02      	ldr	r3, [pc, #8]	; (b599c <HAL_USB_USART_Flush_Data+0xc>)
   b5994:	681b      	ldr	r3, [r3, #0]
   b5996:	6a1b      	ldr	r3, [r3, #32]
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	bd08      	pop	{r3, pc}
   b599c:	0003024c 	.word	0x0003024c

000b59a0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b59a0:	b508      	push	{r3, lr}
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <HAL_USB_USART_Is_Enabled+0xc>)
   b59a4:	681b      	ldr	r3, [r3, #0]
   b59a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b59a8:	9301      	str	r3, [sp, #4]
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	0003024c 	.word	0x0003024c

000b59b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b59b0:	b508      	push	{r3, lr}
   b59b2:	4b02      	ldr	r3, [pc, #8]	; (b59bc <log_message+0xc>)
   b59b4:	681b      	ldr	r3, [r3, #0]
   b59b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b59b8:	9301      	str	r3, [sp, #4]
   b59ba:	bd08      	pop	{r3, pc}
   b59bc:	00030260 	.word	0x00030260

000b59c0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b59c0:	b508      	push	{r3, lr}
   b59c2:	4b02      	ldr	r3, [pc, #8]	; (b59cc <log_message_v+0xc>)
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	bd08      	pop	{r3, pc}
   b59cc:	00030260 	.word	0x00030260

000b59d0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b59d0:	b508      	push	{r3, lr}
   b59d2:	4b02      	ldr	r3, [pc, #8]	; (b59dc <system_mode+0xc>)
   b59d4:	681b      	ldr	r3, [r3, #0]
   b59d6:	681b      	ldr	r3, [r3, #0]
   b59d8:	9301      	str	r3, [sp, #4]
   b59da:	bd08      	pop	{r3, pc}
   b59dc:	00030220 	.word	0x00030220

000b59e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b02      	ldr	r3, [pc, #8]	; (b59ec <set_system_mode+0xc>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	685b      	ldr	r3, [r3, #4]
   b59e8:	9301      	str	r3, [sp, #4]
   b59ea:	bd08      	pop	{r3, pc}
   b59ec:	00030220 	.word	0x00030220

000b59f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b59f0:	b508      	push	{r3, lr}
   b59f2:	4b02      	ldr	r3, [pc, #8]	; (b59fc <system_delay_ms+0xc>)
   b59f4:	681b      	ldr	r3, [r3, #0]
   b59f6:	695b      	ldr	r3, [r3, #20]
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	bd08      	pop	{r3, pc}
   b59fc:	00030220 	.word	0x00030220

000b5a00 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5a00:	b508      	push	{r3, lr}
   b5a02:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <application_thread_current+0xc>)
   b5a04:	681b      	ldr	r3, [r3, #0]
   b5a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5a08:	9301      	str	r3, [sp, #4]
   b5a0a:	bd08      	pop	{r3, pc}
   b5a0c:	00030220 	.word	0x00030220

000b5a10 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5a10:	b508      	push	{r3, lr}
   b5a12:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <application_thread_invoke+0xc>)
   b5a14:	681b      	ldr	r3, [r3, #0]
   b5a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5a18:	9301      	str	r3, [sp, #4]
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	00030220 	.word	0x00030220

000b5a20 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b02      	ldr	r3, [pc, #8]	; (b5a2c <system_thread_get_state+0xc>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	bd08      	pop	{r3, pc}
   b5a2c:	00030220 	.word	0x00030220

000b5a30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b03      	ldr	r3, [pc, #12]	; (b5a40 <system_ctrl_set_app_request_handler+0x10>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5a3a:	9301      	str	r3, [sp, #4]
   b5a3c:	bd08      	pop	{r3, pc}
   b5a3e:	0000      	.short	0x0000
   b5a40:	00030220 	.word	0x00030220

000b5a44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5a44:	b508      	push	{r3, lr}
   b5a46:	4b03      	ldr	r3, [pc, #12]	; (b5a54 <system_ctrl_set_result+0x10>)
   b5a48:	681b      	ldr	r3, [r3, #0]
   b5a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5a4e:	9301      	str	r3, [sp, #4]
   b5a50:	bd08      	pop	{r3, pc}
   b5a52:	0000      	.short	0x0000
   b5a54:	00030220 	.word	0x00030220

000b5a58 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b03      	ldr	r3, [pc, #12]	; (b5a68 <system_power_management_set_config+0x10>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5a62:	9301      	str	r3, [sp, #4]
   b5a64:	bd08      	pop	{r3, pc}
   b5a66:	0000      	.short	0x0000
   b5a68:	00030220 	.word	0x00030220

000b5a6c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b03      	ldr	r3, [pc, #12]	; (b5a7c <system_sleep_ext+0x10>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b5a76:	9301      	str	r3, [sp, #4]
   b5a78:	bd08      	pop	{r3, pc}
   b5a7a:	0000      	.short	0x0000
   b5a7c:	00030220 	.word	0x00030220

000b5a80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <network_connect+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	685b      	ldr	r3, [r3, #4]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	00030240 	.word	0x00030240

000b5a90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <network_connecting+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	689b      	ldr	r3, [r3, #8]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	00030240 	.word	0x00030240

000b5aa0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <network_disconnect+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	68db      	ldr	r3, [r3, #12]
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	00030240 	.word	0x00030240

000b5ab0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <network_ready+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	691b      	ldr	r3, [r3, #16]
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	00030240 	.word	0x00030240

000b5ac0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <network_on+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	695b      	ldr	r3, [r3, #20]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	00030240 	.word	0x00030240

000b5ad0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <network_off+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	699b      	ldr	r3, [r3, #24]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030240 	.word	0x00030240

000b5ae0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <network_listen+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	69db      	ldr	r3, [r3, #28]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030240 	.word	0x00030240

000b5af0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <network_listening+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	6a1b      	ldr	r3, [r3, #32]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030240 	.word	0x00030240

000b5b00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <network_set_listen_timeout+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030240 	.word	0x00030240

000b5b10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <network_get_listen_timeout+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030240 	.word	0x00030240

000b5b20 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <network_is_on+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	00030240 	.word	0x00030240

000b5b30 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <network_is_off+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	00030240 	.word	0x00030240

000b5b40 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <spark_process+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	689b      	ldr	r3, [r3, #8]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	00030244 	.word	0x00030244

000b5b50 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <spark_cloud_flag_connect+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	68db      	ldr	r3, [r3, #12]
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	00030244 	.word	0x00030244

000b5b60 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <spark_cloud_flag_connected+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	695b      	ldr	r3, [r3, #20]
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	00030244 	.word	0x00030244

000b5b70 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <spark_send_event+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	6a1b      	ldr	r3, [r3, #32]
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	00030244 	.word	0x00030244

000b5b80 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <spark_sync_time+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	00030244 	.word	0x00030244

000b5b90 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <spark_sync_time_pending+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	00030244 	.word	0x00030244

000b5ba0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <spark_set_random_seed_from_cloud_handler+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	00030244 	.word	0x00030244

000b5bb0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <malloc+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	681b      	ldr	r3, [r3, #0]
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	0003021c 	.word	0x0003021c

000b5bc0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <free+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	685b      	ldr	r3, [r3, #4]
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	0003021c 	.word	0x0003021c

000b5bd0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <realloc+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	689b      	ldr	r3, [r3, #8]
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	0003021c 	.word	0x0003021c

000b5be0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <siprintf+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	691b      	ldr	r3, [r3, #16]
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	0003021c 	.word	0x0003021c

000b5bf0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <abort+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	0003021c 	.word	0x0003021c

000b5c00 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <_malloc_r+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	0003021c 	.word	0x0003021c

000b5c10 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <__errno+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	0003021c 	.word	0x0003021c

000b5c20 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <__assert_func+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	0003021c 	.word	0x0003021c

000b5c30 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <newlib_impure_ptr_callback+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	0003021c 	.word	0x0003021c

000b5c40 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <localtime_r+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	0003021c 	.word	0x0003021c

000b5c50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5c50:	2200      	movs	r2, #0
   b5c52:	6840      	ldr	r0, [r0, #4]
   b5c54:	4611      	mov	r1, r2
   b5c56:	f7ff bf4b 	b.w	b5af0 <network_listening>

000b5c5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5c5a:	2200      	movs	r2, #0
   b5c5c:	6840      	ldr	r0, [r0, #4]
   b5c5e:	4611      	mov	r1, r2
   b5c60:	f7ff bf56 	b.w	b5b10 <network_get_listen_timeout>

000b5c64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5c64:	6840      	ldr	r0, [r0, #4]
   b5c66:	2200      	movs	r2, #0
   b5c68:	f7ff bf4a 	b.w	b5b00 <network_set_listen_timeout>

000b5c6c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5c6c:	6840      	ldr	r0, [r0, #4]
   b5c6e:	2200      	movs	r2, #0
   b5c70:	f081 0101 	eor.w	r1, r1, #1
   b5c74:	f7ff bf34 	b.w	b5ae0 <network_listen>

000b5c78 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5c78:	2300      	movs	r3, #0
   b5c7a:	6840      	ldr	r0, [r0, #4]
   b5c7c:	461a      	mov	r2, r3
   b5c7e:	4619      	mov	r1, r3
   b5c80:	f7ff bf26 	b.w	b5ad0 <network_off>

000b5c84 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5c84:	2300      	movs	r3, #0
   b5c86:	6840      	ldr	r0, [r0, #4]
   b5c88:	461a      	mov	r2, r3
   b5c8a:	4619      	mov	r1, r3
   b5c8c:	f7ff bf18 	b.w	b5ac0 <network_on>

000b5c90 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5c90:	2200      	movs	r2, #0
   b5c92:	6840      	ldr	r0, [r0, #4]
   b5c94:	4611      	mov	r1, r2
   b5c96:	f7ff bf0b 	b.w	b5ab0 <network_ready>

000b5c9a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5c9a:	2200      	movs	r2, #0
   b5c9c:	6840      	ldr	r0, [r0, #4]
   b5c9e:	4611      	mov	r1, r2
   b5ca0:	f7ff bef6 	b.w	b5a90 <network_connecting>

000b5ca4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ca4:	6840      	ldr	r0, [r0, #4]
   b5ca6:	2200      	movs	r2, #0
   b5ca8:	2102      	movs	r1, #2
   b5caa:	f7ff bef9 	b.w	b5aa0 <network_disconnect>

000b5cae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5cae:	2300      	movs	r3, #0
   b5cb0:	6840      	ldr	r0, [r0, #4]
   b5cb2:	461a      	mov	r2, r3
   b5cb4:	f7ff bee4 	b.w	b5a80 <network_connect>

000b5cb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5cb8:	4b02      	ldr	r3, [pc, #8]	; (b5cc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5cba:	2203      	movs	r2, #3
   b5cbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5cbe:	4a02      	ldr	r2, [pc, #8]	; (b5cc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5cc0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5cc2:	4770      	bx	lr
   b5cc4:	2003e668 	.word	0x2003e668
   b5cc8:	000b9988 	.word	0x000b9988

000b5ccc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5ccc:	b510      	push	{r4, lr}
   b5cce:	4604      	mov	r4, r0
   b5cd0:	4608      	mov	r0, r1
{
    _spi = spi;
   b5cd2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5cd4:	f7ff fe1c 	bl	b5910 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5cd8:	2300      	movs	r3, #0
   b5cda:	6063      	str	r3, [r4, #4]
}
   b5cdc:	4620      	mov	r0, r4
   b5cde:	bd10      	pop	{r4, pc}

000b5ce0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b5ce0:	b510      	push	{r4, lr}
   b5ce2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b5ce4:	6800      	ldr	r0, [r0, #0]
   b5ce6:	b118      	cbz	r0, b5cf0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b5ce8:	f7ff ff6a 	bl	b5bc0 <free>
            wakeupSource_ = nullptr;
   b5cec:	2300      	movs	r3, #0
   b5cee:	6023      	str	r3, [r4, #0]
        }
    }
   b5cf0:	bd10      	pop	{r4, pc}

000b5cf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b5cf2:	b538      	push	{r3, r4, r5, lr}
   b5cf4:	460c      	mov	r4, r1
   b5cf6:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5cf8:	f7ff fff2 	bl	b5ce0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b5cfc:	b154      	cbz	r4, b5d14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b5cfe:	8820      	ldrh	r0, [r4, #0]
   b5d00:	f7ff ff56 	bl	b5bb0 <malloc>
   b5d04:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b5d06:	b128      	cbz	r0, b5d14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b5d08:	8822      	ldrh	r2, [r4, #0]
   b5d0a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b5d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b5d10:	f003 bbf8 	b.w	b9504 <memcpy>
    }
   b5d14:	bd38      	pop	{r3, r4, r5, pc}

000b5d16 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5d16:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b5d18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b5d1c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b5d1e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b5d22:	f8c0 3006 	str.w	r3, [r0, #6]
   b5d26:	894b      	ldrh	r3, [r1, #10]
   b5d28:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5d2a:	460c      	mov	r4, r1
   b5d2c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5d2e:	f7ff ffd7 	bl	b5ce0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b5d32:	6823      	ldr	r3, [r4, #0]
   b5d34:	b113      	cbz	r3, b5d3c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b5d36:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b5d38:	2300      	movs	r3, #0
   b5d3a:	6023      	str	r3, [r4, #0]
    }
   b5d3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5d40 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b5d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d42:	4d2b      	ldr	r5, [pc, #172]	; (b5df0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b5d44:	7d0b      	ldrb	r3, [r1, #20]
   b5d46:	4604      	mov	r4, r0
   b5d48:	b08b      	sub	sp, #44	; 0x2c
   b5d4a:	4608      	mov	r0, r1
   b5d4c:	1daf      	adds	r7, r5, #6
   b5d4e:	2b00      	cmp	r3, #0
   b5d50:	d036      	beq.n	b5dc0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b5d52:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b5d54:	791b      	ldrb	r3, [r3, #4]
   b5d56:	2b00      	cmp	r3, #0
   b5d58:	d032      	beq.n	b5dc0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b5d5a:	4b26      	ldr	r3, [pc, #152]	; (b5df4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b5d5c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b5d5e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b5d60:	a902      	add	r1, sp, #8
   b5d62:	3004      	adds	r0, #4
   b5d64:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b5d68:	f7ff fe80 	bl	b5a6c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b5d6c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b5d70:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b5d74:	b200      	sxth	r0, r0
   b5d76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b5d7a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b5d7e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b5d80:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b5d82:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5d84:	4628      	mov	r0, r5
   b5d86:	f7ff ffb4 	bl	b5cf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b5d8a:	a802      	add	r0, sp, #8
   b5d8c:	f7ff ffa8 	bl	b5ce0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b5d90:	2300      	movs	r3, #0
   b5d92:	6023      	str	r3, [r4, #0]
   b5d94:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b5d96:	71a3      	strb	r3, [r4, #6]
   b5d98:	8123      	strh	r3, [r4, #8]
   b5d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d9e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b5da0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b5da4:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b5da6:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b5daa:	f8c4 3006 	str.w	r3, [r4, #6]
   b5dae:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5db0:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b5db2:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b5db4:	4620      	mov	r0, r4
   b5db6:	f7ff ff9c 	bl	b5cf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b5dba:	4620      	mov	r0, r4
   b5dbc:	b00b      	add	sp, #44	; 0x2c
   b5dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b5dc0:	2600      	movs	r6, #0
   b5dc2:	2320      	movs	r3, #32
   b5dc4:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b5dc8:	4b0b      	ldr	r3, [pc, #44]	; (b5df8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b5dca:	9300      	str	r3, [sp, #0]
   b5dcc:	aa02      	add	r2, sp, #8
   b5dce:	4633      	mov	r3, r6
   b5dd0:	490a      	ldr	r1, [pc, #40]	; (b5dfc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b5dd2:	2032      	movs	r0, #50	; 0x32
   b5dd4:	f7ff fdec 	bl	b59b0 <log_message>
            : wakeupSource_(nullptr),
   b5dd8:	4b06      	ldr	r3, [pc, #24]	; (b5df4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b5dda:	4805      	ldr	r0, [pc, #20]	; (b5df0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b5ddc:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b5dde:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b5de2:	a902      	add	r1, sp, #8
   b5de4:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5de8:	f7ff ff95 	bl	b5d16 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b5dec:	e7cd      	b.n	b5d8a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b5dee:	bf00      	nop
   b5df0:	2003e670 	.word	0x2003e670
   b5df4:	ffff0000 	.word	0xffff0000
   b5df8:	000b99c3 	.word	0x000b99c3
   b5dfc:	000b99bc 	.word	0x000b99bc

000b5e00 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5e00:	4b05      	ldr	r3, [pc, #20]	; (b5e18 <_GLOBAL__sub_I_System+0x18>)
   b5e02:	2202      	movs	r2, #2
   b5e04:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5e06:	4b05      	ldr	r3, [pc, #20]	; (b5e1c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5e08:	4a05      	ldr	r2, [pc, #20]	; (b5e20 <_GLOBAL__sub_I_System+0x20>)
   b5e0a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5e0c:	2000      	movs	r0, #0
   b5e0e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e12:	f7ff bde5 	b.w	b59e0 <set_system_mode>
   b5e16:	bf00      	nop
   b5e18:	2003e67c 	.word	0x2003e67c
   b5e1c:	2003e670 	.word	0x2003e670
   b5e20:	ffff0000 	.word	0xffff0000

000b5e24 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5e24:	b510      	push	{r4, lr}
   b5e26:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5e28:	f003 fbd5 	bl	b95d6 <strlen>
   b5e2c:	3801      	subs	r0, #1
   b5e2e:	1823      	adds	r3, r4, r0
   b5e30:	4620      	mov	r0, r4
	while(i<j){
   b5e32:	4283      	cmp	r3, r0
   b5e34:	d906      	bls.n	b5e44 <_Z11str_reversePc+0x20>
		c = *i;
   b5e36:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5e38:	7819      	ldrb	r1, [r3, #0]
   b5e3a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5e3e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5e42:	e7f6      	b.n	b5e32 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5e44:	bd10      	pop	{r4, pc}

000b5e46 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5e46:	b570      	push	{r4, r5, r6, lr}
   b5e48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5e4a:	1e91      	subs	r1, r2, #2
   b5e4c:	2922      	cmp	r1, #34	; 0x22
   b5e4e:	d81d      	bhi.n	b5e8c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5e50:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5e52:	b930      	cbnz	r0, b5e62 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5e54:	4423      	add	r3, r4
            *ptr++ = '0';
   b5e56:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5e58:	429d      	cmp	r5, r3
   b5e5a:	d210      	bcs.n	b5e7e <ultoa+0x38>
            *ptr++ = '0';
   b5e5c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5e60:	e7fa      	b.n	b5e58 <ultoa+0x12>
            result.quot = a/radix;
   b5e62:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5e66:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5e6a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5e6c:	2809      	cmp	r0, #9
                *ptr += '0';
   b5e6e:	bf94      	ite	ls
   b5e70:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5e72:	3157      	addhi	r1, #87	; 0x57
   b5e74:	b2c9      	uxtb	r1, r1
   b5e76:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5e7a:	4630      	mov	r0, r6
	while(a){
   b5e7c:	e7e9      	b.n	b5e52 <ultoa+0xc>

	*ptr = '\0';
   b5e7e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5e80:	4620      	mov	r0, r4
	*ptr = '\0';
   b5e82:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5e84:	f7ff ffce 	bl	b5e24 <_Z11str_reversePc>
	return buffer;
   b5e88:	4620      	mov	r0, r4
}
   b5e8a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5e8c:	2000      	movs	r0, #0
   b5e8e:	e7fc      	b.n	b5e8a <ultoa+0x44>

000b5e90 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5e90:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5e92:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5e94:	460c      	mov	r4, r1
   b5e96:	4615      	mov	r5, r2
	if(a<0){
   b5e98:	da0e      	bge.n	b5eb8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5e9e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5ea2:	bf14      	ite	ne
   b5ea4:	4258      	negne	r0, r3
   b5ea6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5ea8:	2301      	movs	r3, #1
		*buffer = '-';
   b5eaa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5eac:	462a      	mov	r2, r5
   b5eae:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5eb0:	f7ff ffc9 	bl	b5e46 <ultoa>
	}
	return buffer;
}
   b5eb4:	4620      	mov	r0, r4
   b5eb6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5eb8:	2301      	movs	r3, #1
   b5eba:	e7f9      	b.n	b5eb0 <itoa+0x20>

000b5ebc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b5ebc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ec0:	ec57 6b10 	vmov	r6, r7, d0
   b5ec4:	4680      	mov	r8, r0
   b5ec6:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b5ec8:	ee10 0a10 	vmov	r0, s0
   b5ecc:	2200      	movs	r2, #0
   b5ece:	2300      	movs	r3, #0
   b5ed0:	4639      	mov	r1, r7
   b5ed2:	f003 f841 	bl	b8f58 <__aeabi_dcmplt>
   b5ed6:	b128      	cbz	r0, b5ee4 <_Z4dtoadhPc+0x28>
        val = -val;
   b5ed8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b5edc:	461f      	mov	r7, r3
        *sout++ = '-';
   b5ede:	232d      	movs	r3, #45	; 0x2d
   b5ee0:	f804 3b01 	strb.w	r3, [r4], #1
   b5ee4:	2300      	movs	r3, #0
    }
    long scale = 1;
   b5ee6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b5eea:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b5eec:	b2d9      	uxtb	r1, r3
   b5eee:	4588      	cmp	r8, r1
   b5ef0:	d903      	bls.n	b5efa <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b5ef2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b5ef6:	3301      	adds	r3, #1
   b5ef8:	e7f8      	b.n	b5eec <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b5efa:	4648      	mov	r0, r9
   b5efc:	f002 fd50 	bl	b89a0 <__aeabi_i2d>
   b5f00:	4632      	mov	r2, r6
   b5f02:	463b      	mov	r3, r7
   b5f04:	f002 fdb6 	bl	b8a74 <__aeabi_dmul>
   b5f08:	4606      	mov	r6, r0
   b5f0a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b5f0c:	f003 f946 	bl	b919c <__aeabi_d2ulz>
   b5f10:	468a      	mov	sl, r1
   b5f12:	4605      	mov	r5, r0
   b5f14:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b5f16:	f002 fd77 	bl	b8a08 <__aeabi_ul2d>
   b5f1a:	4602      	mov	r2, r0
   b5f1c:	460b      	mov	r3, r1
   b5f1e:	4630      	mov	r0, r6
   b5f20:	4639      	mov	r1, r7
   b5f22:	f002 fbef 	bl	b8704 <__aeabi_dsub>
   b5f26:	4b14      	ldr	r3, [pc, #80]	; (b5f78 <_Z4dtoadhPc+0xbc>)
   b5f28:	2200      	movs	r2, #0
   b5f2a:	f003 f829 	bl	b8f80 <__aeabi_dcmpge>
   b5f2e:	b110      	cbz	r0, b5f36 <_Z4dtoadhPc+0x7a>
        fixed++;
   b5f30:	3501      	adds	r5, #1
   b5f32:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b5f36:	464a      	mov	r2, r9
   b5f38:	4628      	mov	r0, r5
   b5f3a:	17d3      	asrs	r3, r2, #31
   b5f3c:	4659      	mov	r1, fp
   b5f3e:	f003 f8e1 	bl	b9104 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b5f42:	2301      	movs	r3, #1
   b5f44:	4615      	mov	r5, r2
   b5f46:	4621      	mov	r1, r4
   b5f48:	220a      	movs	r2, #10
   b5f4a:	f7ff ff7c 	bl	b5e46 <ultoa>
    if (prec) {
   b5f4e:	f1b8 0f00 	cmp.w	r8, #0
   b5f52:	d00e      	beq.n	b5f72 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b5f54:	4620      	mov	r0, r4
   b5f56:	f003 fb3e 	bl	b95d6 <strlen>
        *sout++ = '.';
   b5f5a:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b5f5c:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b5f5e:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b5f60:	220a      	movs	r2, #10
   b5f62:	4643      	mov	r3, r8
   b5f64:	3101      	adds	r1, #1
   b5f66:	4628      	mov	r0, r5
    }
}
   b5f68:	b001      	add	sp, #4
   b5f6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b5f6e:	f7ff bf6a 	b.w	b5e46 <ultoa>
}
   b5f72:	b001      	add	sp, #4
   b5f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f78:	3fe00000 	.word	0x3fe00000

000b5f7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5f7c:	b510      	push	{r4, lr}
   b5f7e:	4604      	mov	r4, r0
{
	free(buffer);
   b5f80:	6800      	ldr	r0, [r0, #0]
   b5f82:	f7ff fe1d 	bl	b5bc0 <free>
}
   b5f86:	4620      	mov	r0, r4
   b5f88:	bd10      	pop	{r4, pc}

000b5f8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5f8a:	b510      	push	{r4, lr}
   b5f8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5f8e:	6800      	ldr	r0, [r0, #0]
   b5f90:	b108      	cbz	r0, b5f96 <_ZN6String10invalidateEv+0xc>
   b5f92:	f7ff fe15 	bl	b5bc0 <free>
	buffer = NULL;
   b5f96:	2300      	movs	r3, #0
	capacity = len = 0;
   b5f98:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5f9c:	6023      	str	r3, [r4, #0]
}
   b5f9e:	bd10      	pop	{r4, pc}

000b5fa0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5fa0:	b538      	push	{r3, r4, r5, lr}
   b5fa2:	4604      	mov	r4, r0
   b5fa4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5fa6:	6800      	ldr	r0, [r0, #0]
   b5fa8:	3101      	adds	r1, #1
   b5faa:	f7ff fe11 	bl	b5bd0 <realloc>
	if (newbuffer) {
   b5fae:	b110      	cbz	r0, b5fb6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5fb0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5fb4:	2001      	movs	r0, #1
	}
	return 0;
}
   b5fb6:	bd38      	pop	{r3, r4, r5, pc}

000b5fb8 <_ZN6String7reserveEj>:
{
   b5fb8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5fba:	6803      	ldr	r3, [r0, #0]
{
   b5fbc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5fbe:	b123      	cbz	r3, b5fca <_ZN6String7reserveEj+0x12>
   b5fc0:	6843      	ldr	r3, [r0, #4]
   b5fc2:	428b      	cmp	r3, r1
   b5fc4:	d301      	bcc.n	b5fca <_ZN6String7reserveEj+0x12>
   b5fc6:	2001      	movs	r0, #1
}
   b5fc8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5fca:	4620      	mov	r0, r4
   b5fcc:	f7ff ffe8 	bl	b5fa0 <_ZN6String12changeBufferEj>
   b5fd0:	2800      	cmp	r0, #0
   b5fd2:	d0f9      	beq.n	b5fc8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5fd4:	68a3      	ldr	r3, [r4, #8]
   b5fd6:	2b00      	cmp	r3, #0
   b5fd8:	d1f5      	bne.n	b5fc6 <_ZN6String7reserveEj+0xe>
   b5fda:	6822      	ldr	r2, [r4, #0]
   b5fdc:	7013      	strb	r3, [r2, #0]
   b5fde:	e7f2      	b.n	b5fc6 <_ZN6String7reserveEj+0xe>

000b5fe0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5fe2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5fe4:	4611      	mov	r1, r2
   b5fe6:	9201      	str	r2, [sp, #4]
{
   b5fe8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5fea:	f7ff ffe5 	bl	b5fb8 <_ZN6String7reserveEj>
   b5fee:	9a01      	ldr	r2, [sp, #4]
   b5ff0:	b928      	cbnz	r0, b5ffe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	f7ff ffc9 	bl	b5f8a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5ff8:	4620      	mov	r0, r4
   b5ffa:	b003      	add	sp, #12
   b5ffc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5ffe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6000:	4629      	mov	r1, r5
   b6002:	6820      	ldr	r0, [r4, #0]
   b6004:	f003 fa7e 	bl	b9504 <memcpy>
	buffer[len] = 0;
   b6008:	6822      	ldr	r2, [r4, #0]
   b600a:	68a3      	ldr	r3, [r4, #8]
   b600c:	2100      	movs	r1, #0
   b600e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6010:	e7f2      	b.n	b5ff8 <_ZN6String4copyEPKcj+0x18>

000b6012 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6012:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6014:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6016:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b601a:	4604      	mov	r4, r0
	len = 0;
   b601c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b601e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6020:	b141      	cbz	r1, b6034 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6022:	4608      	mov	r0, r1
   b6024:	9101      	str	r1, [sp, #4]
   b6026:	f003 fad6 	bl	b95d6 <strlen>
   b602a:	9901      	ldr	r1, [sp, #4]
   b602c:	4602      	mov	r2, r0
   b602e:	4620      	mov	r0, r4
   b6030:	f7ff ffd6 	bl	b5fe0 <_ZN6String4copyEPKcj>
}
   b6034:	4620      	mov	r0, r4
   b6036:	b002      	add	sp, #8
   b6038:	bd10      	pop	{r4, pc}

000b603a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b603a:	b538      	push	{r3, r4, r5, lr}
   b603c:	4605      	mov	r5, r0
	if (buffer) {
   b603e:	6800      	ldr	r0, [r0, #0]
{
   b6040:	460c      	mov	r4, r1
	if (buffer) {
   b6042:	b168      	cbz	r0, b6060 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6044:	686a      	ldr	r2, [r5, #4]
   b6046:	688b      	ldr	r3, [r1, #8]
   b6048:	429a      	cmp	r2, r3
   b604a:	d307      	bcc.n	b605c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b604c:	6809      	ldr	r1, [r1, #0]
   b604e:	f003 fa9d 	bl	b958c <strcpy>
			len = rhs.len;
   b6052:	68a3      	ldr	r3, [r4, #8]
   b6054:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6056:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6058:	60a3      	str	r3, [r4, #8]
}
   b605a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b605c:	f7ff fdb0 	bl	b5bc0 <free>
	buffer = rhs.buffer;
   b6060:	6823      	ldr	r3, [r4, #0]
   b6062:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6064:	6863      	ldr	r3, [r4, #4]
   b6066:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6068:	68a3      	ldr	r3, [r4, #8]
   b606a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b606c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b606e:	e9c4 3300 	strd	r3, r3, [r4]
   b6072:	e7f1      	b.n	b6058 <_ZN6String4moveERS_+0x1e>

000b6074 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6074:	4288      	cmp	r0, r1
{
   b6076:	b510      	push	{r4, lr}
   b6078:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b607a:	d005      	beq.n	b6088 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b607c:	680b      	ldr	r3, [r1, #0]
   b607e:	b12b      	cbz	r3, b608c <_ZN6StringaSERKS_+0x18>
   b6080:	688a      	ldr	r2, [r1, #8]
   b6082:	4619      	mov	r1, r3
   b6084:	f7ff ffac 	bl	b5fe0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6088:	4620      	mov	r0, r4
   b608a:	bd10      	pop	{r4, pc}
	else invalidate();
   b608c:	f7ff ff7d 	bl	b5f8a <_ZN6String10invalidateEv>
   b6090:	e7fa      	b.n	b6088 <_ZN6StringaSERKS_+0x14>

000b6092 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6092:	b510      	push	{r4, lr}
	buffer = NULL;
   b6094:	2300      	movs	r3, #0
String::String(const String &value)
   b6096:	4604      	mov	r4, r0
	capacity = 0;
   b6098:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b609c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b609e:	7303      	strb	r3, [r0, #12]
	*this = value;
   b60a0:	f7ff ffe8 	bl	b6074 <_ZN6StringaSERKS_>
}
   b60a4:	4620      	mov	r0, r4
   b60a6:	bd10      	pop	{r4, pc}

000b60a8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b60a8:	4288      	cmp	r0, r1
{
   b60aa:	b510      	push	{r4, lr}
   b60ac:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b60ae:	d001      	beq.n	b60b4 <_ZN6StringaSEOS_+0xc>
   b60b0:	f7ff ffc3 	bl	b603a <_ZN6String4moveERS_>
	return *this;
}
   b60b4:	4620      	mov	r0, r4
   b60b6:	bd10      	pop	{r4, pc}

000b60b8 <_ZN6StringaSEO15StringSumHelper>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   b60b8:	4288      	cmp	r0, r1
{
   b60ba:	b510      	push	{r4, lr}
   b60bc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b60be:	d001      	beq.n	b60c4 <_ZN6StringaSEO15StringSumHelper+0xc>
   b60c0:	f7ff ffbb 	bl	b603a <_ZN6String4moveERS_>
	return *this;
}
   b60c4:	4620      	mov	r0, r4
   b60c6:	bd10      	pop	{r4, pc}

000b60c8 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   b60c8:	b513      	push	{r0, r1, r4, lr}
   b60ca:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b60cc:	b159      	cbz	r1, b60e6 <_ZN6StringaSEPKc+0x1e>
   b60ce:	4608      	mov	r0, r1
   b60d0:	9101      	str	r1, [sp, #4]
   b60d2:	f003 fa80 	bl	b95d6 <strlen>
   b60d6:	9901      	ldr	r1, [sp, #4]
   b60d8:	4602      	mov	r2, r0
   b60da:	4620      	mov	r0, r4
   b60dc:	f7ff ff80 	bl	b5fe0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b60e0:	4620      	mov	r0, r4
   b60e2:	b002      	add	sp, #8
   b60e4:	bd10      	pop	{r4, pc}
	else invalidate();
   b60e6:	f7ff ff50 	bl	b5f8a <_ZN6String10invalidateEv>
   b60ea:	e7f9      	b.n	b60e0 <_ZN6StringaSEPKc+0x18>

000b60ec <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b60ec:	b510      	push	{r4, lr}
   b60ee:	4604      	mov	r4, r0
   b60f0:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b60f2:	2300      	movs	r3, #0
	capacity = 0;
   b60f4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b60f8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b60fa:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b60fc:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b60fe:	a901      	add	r1, sp, #4
   b6100:	f7ff fec6 	bl	b5e90 <itoa>
	*this = buf;
   b6104:	a901      	add	r1, sp, #4
   b6106:	4620      	mov	r0, r4
   b6108:	f7ff ffde 	bl	b60c8 <_ZN6StringaSEPKc>
}
   b610c:	4620      	mov	r0, r4
   b610e:	b00a      	add	sp, #40	; 0x28
   b6110:	bd10      	pop	{r4, pc}

000b6112 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b6112:	b530      	push	{r4, r5, lr}
   b6114:	4604      	mov	r4, r0
	buffer = NULL;
   b6116:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b6118:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b611a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b611e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6120:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b6122:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b6126:	b2cd      	uxtb	r5, r1
   b6128:	f002 fc4c 	bl	b89c4 <__aeabi_f2d>
   b612c:	ec41 0b10 	vmov	d0, r0, r1
   b6130:	a901      	add	r1, sp, #4
   b6132:	4628      	mov	r0, r5
   b6134:	f7ff fec2 	bl	b5ebc <_Z4dtoadhPc>
        *this = buf;
   b6138:	a901      	add	r1, sp, #4
   b613a:	4620      	mov	r0, r4
   b613c:	f7ff ffc4 	bl	b60c8 <_ZN6StringaSEPKc>
}
   b6140:	4620      	mov	r0, r4
   b6142:	b00b      	add	sp, #44	; 0x2c
   b6144:	bd30      	pop	{r4, r5, pc}

000b6146 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6146:	b570      	push	{r4, r5, r6, lr}
   b6148:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b614a:	460e      	mov	r6, r1
   b614c:	b909      	cbnz	r1, b6152 <_ZN6String6concatEPKcj+0xc>
   b614e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6150:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6152:	b16a      	cbz	r2, b6170 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6154:	6884      	ldr	r4, [r0, #8]
   b6156:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6158:	4621      	mov	r1, r4
   b615a:	f7ff ff2d 	bl	b5fb8 <_ZN6String7reserveEj>
   b615e:	2800      	cmp	r0, #0
   b6160:	d0f5      	beq.n	b614e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6162:	6828      	ldr	r0, [r5, #0]
   b6164:	68ab      	ldr	r3, [r5, #8]
   b6166:	4631      	mov	r1, r6
   b6168:	4418      	add	r0, r3
   b616a:	f003 fa0f 	bl	b958c <strcpy>
	len = newlen;
   b616e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6170:	2001      	movs	r0, #1
   b6172:	e7ed      	b.n	b6150 <_ZN6String6concatEPKcj+0xa>

000b6174 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6174:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6176:	688a      	ldr	r2, [r1, #8]
   b6178:	6809      	ldr	r1, [r1, #0]
{
   b617a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b617c:	f7ff ffe3 	bl	b6146 <_ZN6String6concatEPKcj>
   b6180:	b910      	cbnz	r0, b6188 <_ZplRK15StringSumHelperRK6String+0x14>
   b6182:	4620      	mov	r0, r4
   b6184:	f7ff ff01 	bl	b5f8a <_ZN6String10invalidateEv>
	return a;
}
   b6188:	4620      	mov	r0, r4
   b618a:	bd10      	pop	{r4, pc}

000b618c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b618c:	b513      	push	{r0, r1, r4, lr}
   b618e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6190:	b929      	cbnz	r1, b619e <_ZplRK15StringSumHelperPKc+0x12>
   b6192:	4620      	mov	r0, r4
   b6194:	f7ff fef9 	bl	b5f8a <_ZN6String10invalidateEv>
	return a;
}
   b6198:	4620      	mov	r0, r4
   b619a:	b002      	add	sp, #8
   b619c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b619e:	4608      	mov	r0, r1
   b61a0:	9101      	str	r1, [sp, #4]
   b61a2:	f003 fa18 	bl	b95d6 <strlen>
   b61a6:	9901      	ldr	r1, [sp, #4]
   b61a8:	4602      	mov	r2, r0
   b61aa:	4620      	mov	r0, r4
   b61ac:	f7ff ffcb 	bl	b6146 <_ZN6String6concatEPKcj>
   b61b0:	2800      	cmp	r0, #0
   b61b2:	d0ee      	beq.n	b6192 <_ZplRK15StringSumHelperPKc+0x6>
   b61b4:	e7f0      	b.n	b6198 <_ZplRK15StringSumHelperPKc+0xc>

000b61b6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b61b6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b61b8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b61ba:	4604      	mov	r4, r0
      if (_M_manager)
   b61bc:	b113      	cbz	r3, b61c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b61be:	2203      	movs	r2, #3
   b61c0:	4601      	mov	r1, r0
   b61c2:	4798      	blx	r3
    }
   b61c4:	4620      	mov	r0, r4
   b61c6:	bd10      	pop	{r4, pc}

000b61c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b61c8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b61ca:	6843      	ldr	r3, [r0, #4]
   b61cc:	3b01      	subs	r3, #1
    {
   b61ce:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b61d0:	6043      	str	r3, [r0, #4]
   b61d2:	b963      	cbnz	r3, b61ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b61d4:	6803      	ldr	r3, [r0, #0]
   b61d6:	689b      	ldr	r3, [r3, #8]
   b61d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b61da:	68a3      	ldr	r3, [r4, #8]
   b61dc:	3b01      	subs	r3, #1
   b61de:	60a3      	str	r3, [r4, #8]
   b61e0:	b92b      	cbnz	r3, b61ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b61e2:	6823      	ldr	r3, [r4, #0]
   b61e4:	4620      	mov	r0, r4
   b61e6:	68db      	ldr	r3, [r3, #12]
    }
   b61e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b61ec:	4718      	bx	r3
    }
   b61ee:	bd10      	pop	{r4, pc}

000b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b61f0:	b510      	push	{r4, lr}
   b61f2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b61f4:	6800      	ldr	r0, [r0, #0]
   b61f6:	b108      	cbz	r0, b61fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b61f8:	f7ff ffe6 	bl	b61c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b61fc:	4620      	mov	r0, r4
   b61fe:	bd10      	pop	{r4, pc}

000b6200 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6200:	b513      	push	{r0, r1, r4, lr}
   b6202:	460b      	mov	r3, r1
   b6204:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6206:	e9d0 0100 	ldrd	r0, r1, [r0]
   b620a:	466c      	mov	r4, sp
   b620c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6210:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6214:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6218:	e894 0003 	ldmia.w	r4, {r0, r1}
   b621c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6220:	b002      	add	sp, #8
   b6222:	bd10      	pop	{r4, pc}

000b6224 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6224:	4802      	ldr	r0, [pc, #8]	; (b6230 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6226:	2300      	movs	r3, #0
   b6228:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b622a:	f7ff bab1 	b.w	b5790 <os_mutex_recursive_create>
   b622e:	bf00      	nop
   b6230:	2003e680 	.word	0x2003e680

000b6234 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6236:	4606      	mov	r6, r0
   b6238:	460d      	mov	r5, r1
  size_t n = 0;
   b623a:	188f      	adds	r7, r1, r2
   b623c:	2400      	movs	r4, #0
  while (size--) {
   b623e:	42bd      	cmp	r5, r7
   b6240:	d00c      	beq.n	b625c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6242:	6833      	ldr	r3, [r6, #0]
   b6244:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6248:	689b      	ldr	r3, [r3, #8]
   b624a:	4630      	mov	r0, r6
   b624c:	4798      	blx	r3
     if (chunk>=0)
   b624e:	1e03      	subs	r3, r0, #0
   b6250:	db01      	blt.n	b6256 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6252:	441c      	add	r4, r3
  while (size--) {
   b6254:	e7f3      	b.n	b623e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6256:	2c00      	cmp	r4, #0
   b6258:	bf08      	it	eq
   b625a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b625c:	4620      	mov	r0, r4
   b625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6260 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6260:	b513      	push	{r0, r1, r4, lr}
   b6262:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6264:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6266:	b159      	cbz	r1, b6280 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6268:	9101      	str	r1, [sp, #4]
   b626a:	f003 f9b4 	bl	b95d6 <strlen>
   b626e:	6823      	ldr	r3, [r4, #0]
   b6270:	9901      	ldr	r1, [sp, #4]
   b6272:	68db      	ldr	r3, [r3, #12]
   b6274:	4602      	mov	r2, r0
   b6276:	4620      	mov	r0, r4
    }
   b6278:	b002      	add	sp, #8
   b627a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b627e:	4718      	bx	r3
    }
   b6280:	b002      	add	sp, #8
   b6282:	bd10      	pop	{r4, pc}

000b6284 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6284:	b508      	push	{r3, lr}
  return write(str);
   b6286:	f7ff ffeb 	bl	b6260 <_ZN5Print5writeEPKc>
}
   b628a:	bd08      	pop	{r3, pc}

000b628c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b628c:	6803      	ldr	r3, [r0, #0]
   b628e:	689b      	ldr	r3, [r3, #8]
   b6290:	4718      	bx	r3

000b6292 <_ZN5Print5printEPK19__FlashStringHelper>:
   b6292:	b508      	push	{r3, lr}
   b6294:	f7ff ffe4 	bl	b6260 <_ZN5Print5writeEPKc>
   b6298:	bd08      	pop	{r3, pc}

000b629a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b629a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b629c:	210d      	movs	r1, #13
{
   b629e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b62a0:	f7ff fff4 	bl	b628c <_ZN5Print5printEc>
  n += print('\n');
   b62a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b62a6:	4604      	mov	r4, r0
  n += print('\n');
   b62a8:	4628      	mov	r0, r5
   b62aa:	f7ff ffef 	bl	b628c <_ZN5Print5printEc>
  return n;
}
   b62ae:	4420      	add	r0, r4
   b62b0:	bd38      	pop	{r3, r4, r5, pc}

000b62b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b62b2:	b538      	push	{r3, r4, r5, lr}
   b62b4:	4605      	mov	r5, r0
  return write(str);
   b62b6:	f7ff ffd3 	bl	b6260 <_ZN5Print5writeEPKc>
   b62ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b62bc:	4628      	mov	r0, r5
   b62be:	f7ff ffec 	bl	b629a <_ZN5Print7printlnEv>
  return n;
}
   b62c2:	4420      	add	r0, r4
   b62c4:	bd38      	pop	{r3, r4, r5, pc}

000b62c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b62c6:	b530      	push	{r4, r5, lr}
   b62c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b62ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b62cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b62ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b62d2:	bf98      	it	ls
   b62d4:	220a      	movls	r2, #10
   b62d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b62d8:	460d      	mov	r5, r1
   b62da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b62de:	fb01 5312 	mls	r3, r1, r2, r5
   b62e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b62e6:	2b09      	cmp	r3, #9
   b62e8:	bf94      	ite	ls
   b62ea:	3330      	addls	r3, #48	; 0x30
   b62ec:	3337      	addhi	r3, #55	; 0x37
   b62ee:	b2db      	uxtb	r3, r3
  } while(n);
   b62f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b62f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b62f6:	d9ef      	bls.n	b62d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b62f8:	4621      	mov	r1, r4
   b62fa:	f7ff ffb1 	bl	b6260 <_ZN5Print5writeEPKc>
}
   b62fe:	b00b      	add	sp, #44	; 0x2c
   b6300:	bd30      	pop	{r4, r5, pc}
	...

000b6304 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6308:	ec55 4b10 	vmov	r4, r5, d0
   b630c:	4606      	mov	r6, r0
   b630e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6310:	ee10 2a10 	vmov	r2, s0
   b6314:	ee10 0a10 	vmov	r0, s0
   b6318:	462b      	mov	r3, r5
   b631a:	4629      	mov	r1, r5
   b631c:	f002 fe44 	bl	b8fa8 <__aeabi_dcmpun>
   b6320:	b140      	cbz	r0, b6334 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6322:	4953      	ldr	r1, [pc, #332]	; (b6470 <_ZN5Print10printFloatEdh+0x16c>)
   b6324:	4630      	mov	r0, r6
   b6326:	f7ff ff9b 	bl	b6260 <_ZN5Print5writeEPKc>
   b632a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b632c:	4650      	mov	r0, sl
   b632e:	b003      	add	sp, #12
   b6330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6334:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6338:	4b4e      	ldr	r3, [pc, #312]	; (b6474 <_ZN5Print10printFloatEdh+0x170>)
   b633a:	f04f 32ff 	mov.w	r2, #4294967295
   b633e:	4620      	mov	r0, r4
   b6340:	4649      	mov	r1, r9
   b6342:	f002 fe31 	bl	b8fa8 <__aeabi_dcmpun>
   b6346:	b948      	cbnz	r0, b635c <_ZN5Print10printFloatEdh+0x58>
   b6348:	4b4a      	ldr	r3, [pc, #296]	; (b6474 <_ZN5Print10printFloatEdh+0x170>)
   b634a:	f04f 32ff 	mov.w	r2, #4294967295
   b634e:	4620      	mov	r0, r4
   b6350:	4649      	mov	r1, r9
   b6352:	f002 fe0b 	bl	b8f6c <__aeabi_dcmple>
   b6356:	b908      	cbnz	r0, b635c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6358:	4947      	ldr	r1, [pc, #284]	; (b6478 <_ZN5Print10printFloatEdh+0x174>)
   b635a:	e7e3      	b.n	b6324 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b635c:	4b47      	ldr	r3, [pc, #284]	; (b647c <_ZN5Print10printFloatEdh+0x178>)
   b635e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6362:	4620      	mov	r0, r4
   b6364:	4629      	mov	r1, r5
   b6366:	f002 fe15 	bl	b8f94 <__aeabi_dcmpgt>
   b636a:	b108      	cbz	r0, b6370 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b636c:	4944      	ldr	r1, [pc, #272]	; (b6480 <_ZN5Print10printFloatEdh+0x17c>)
   b636e:	e7d9      	b.n	b6324 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6370:	4b44      	ldr	r3, [pc, #272]	; (b6484 <_ZN5Print10printFloatEdh+0x180>)
   b6372:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6376:	4620      	mov	r0, r4
   b6378:	4629      	mov	r1, r5
   b637a:	f002 fded 	bl	b8f58 <__aeabi_dcmplt>
   b637e:	2800      	cmp	r0, #0
   b6380:	d1f4      	bne.n	b636c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6382:	2200      	movs	r2, #0
   b6384:	2300      	movs	r3, #0
   b6386:	4620      	mov	r0, r4
   b6388:	4629      	mov	r1, r5
   b638a:	f002 fde5 	bl	b8f58 <__aeabi_dcmplt>
   b638e:	b1d0      	cbz	r0, b63c6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6390:	212d      	movs	r1, #45	; 0x2d
   b6392:	4630      	mov	r0, r6
   b6394:	f7ff ff7a 	bl	b628c <_ZN5Print5printEc>
     number = -number;
   b6398:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b639c:	4682      	mov	sl, r0
     number = -number;
   b639e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b63a0:	4939      	ldr	r1, [pc, #228]	; (b6488 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b63a2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6490 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b63a6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b63aa:	2000      	movs	r0, #0
    rounding /= 10.0;
   b63ac:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b63b0:	fa5f f38b 	uxtb.w	r3, fp
   b63b4:	429f      	cmp	r7, r3
   b63b6:	d908      	bls.n	b63ca <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b63b8:	4642      	mov	r2, r8
   b63ba:	464b      	mov	r3, r9
   b63bc:	f002 fc84 	bl	b8cc8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b63c0:	f10b 0b01 	add.w	fp, fp, #1
   b63c4:	e7f4      	b.n	b63b0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b63c6:	4682      	mov	sl, r0
   b63c8:	e7ea      	b.n	b63a0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b63ca:	4622      	mov	r2, r4
   b63cc:	462b      	mov	r3, r5
   b63ce:	f002 f99b 	bl	b8708 <__adddf3>
   b63d2:	460d      	mov	r5, r1
   b63d4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b63d6:	f002 fe25 	bl	b9024 <__aeabi_d2uiz>
   b63da:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b63dc:	f002 fad0 	bl	b8980 <__aeabi_ui2d>
   b63e0:	4602      	mov	r2, r0
   b63e2:	460b      	mov	r3, r1
   b63e4:	4620      	mov	r0, r4
   b63e6:	4629      	mov	r1, r5
   b63e8:	f002 f98c 	bl	b8704 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b63ec:	220a      	movs	r2, #10
   b63ee:	4604      	mov	r4, r0
   b63f0:	460d      	mov	r5, r1
   b63f2:	4630      	mov	r0, r6
   b63f4:	4641      	mov	r1, r8
   b63f6:	f7ff ff66 	bl	b62c6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b63fa:	4482      	add	sl, r0
  if (digits > 0) {
   b63fc:	2f00      	cmp	r7, #0
   b63fe:	d095      	beq.n	b632c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6400:	4922      	ldr	r1, [pc, #136]	; (b648c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6402:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6490 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6406:	4630      	mov	r0, r6
   b6408:	f7ff ff2a 	bl	b6260 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b640c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6410:	4482      	add	sl, r0
  while (digits-- > 0)
   b6412:	2f00      	cmp	r7, #0
   b6414:	d08a      	beq.n	b632c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6416:	4642      	mov	r2, r8
   b6418:	464b      	mov	r3, r9
   b641a:	4620      	mov	r0, r4
   b641c:	4629      	mov	r1, r5
   b641e:	f002 fb29 	bl	b8a74 <__aeabi_dmul>
   b6422:	4604      	mov	r4, r0
   b6424:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6426:	f002 fdd5 	bl	b8fd4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b642a:	f1b0 0b00 	subs.w	fp, r0, #0
   b642e:	da1c      	bge.n	b646a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6430:	212d      	movs	r1, #45	; 0x2d
   b6432:	4630      	mov	r0, r6
   b6434:	f7ff ff2a 	bl	b628c <_ZN5Print5printEc>
            val = -n;
   b6438:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b643c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b643e:	220a      	movs	r2, #10
   b6440:	4630      	mov	r0, r6
   b6442:	9301      	str	r3, [sp, #4]
   b6444:	f7ff ff3f 	bl	b62c6 <_ZN5Print11printNumberEmh>
   b6448:	9b01      	ldr	r3, [sp, #4]
   b644a:	4418      	add	r0, r3
    n += print(toPrint);
   b644c:	4482      	add	sl, r0
    remainder -= toPrint;
   b644e:	4658      	mov	r0, fp
   b6450:	f002 faa6 	bl	b89a0 <__aeabi_i2d>
   b6454:	4602      	mov	r2, r0
   b6456:	460b      	mov	r3, r1
   b6458:	4620      	mov	r0, r4
   b645a:	4629      	mov	r1, r5
   b645c:	f002 f952 	bl	b8704 <__aeabi_dsub>
   b6460:	3f01      	subs	r7, #1
   b6462:	4604      	mov	r4, r0
   b6464:	460d      	mov	r5, r1
   b6466:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6468:	e7d3      	b.n	b6412 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b646a:	4659      	mov	r1, fp
        size_t t = 0;
   b646c:	2300      	movs	r3, #0
   b646e:	e7e6      	b.n	b643e <_ZN5Print10printFloatEdh+0x13a>
   b6470:	000b99ea 	.word	0x000b99ea
   b6474:	7fefffff 	.word	0x7fefffff
   b6478:	000b99ee 	.word	0x000b99ee
   b647c:	41efffff 	.word	0x41efffff
   b6480:	000b99f2 	.word	0x000b99f2
   b6484:	c1efffff 	.word	0xc1efffff
   b6488:	3fe00000 	.word	0x3fe00000
   b648c:	000b985d 	.word	0x000b985d
   b6490:	40240000 	.word	0x40240000

000b6494 <_ZN5Print5printEfi>:
{
   b6494:	b538      	push	{r3, r4, r5, lr}
   b6496:	4604      	mov	r4, r0
   b6498:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b649c:	b2cd      	uxtb	r5, r1
   b649e:	f002 fa91 	bl	b89c4 <__aeabi_f2d>
   b64a2:	ec41 0b10 	vmov	d0, r0, r1
   b64a6:	4629      	mov	r1, r5
   b64a8:	4620      	mov	r0, r4
}
   b64aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b64ae:	f7ff bf29 	b.w	b6304 <_ZN5Print10printFloatEdh>

000b64b2 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   b64b2:	b2c9      	uxtb	r1, r1
   b64b4:	f7ff bf26 	b.w	b6304 <_ZN5Print10printFloatEdh>

000b64b8 <_ZN5Print7printlnEdi>:
{
   b64b8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b64ba:	b2c9      	uxtb	r1, r1
{
   b64bc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b64be:	f7ff ff21 	bl	b6304 <_ZN5Print10printFloatEdh>
   b64c2:	4604      	mov	r4, r0
  n += println();
   b64c4:	4628      	mov	r0, r5
   b64c6:	f7ff fee8 	bl	b629a <_ZN5Print7printlnEv>
}
   b64ca:	4420      	add	r0, r4
   b64cc:	bd38      	pop	{r3, r4, r5, pc}

000b64ce <_ZN5Print7printlnEfi>:
{
   b64ce:	b538      	push	{r3, r4, r5, lr}
   b64d0:	4604      	mov	r4, r0
   b64d2:	ee10 0a10 	vmov	r0, s0
   b64d6:	460d      	mov	r5, r1
    return println((double)num, digits);
   b64d8:	f002 fa74 	bl	b89c4 <__aeabi_f2d>
   b64dc:	ec41 0b10 	vmov	d0, r0, r1
   b64e0:	4629      	mov	r1, r5
   b64e2:	4620      	mov	r0, r4
}
   b64e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b64e8:	f7ff bfe6 	b.w	b64b8 <_ZN5Print7printlnEdi>

000b64ec <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   b64ec:	6081      	str	r1, [r0, #8]
}
   b64ee:	4770      	bx	lr

000b64f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b64f0:	4b01      	ldr	r3, [pc, #4]	; (b64f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b64f2:	4a02      	ldr	r2, [pc, #8]	; (b64fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b64f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b64f6:	4770      	bx	lr
   b64f8:	2003e684 	.word	0x2003e684
   b64fc:	000b99f6 	.word	0x000b99f6

000b6500 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b6500:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6502:	2000      	movs	r0, #0
   b6504:	f7ff fb44 	bl	b5b90 <spark_sync_time_pending>
   b6508:	b128      	cbz	r0, b6516 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b650a:	f7ff fb29 	bl	b5b60 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b650e:	f080 0001 	eor.w	r0, r0, #1
   b6512:	b2c0      	uxtb	r0, r0
    }
   b6514:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6516:	2001      	movs	r0, #1
   b6518:	e7fc      	b.n	b6514 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b651c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b651c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b6520:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b6528:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b652a:	d411      	bmi.n	b6550 <_ZN9TimeClass4zoneEf+0x34>
   b652c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b6530:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b6534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6538:	dc0a      	bgt.n	b6550 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b653a:	eddf 7a06 	vldr	s15, [pc, #24]	; b6554 <_ZN9TimeClass4zoneEf+0x38>
   b653e:	ee60 7a27 	vmul.f32	s15, s0, s15
   b6542:	ee17 0a90 	vmov	r0, s15
   b6546:	f002 fdf5 	bl	b9134 <__aeabi_f2lz>
   b654a:	4b03      	ldr	r3, [pc, #12]	; (b6558 <_ZN9TimeClass4zoneEf+0x3c>)
   b654c:	e9c3 0100 	strd	r0, r1, [r3]
}
   b6550:	bd08      	pop	{r3, pc}
   b6552:	bf00      	nop
   b6554:	45610000 	.word	0x45610000
   b6558:	2003e698 	.word	0x2003e698

000b655c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   b655c:	b530      	push	{r4, r5, lr}
   b655e:	b093      	sub	sp, #76	; 0x4c
   b6560:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   b6564:	4b19      	ldr	r3, [pc, #100]	; (b65cc <_ZN9TimeClass7timeStrEx+0x70>)
{
   b6566:	4604      	mov	r4, r0
    t += time_zone_cache;
   b6568:	e9d3 1000 	ldrd	r1, r0, [r3]
   b656c:	9b01      	ldr	r3, [sp, #4]
   b656e:	1852      	adds	r2, r2, r1
   b6570:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   b6574:	4816      	ldr	r0, [pc, #88]	; (b65d0 <_ZN9TimeClass7timeStrEx+0x74>)
   b6576:	e9d0 1000 	ldrd	r1, r0, [r0]
   b657a:	1852      	adds	r2, r2, r1
   b657c:	eb43 0300 	adc.w	r3, r3, r0
   b6580:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   b6584:	2224      	movs	r2, #36	; 0x24
   b6586:	eb0d 0002 	add.w	r0, sp, r2
   b658a:	2100      	movs	r1, #0
   b658c:	f002 ffc8 	bl	b9520 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   b6590:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   b6592:	a909      	add	r1, sp, #36	; 0x24
   b6594:	4668      	mov	r0, sp
   b6596:	f7ff fb53 	bl	b5c40 <localtime_r>
    char ascstr[26] = {};
   b659a:	2216      	movs	r2, #22
   b659c:	4629      	mov	r1, r5
   b659e:	a803      	add	r0, sp, #12
   b65a0:	9502      	str	r5, [sp, #8]
   b65a2:	f002 ffbd 	bl	b9520 <memset>
    asctime_r(&calendar_time, ascstr);
   b65a6:	a902      	add	r1, sp, #8
   b65a8:	a809      	add	r0, sp, #36	; 0x24
   b65aa:	f002 ff7f 	bl	b94ac <asctime_r>
    int len = strlen(ascstr);
   b65ae:	a802      	add	r0, sp, #8
   b65b0:	f003 f811 	bl	b95d6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   b65b4:	ab12      	add	r3, sp, #72	; 0x48
   b65b6:	4418      	add	r0, r3
    return String(ascstr);
   b65b8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   b65ba:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   b65be:	4620      	mov	r0, r4
   b65c0:	f7ff fd27 	bl	b6012 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b65c4:	4620      	mov	r0, r4
   b65c6:	b013      	add	sp, #76	; 0x4c
   b65c8:	bd30      	pop	{r4, r5, pc}
   b65ca:	bf00      	nop
   b65cc:	2003e698 	.word	0x2003e698
   b65d0:	2003e690 	.word	0x2003e690

000b65d4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b65d4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b65d6:	2000      	movs	r0, #0
   b65d8:	f7ff f8ca 	bl	b5770 <hal_rtc_time_is_valid>
    if (rtcstate)
   b65dc:	4604      	mov	r4, r0
   b65de:	b9a0      	cbnz	r0, b660a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b65e0:	f7ff f9f6 	bl	b59d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b65e4:	2801      	cmp	r0, #1
   b65e6:	d110      	bne.n	b660a <_ZN9TimeClass7isValidEv+0x36>
   b65e8:	4620      	mov	r0, r4
   b65ea:	f7ff fa19 	bl	b5a20 <system_thread_get_state>
   b65ee:	b960      	cbnz	r0, b660a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b65f0:	f7ff ff86 	bl	b6500 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b65f4:	b910      	cbnz	r0, b65fc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b65f6:	f7ff faa3 	bl	b5b40 <spark_process>
        while (_while() && !_condition()) {
   b65fa:	e7f9      	b.n	b65f0 <_ZN9TimeClass7isValidEv+0x1c>
   b65fc:	f7ff ff80 	bl	b6500 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6604:	2000      	movs	r0, #0
   b6606:	f7ff b8b3 	b.w	b5770 <hal_rtc_time_is_valid>
}
   b660a:	4620      	mov	r0, r4
   b660c:	bd10      	pop	{r4, pc}

000b660e <_ZN9TimeClass3nowEv>:
{
   b660e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6610:	f7ff ffe0 	bl	b65d4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6614:	2210      	movs	r2, #16
   b6616:	2100      	movs	r1, #0
   b6618:	4668      	mov	r0, sp
   b661a:	f002 ff81 	bl	b9520 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b661e:	2100      	movs	r1, #0
   b6620:	4668      	mov	r0, sp
   b6622:	f7ff f8ad 	bl	b5780 <hal_rtc_get_time>
}
   b6626:	9800      	ldr	r0, [sp, #0]
   b6628:	b005      	add	sp, #20
   b662a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6630 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6630:	4b02      	ldr	r3, [pc, #8]	; (b663c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6632:	681a      	ldr	r2, [r3, #0]
   b6634:	4b02      	ldr	r3, [pc, #8]	; (b6640 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6636:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6638:	4770      	bx	lr
   b663a:	bf00      	nop
   b663c:	2003e4b8 	.word	0x2003e4b8
   b6640:	2003e688 	.word	0x2003e688

000b6644 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6644:	2100      	movs	r1, #0
   b6646:	f7ff b9d3 	b.w	b59f0 <system_delay_ms>
	...

000b664c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b664c:	4b01      	ldr	r3, [pc, #4]	; (b6654 <_GLOBAL__sub_I_RGB+0x8>)
   b664e:	2200      	movs	r2, #0
   b6650:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6652:	4770      	bx	lr
   b6654:	2003e6a0 	.word	0x2003e6a0

000b6658 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b6658:	6800      	ldr	r0, [r0, #0]
   b665a:	f000 bd9b 	b.w	b7194 <_ZN7TwoWire4lockEv>

000b665e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b665e:	b510      	push	{r4, lr}
   b6660:	4604      	mov	r4, r0
      lock_(_lock) {
   b6662:	6001      	str	r1, [r0, #0]
   b6664:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b6666:	b10a      	cbz	r2, b666c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b6668:	f7ff fff6 	bl	b6658 <_ZN9FuelGauge4lockEv>
}
   b666c:	4620      	mov	r0, r4
   b666e:	bd10      	pop	{r4, pc}

000b6670 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b6670:	b513      	push	{r0, r1, r4, lr}
   b6672:	4604      	mov	r4, r0
   b6674:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b6676:	f000 ff8f 	bl	b7598 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b667a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b667c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b667e:	4620      	mov	r0, r4
   b6680:	f7ff ffed 	bl	b665e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b6684:	4620      	mov	r0, r4
   b6686:	b002      	add	sp, #8
   b6688:	bd10      	pop	{r4, pc}

000b668a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b668a:	6800      	ldr	r0, [r0, #0]
   b668c:	f000 bd8b 	b.w	b71a6 <_ZN7TwoWire6unlockEv>

000b6690 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   b6690:	b510      	push	{r4, lr}
    if (lock_) {
   b6692:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   b6694:	4604      	mov	r4, r0
    if (lock_) {
   b6696:	b10b      	cbz	r3, b669c <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   b6698:	f7ff fff7 	bl	b668a <_ZN9FuelGauge6unlockEv>
}
   b669c:	4620      	mov	r0, r4
   b669e:	bd10      	pop	{r4, pc}

000b66a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b66a0:	4b01      	ldr	r3, [pc, #4]	; (b66a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b66a2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b66a4:	4770      	bx	lr
   b66a6:	bf00      	nop
   b66a8:	2003e4c4 	.word	0x2003e4c4

000b66ac <serialEventRun>:
{
   b66ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b66ae:	4b0b      	ldr	r3, [pc, #44]	; (b66dc <serialEventRun+0x30>)
   b66b0:	b143      	cbz	r3, b66c4 <serialEventRun+0x18>
   b66b2:	f000 fc05 	bl	b6ec0 <_Z16_fetch_usbserialv>
   b66b6:	6803      	ldr	r3, [r0, #0]
   b66b8:	691b      	ldr	r3, [r3, #16]
   b66ba:	4798      	blx	r3
   b66bc:	2800      	cmp	r0, #0
   b66be:	dd01      	ble.n	b66c4 <serialEventRun+0x18>
        serialEvent();
   b66c0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b66c4:	4b06      	ldr	r3, [pc, #24]	; (b66e0 <serialEventRun+0x34>)
   b66c6:	b143      	cbz	r3, b66da <serialEventRun+0x2e>
   b66c8:	f000 fee8 	bl	b749c <_Z22__fetch_global_Serial1v>
   b66cc:	6803      	ldr	r3, [r0, #0]
   b66ce:	691b      	ldr	r3, [r3, #16]
   b66d0:	4798      	blx	r3
   b66d2:	2800      	cmp	r0, #0
   b66d4:	dd01      	ble.n	b66da <serialEventRun+0x2e>
        serialEvent1();
   b66d6:	f3af 8000 	nop.w
}
   b66da:	bd08      	pop	{r3, pc}
	...

000b66e4 <_post_loop>:
{
   b66e4:	b508      	push	{r3, lr}
	serialEventRun();
   b66e6:	f7ff ffe1 	bl	b66ac <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b66ea:	f7ff f839 	bl	b5760 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b66ee:	4b01      	ldr	r3, [pc, #4]	; (b66f4 <_post_loop+0x10>)
   b66f0:	6018      	str	r0, [r3, #0]
}
   b66f2:	bd08      	pop	{r3, pc}
   b66f4:	2003e72c 	.word	0x2003e72c

000b66f8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b66f8:	4805      	ldr	r0, [pc, #20]	; (b6710 <_Z33system_initialize_user_backup_ramv+0x18>)
   b66fa:	4a06      	ldr	r2, [pc, #24]	; (b6714 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b66fc:	4906      	ldr	r1, [pc, #24]	; (b6718 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b66fe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6700:	1a12      	subs	r2, r2, r0
   b6702:	f002 feff 	bl	b9504 <memcpy>
    __backup_sram_signature = signature;
   b6706:	4b05      	ldr	r3, [pc, #20]	; (b671c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6708:	4a05      	ldr	r2, [pc, #20]	; (b6720 <_Z33system_initialize_user_backup_ramv+0x28>)
   b670a:	601a      	str	r2, [r3, #0]
}
   b670c:	bd08      	pop	{r3, pc}
   b670e:	bf00      	nop
   b6710:	2003f400 	.word	0x2003f400
   b6714:	2003f404 	.word	0x2003f404
   b6718:	000b9cac 	.word	0x000b9cac
   b671c:	2003f400 	.word	0x2003f400
   b6720:	9a271c1e 	.word	0x9a271c1e

000b6724 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6724:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6726:	2300      	movs	r3, #0
   b6728:	9300      	str	r3, [sp, #0]
   b672a:	461a      	mov	r2, r3
   b672c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6730:	f7ff f988 	bl	b5a44 <system_ctrl_set_result>
}
   b6734:	b003      	add	sp, #12
   b6736:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b673c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b673c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b673e:	8843      	ldrh	r3, [r0, #2]
   b6740:	2b0a      	cmp	r3, #10
   b6742:	d008      	beq.n	b6756 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6744:	2b50      	cmp	r3, #80	; 0x50
   b6746:	d10b      	bne.n	b6760 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6748:	4b09      	ldr	r3, [pc, #36]	; (b6770 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b674a:	681b      	ldr	r3, [r3, #0]
   b674c:	b14b      	cbz	r3, b6762 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b674e:	b003      	add	sp, #12
   b6750:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6754:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6756:	f7ff ffe5 	bl	b6724 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b675a:	b003      	add	sp, #12
   b675c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6760:	2300      	movs	r3, #0
   b6762:	9300      	str	r3, [sp, #0]
   b6764:	461a      	mov	r2, r3
   b6766:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b676a:	f7ff f96b 	bl	b5a44 <system_ctrl_set_result>
}
   b676e:	e7f4      	b.n	b675a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6770:	2003e6b4 	.word	0x2003e6b4

000b6774 <module_user_init_hook>:
{
   b6774:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6776:	4812      	ldr	r0, [pc, #72]	; (b67c0 <module_user_init_hook+0x4c>)
   b6778:	2100      	movs	r1, #0
   b677a:	f7ff fa59 	bl	b5c30 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b677e:	4b11      	ldr	r3, [pc, #68]	; (b67c4 <module_user_init_hook+0x50>)
   b6780:	681a      	ldr	r2, [r3, #0]
   b6782:	4b11      	ldr	r3, [pc, #68]	; (b67c8 <module_user_init_hook+0x54>)
   b6784:	429a      	cmp	r2, r3
   b6786:	4b11      	ldr	r3, [pc, #68]	; (b67cc <module_user_init_hook+0x58>)
   b6788:	bf0c      	ite	eq
   b678a:	2201      	moveq	r2, #1
   b678c:	2200      	movne	r2, #0
   b678e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6790:	d001      	beq.n	b6796 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6792:	f7ff ffb1 	bl	b66f8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6796:	f7fe ffdb 	bl	b5750 <HAL_RNG_GetRandomNumber>
   b679a:	4604      	mov	r4, r0
    srand(seed);
   b679c:	f002 fec8 	bl	b9530 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b67a0:	4b0b      	ldr	r3, [pc, #44]	; (b67d0 <module_user_init_hook+0x5c>)
   b67a2:	b113      	cbz	r3, b67aa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b67a4:	4620      	mov	r0, r4
   b67a6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b67aa:	2100      	movs	r1, #0
   b67ac:	4808      	ldr	r0, [pc, #32]	; (b67d0 <module_user_init_hook+0x5c>)
   b67ae:	f7ff f9f7 	bl	b5ba0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b67b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b67b6:	4807      	ldr	r0, [pc, #28]	; (b67d4 <module_user_init_hook+0x60>)
   b67b8:	2100      	movs	r1, #0
   b67ba:	f7ff b939 	b.w	b5a30 <system_ctrl_set_app_request_handler>
   b67be:	bf00      	nop
   b67c0:	000b66a1 	.word	0x000b66a1
   b67c4:	2003f400 	.word	0x2003f400
   b67c8:	9a271c1e 	.word	0x9a271c1e
   b67cc:	2003e6b0 	.word	0x2003e6b0
   b67d0:	00000000 	.word	0x00000000
   b67d4:	000b673d 	.word	0x000b673d

000b67d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b67d8:	4770      	bx	lr

000b67da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b67da:	2000      	movs	r0, #0
   b67dc:	4770      	bx	lr

000b67de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b67de:	b510      	push	{r4, lr}
   b67e0:	2110      	movs	r1, #16
   b67e2:	4604      	mov	r4, r0
   b67e4:	f7fd fc5b 	bl	b409e <_ZdlPvj>
   b67e8:	4620      	mov	r0, r4
   b67ea:	bd10      	pop	{r4, pc}

000b67ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b67ec:	b508      	push	{r3, lr}
      { delete this; }
   b67ee:	f7ff fff6 	bl	b67de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b67f2:	bd08      	pop	{r3, pc}

000b67f4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b67f4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b67f6:	2200      	movs	r2, #0
   b67f8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b67fc:	6002      	str	r2, [r0, #0]
   b67fe:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6800:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6802:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6804:	680c      	ldr	r4, [r1, #0]
   b6806:	8085      	strh	r5, [r0, #4]
   b6808:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b680a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b680c:	bd30      	pop	{r4, r5, pc}

000b680e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b680e:	b510      	push	{r4, lr}
   b6810:	4604      	mov	r4, r0
    free((void*)msg_);
   b6812:	6800      	ldr	r0, [r0, #0]
   b6814:	f7ff f9d4 	bl	b5bc0 <free>
}
   b6818:	4620      	mov	r0, r4
   b681a:	bd10      	pop	{r4, pc}

000b681c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b681c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b681e:	68c4      	ldr	r4, [r0, #12]
   b6820:	b1f4      	cbz	r4, b6860 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6822:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6824:	2b02      	cmp	r3, #2
   b6826:	d103      	bne.n	b6830 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6828:	f104 000c 	add.w	r0, r4, #12
   b682c:	f7ff ffef 	bl	b680e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6830:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6832:	b135      	cbz	r5, b6842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6834:	4628      	mov	r0, r5
   b6836:	f7ff fcbe 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
   b683a:	2110      	movs	r1, #16
   b683c:	4628      	mov	r0, r5
   b683e:	f7fd fc2e 	bl	b409e <_ZdlPvj>
   b6842:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6844:	b135      	cbz	r5, b6854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6846:	4628      	mov	r0, r5
   b6848:	f7ff fcb5 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
   b684c:	2110      	movs	r1, #16
   b684e:	4628      	mov	r0, r5
   b6850:	f7fd fc25 	bl	b409e <_ZdlPvj>
   b6854:	4620      	mov	r0, r4
   b6856:	2114      	movs	r1, #20
   b6858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b685c:	f7fd bc1f 	b.w	b409e <_ZdlPvj>
   b6860:	bd38      	pop	{r3, r4, r5, pc}

000b6862 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6862:	680b      	ldr	r3, [r1, #0]
   b6864:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6866:	684b      	ldr	r3, [r1, #4]
   b6868:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b686a:	b113      	cbz	r3, b6872 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b686c:	685a      	ldr	r2, [r3, #4]
   b686e:	3201      	adds	r2, #1
   b6870:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6872:	4770      	bx	lr

000b6874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6874:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6876:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6878:	4668      	mov	r0, sp
   b687a:	460d      	mov	r5, r1
   b687c:	f7ff fff1 	bl	b6862 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6880:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6882:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6884:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6886:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6888:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b688a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b688c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b688e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6890:	f7ff fcae 	bl	b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6894:	b135      	cbz	r5, b68a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6896:	1d28      	adds	r0, r5, #4
   b6898:	f7ff fcaa 	bl	b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b689c:	2108      	movs	r1, #8
   b689e:	4628      	mov	r0, r5
   b68a0:	f7fd fbfd 	bl	b409e <_ZdlPvj>
        return p;
    }
   b68a4:	4620      	mov	r0, r4
   b68a6:	b003      	add	sp, #12
   b68a8:	bd30      	pop	{r4, r5, pc}

000b68aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b68aa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b68ac:	b510      	push	{r4, lr}
      if (_M_empty())
   b68ae:	b90a      	cbnz	r2, b68b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b68b0:	f000 fe9a 	bl	b75e8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b68b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b68b8:	68c3      	ldr	r3, [r0, #12]
   b68ba:	4718      	bx	r3

000b68bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b68bc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b68be:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b68c0:	f100 0110 	add.w	r1, r0, #16
   b68c4:	f7ff fff1 	bl	b68aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b68c8:	bd08      	pop	{r3, pc}

000b68ca <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b68ca:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b68cc:	b510      	push	{r4, lr}
      if (_M_empty())
   b68ce:	b90a      	cbnz	r2, b68d4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b68d0:	f000 fe8a 	bl	b75e8 <_ZSt25__throw_bad_function_callv>
    }
   b68d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b68d8:	68c3      	ldr	r3, [r0, #12]
   b68da:	4718      	bx	r3

000b68dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b68dc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b68de:	6800      	ldr	r0, [r0, #0]
   b68e0:	f100 0110 	add.w	r1, r0, #16
   b68e4:	f7ff fff1 	bl	b68ca <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b68e8:	bd08      	pop	{r3, pc}
	...

000b68ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b68ec:	b538      	push	{r3, r4, r5, lr}
   b68ee:	2300      	movs	r3, #0
   b68f0:	4604      	mov	r4, r0
   b68f2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b68f4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b68f6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b68f8:	f7fd fbcd 	bl	b4096 <_Znwj>
   b68fc:	b128      	cbz	r0, b690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b68fe:	2301      	movs	r3, #1
   b6900:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6904:	4b02      	ldr	r3, [pc, #8]	; (b6910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6906:	6003      	str	r3, [r0, #0]
   b6908:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b690a:	6020      	str	r0, [r4, #0]
	}
   b690c:	4620      	mov	r0, r4
   b690e:	bd38      	pop	{r3, r4, r5, pc}
   b6910:	000b9a20 	.word	0x000b9a20

000b6914 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6914:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6916:	2300      	movs	r3, #0
   b6918:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b691a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b691c:	4604      	mov	r4, r0
   b691e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6920:	b12b      	cbz	r3, b692e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6922:	2202      	movs	r2, #2
   b6924:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6926:	68eb      	ldr	r3, [r5, #12]
   b6928:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b692a:	68ab      	ldr	r3, [r5, #8]
   b692c:	60a3      	str	r3, [r4, #8]
    }
   b692e:	4620      	mov	r0, r4
   b6930:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6934:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6936:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6938:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b693a:	4668      	mov	r0, sp
   b693c:	f7ff ff5a 	bl	b67f4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6940:	f04f 0302 	mov.w	r3, #2
   b6944:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6948:	2a00      	cmp	r2, #0
   b694a:	d103      	bne.n	b6954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b694c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6950:	2900      	cmp	r1, #0
   b6952:	d1f7      	bne.n	b6944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6954:	d125      	bne.n	b69a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6956:	f104 050c 	add.w	r5, r4, #12
   b695a:	4669      	mov	r1, sp
   b695c:	4628      	mov	r0, r5
   b695e:	f7ff ff49 	bl	b67f4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6962:	f3bf 8f5b 	dmb	ish
   b6966:	2301      	movs	r3, #1
   b6968:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b696a:	2000      	movs	r0, #0
   b696c:	f104 0308 	add.w	r3, r4, #8
   b6970:	f3bf 8f5b 	dmb	ish
   b6974:	e853 6f00 	ldrex	r6, [r3]
   b6978:	e843 0200 	strex	r2, r0, [r3]
   b697c:	2a00      	cmp	r2, #0
   b697e:	d1f9      	bne.n	b6974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6980:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6984:	b16e      	cbz	r6, b69a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6986:	f7ff f83b 	bl	b5a00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b698a:	b178      	cbz	r0, b69ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b698c:	4629      	mov	r1, r5
   b698e:	4630      	mov	r0, r6
   b6990:	f7ff ff8b 	bl	b68aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6994:	4630      	mov	r0, r6
   b6996:	f7ff fc0e 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b699a:	2110      	movs	r1, #16
   b699c:	4630      	mov	r0, r6
   b699e:	f7fd fb7e 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b69a2:	4668      	mov	r0, sp
   b69a4:	f7ff ff33 	bl	b680e <_ZN8particle5ErrorD1Ev>
    }
   b69a8:	b009      	add	sp, #36	; 0x24
   b69aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b69ac:	4631      	mov	r1, r6
   b69ae:	a802      	add	r0, sp, #8
   b69b0:	f7ff ffb0 	bl	b6914 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b69b4:	68e0      	ldr	r0, [r4, #12]
   b69b6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b69ba:	b108      	cbz	r0, b69c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b69bc:	f002 fdee 	bl	b959c <strdup>
        type_(type) {
   b69c0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b69c2:	2010      	movs	r0, #16
   b69c4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b69c8:	f7fd fb65 	bl	b4096 <_Znwj>
   b69cc:	4605      	mov	r5, r0
   b69ce:	b1e8      	cbz	r0, b6a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b69d0:	2700      	movs	r7, #0
   b69d2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b69d4:	2018      	movs	r0, #24
   b69d6:	f7fd fb5e 	bl	b4096 <_Znwj>
   b69da:	4604      	mov	r4, r0
   b69dc:	b188      	cbz	r0, b6a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b69de:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b69e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b69e2:	a802      	add	r0, sp, #8
   b69e4:	f7ff fc0c 	bl	b6200 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b69ea:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b69ec:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b69f0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b69f2:	a906      	add	r1, sp, #24
   b69f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b69f6:	60e3      	str	r3, [r4, #12]
   b69f8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b69fc:	9205      	str	r2, [sp, #20]
   b69fe:	f7ff fef9 	bl	b67f4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6a02:	4b08      	ldr	r3, [pc, #32]	; (b6a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6a04:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6a06:	4b08      	ldr	r3, [pc, #32]	; (b6a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6a08:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6a0a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6a0c:	a806      	add	r0, sp, #24
   b6a0e:	f7ff fefe 	bl	b680e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6a12:	a802      	add	r0, sp, #8
   b6a14:	f7ff fbcf 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6a18:	2200      	movs	r2, #0
   b6a1a:	4629      	mov	r1, r5
   b6a1c:	4803      	ldr	r0, [pc, #12]	; (b6a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6a1e:	f7fe fff7 	bl	b5a10 <application_thread_invoke>
   b6a22:	e7b7      	b.n	b6994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6a24:	000b68bd 	.word	0x000b68bd
   b6a28:	000b6b41 	.word	0x000b6b41
   b6a2c:	000b7057 	.word	0x000b7057

000b6a30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a34:	b08b      	sub	sp, #44	; 0x2c
   b6a36:	4605      	mov	r5, r0
   b6a38:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6a3c:	460f      	mov	r7, r1
   b6a3e:	4690      	mov	r8, r2
   b6a40:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6a42:	f7ff f88d 	bl	b5b60 <spark_cloud_flag_connected>
   b6a46:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6a48:	4683      	mov	fp, r0
   b6a4a:	bb38      	cbnz	r0, b6a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6a4c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6a50:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6a52:	a905      	add	r1, sp, #20
   b6a54:	4630      	mov	r0, r6
   b6a56:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6a5a:	f7ff fecb 	bl	b67f4 <_ZN8particle5ErrorC1EOS0_>
   b6a5e:	2014      	movs	r0, #20
   b6a60:	f7fd fb19 	bl	b4096 <_Znwj>
   b6a64:	4604      	mov	r4, r0
   b6a66:	b148      	cbz	r0, b6a7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6a68:	2302      	movs	r3, #2
   b6a6a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6a6c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6a6e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6a72:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6a74:	4631      	mov	r1, r6
   b6a76:	300c      	adds	r0, #12
   b6a78:	f7ff febc 	bl	b67f4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6a7c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6a7e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6a80:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6a84:	f7ff ff32 	bl	b68ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6a88:	4630      	mov	r0, r6
   b6a8a:	f7ff fec0 	bl	b680e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6a8e:	a805      	add	r0, sp, #20
   b6a90:	f7ff febd 	bl	b680e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6a94:	4628      	mov	r0, r5
   b6a96:	b00b      	add	sp, #44	; 0x2c
   b6a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6a9c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6a9e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6aa0:	2014      	movs	r0, #20
   b6aa2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6aa6:	9307      	str	r3, [sp, #28]
   b6aa8:	f7fd faf5 	bl	b4096 <_Znwj>
   b6aac:	4601      	mov	r1, r0
   b6aae:	b118      	cbz	r0, b6ab8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6ab4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6ab6:	7044      	strb	r4, [r0, #1]
   b6ab8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6aba:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6abc:	f7ff ff16 	bl	b68ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6ac0:	4b1e      	ldr	r3, [pc, #120]	; (b6b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6ac2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6ac4:	2008      	movs	r0, #8
   b6ac6:	f7fd fae6 	bl	b4096 <_Znwj>
   b6aca:	4604      	mov	r4, r0
   b6acc:	b110      	cbz	r0, b6ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6ace:	a903      	add	r1, sp, #12
   b6ad0:	f7ff fec7 	bl	b6862 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6ad4:	9600      	str	r6, [sp, #0]
   b6ad6:	fa5f f38a 	uxtb.w	r3, sl
   b6ada:	464a      	mov	r2, r9
   b6adc:	4641      	mov	r1, r8
   b6ade:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6ae0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6ae2:	f7ff f845 	bl	b5b70 <spark_send_event>
   b6ae6:	b9b8      	cbnz	r0, b6b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6ae8:	9b03      	ldr	r3, [sp, #12]
   b6aea:	785b      	ldrb	r3, [r3, #1]
   b6aec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6af0:	b993      	cbnz	r3, b6b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6af2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6af6:	a905      	add	r1, sp, #20
   b6af8:	a803      	add	r0, sp, #12
   b6afa:	9205      	str	r2, [sp, #20]
   b6afc:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6b00:	f7ff ff18 	bl	b6934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6b04:	a805      	add	r0, sp, #20
   b6b06:	f7ff fe82 	bl	b680e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6b0a:	a805      	add	r0, sp, #20
   b6b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6b0e:	f7ff feb1 	bl	b6874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6b12:	a806      	add	r0, sp, #24
   b6b14:	f7ff fb6c 	bl	b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b18:	a903      	add	r1, sp, #12
   b6b1a:	a805      	add	r0, sp, #20
   b6b1c:	f7ff fea1 	bl	b6862 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b20:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6b22:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b24:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6b26:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6b28:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6b2a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6b2c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6b2e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6b30:	f7ff fb5e 	bl	b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b34:	a804      	add	r0, sp, #16
   b6b36:	f7ff fb5b 	bl	b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6b3a:	e7ab      	b.n	b6a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6b3c:	000b6bbd 	.word	0x000b6bbd

000b6b40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6b40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b44:	4605      	mov	r5, r0
	switch (__op)
   b6b46:	d103      	bne.n	b6b50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6b48:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6b4a:	6003      	str	r3, [r0, #0]
      }
   b6b4c:	2000      	movs	r0, #0
   b6b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6b50:	2a02      	cmp	r2, #2
   b6b52:	d010      	beq.n	b6b76 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6b54:	2a03      	cmp	r2, #3
   b6b56:	d1f9      	bne.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6b58:	6804      	ldr	r4, [r0, #0]
   b6b5a:	2c00      	cmp	r4, #0
   b6b5c:	d0f6      	beq.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6b5e:	f104 0010 	add.w	r0, r4, #16
   b6b62:	f7ff fe54 	bl	b680e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6b66:	4620      	mov	r0, r4
   b6b68:	f7ff fb25 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6b6c:	2118      	movs	r1, #24
   b6b6e:	4620      	mov	r0, r4
   b6b70:	f7fd fa95 	bl	b409e <_ZdlPvj>
   b6b74:	e7ea      	b.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b76:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6b78:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b7a:	f7fd fa8c 	bl	b4096 <_Znwj>
   b6b7e:	4604      	mov	r4, r0
   b6b80:	b150      	cbz	r0, b6b98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6b82:	4631      	mov	r1, r6
   b6b84:	f7ff fec6 	bl	b6914 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6b88:	6930      	ldr	r0, [r6, #16]
   b6b8a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6b8e:	b108      	cbz	r0, b6b94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6b90:	f002 fd04 	bl	b959c <strdup>
        type_(type) {
   b6b94:	6120      	str	r0, [r4, #16]
   b6b96:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6b98:	602c      	str	r4, [r5, #0]
	}
   b6b9a:	e7d7      	b.n	b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6b9c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6b9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b9e:	2300      	movs	r3, #0
   b6ba0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6ba2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6ba4:	4604      	mov	r4, r0
   b6ba6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6ba8:	b12b      	cbz	r3, b6bb6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6baa:	2202      	movs	r2, #2
   b6bac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6bae:	68eb      	ldr	r3, [r5, #12]
   b6bb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6bb2:	68ab      	ldr	r3, [r5, #8]
   b6bb4:	60a3      	str	r3, [r4, #8]
    }
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bbe:	b089      	sub	sp, #36	; 0x24
   b6bc0:	4604      	mov	r4, r0
   b6bc2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6bc4:	a801      	add	r0, sp, #4
   b6bc6:	4611      	mov	r1, r2
   b6bc8:	f7ff fe54 	bl	b6874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6bcc:	b1a4      	cbz	r4, b6bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6bce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6bd0:	b11d      	cbz	r5, b6bda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6bd2:	4628      	mov	r0, r5
   b6bd4:	f002 fce2 	bl	b959c <strdup>
   b6bd8:	4605      	mov	r5, r0
   b6bda:	a801      	add	r0, sp, #4
   b6bdc:	a903      	add	r1, sp, #12
        type_(type) {
   b6bde:	9503      	str	r5, [sp, #12]
   b6be0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6be4:	f7ff fea6 	bl	b6934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6be8:	a803      	add	r0, sp, #12
   b6bea:	f7ff fe10 	bl	b680e <_ZN8particle5ErrorD1Ev>
   b6bee:	a802      	add	r0, sp, #8
   b6bf0:	f7ff fafe 	bl	b61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6bf4:	b009      	add	sp, #36	; 0x24
   b6bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6bf8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6bfa:	2301      	movs	r3, #1
   b6bfc:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6c00:	2a00      	cmp	r2, #0
   b6c02:	d103      	bne.n	b6c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6c04:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6c08:	2900      	cmp	r1, #0
   b6c0a:	d1f7      	bne.n	b6bfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6c0c:	d1ef      	bne.n	b6bee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6c0e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6c10:	f3bf 8f5b 	dmb	ish
   b6c14:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6c16:	1d2b      	adds	r3, r5, #4
   b6c18:	f3bf 8f5b 	dmb	ish
   b6c1c:	e853 6f00 	ldrex	r6, [r3]
   b6c20:	e843 4200 	strex	r2, r4, [r3]
   b6c24:	2a00      	cmp	r2, #0
   b6c26:	d1f9      	bne.n	b6c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6c28:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6c2c:	2e00      	cmp	r6, #0
   b6c2e:	d0de      	beq.n	b6bee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6c30:	4620      	mov	r0, r4
   b6c32:	f7fe fee5 	bl	b5a00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6c36:	4607      	mov	r7, r0
   b6c38:	b160      	cbz	r0, b6c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6c3a:	f105 010c 	add.w	r1, r5, #12
   b6c3e:	4630      	mov	r0, r6
   b6c40:	f7ff fe43 	bl	b68ca <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6c44:	4630      	mov	r0, r6
   b6c46:	f7ff fab6 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6c4a:	2110      	movs	r1, #16
   b6c4c:	4630      	mov	r0, r6
   b6c4e:	f7fd fa26 	bl	b409e <_ZdlPvj>
   b6c52:	e7cc      	b.n	b6bee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6c54:	4631      	mov	r1, r6
   b6c56:	a803      	add	r0, sp, #12
   b6c58:	f7ff ffa0 	bl	b6b9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6c5c:	7b2b      	ldrb	r3, [r5, #12]
   b6c5e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6c62:	2010      	movs	r0, #16
   b6c64:	f7fd fa17 	bl	b4096 <_Znwj>
   b6c68:	4605      	mov	r5, r0
   b6c6a:	b1d0      	cbz	r0, b6ca2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6c6c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c6e:	2014      	movs	r0, #20
   b6c70:	f7fd fa11 	bl	b4096 <_Znwj>
   b6c74:	4604      	mov	r4, r0
   b6c76:	b178      	cbz	r0, b6c98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6c78:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6c7a:	4601      	mov	r1, r0
   b6c7c:	a803      	add	r0, sp, #12
   b6c7e:	f7ff fabf 	bl	b6200 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c82:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6c84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c86:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c88:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6c8a:	9205      	str	r2, [sp, #20]
   b6c8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c8e:	60e3      	str	r3, [r4, #12]
   b6c90:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6c94:	9206      	str	r2, [sp, #24]
   b6c96:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6c98:	4b06      	ldr	r3, [pc, #24]	; (b6cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6c9a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6c9c:	4b06      	ldr	r3, [pc, #24]	; (b6cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c9e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6ca0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6ca2:	a803      	add	r0, sp, #12
   b6ca4:	f7ff fa87 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6ca8:	2200      	movs	r2, #0
   b6caa:	4629      	mov	r1, r5
   b6cac:	4803      	ldr	r0, [pc, #12]	; (b6cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6cae:	f7fe feaf 	bl	b5a10 <application_thread_invoke>
   b6cb2:	e7c7      	b.n	b6c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6cb4:	000b68dd 	.word	0x000b68dd
   b6cb8:	000b6cc1 	.word	0x000b6cc1
   b6cbc:	000b7057 	.word	0x000b7057

000b6cc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6cc0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6cc2:	b570      	push	{r4, r5, r6, lr}
   b6cc4:	4604      	mov	r4, r0
	switch (__op)
   b6cc6:	d103      	bne.n	b6cd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6cc8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6cca:	6003      	str	r3, [r0, #0]
      }
   b6ccc:	2000      	movs	r0, #0
   b6cce:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6cd0:	2a02      	cmp	r2, #2
   b6cd2:	d00c      	beq.n	b6cee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6cd4:	2a03      	cmp	r2, #3
   b6cd6:	d1f9      	bne.n	b6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6cd8:	6804      	ldr	r4, [r0, #0]
   b6cda:	2c00      	cmp	r4, #0
   b6cdc:	d0f6      	beq.n	b6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6cde:	4620      	mov	r0, r4
   b6ce0:	f7ff fa69 	bl	b61b6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6ce4:	2114      	movs	r1, #20
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	f7fd f9d9 	bl	b409e <_ZdlPvj>
   b6cec:	e7ee      	b.n	b6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6cee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6cf0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6cf2:	f7fd f9d0 	bl	b4096 <_Znwj>
   b6cf6:	4605      	mov	r5, r0
   b6cf8:	b120      	cbz	r0, b6d04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6cfa:	4631      	mov	r1, r6
   b6cfc:	f7ff ff4e 	bl	b6b9c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6d00:	7c33      	ldrb	r3, [r6, #16]
   b6d02:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6d04:	6025      	str	r5, [r4, #0]
	}
   b6d06:	e7e1      	b.n	b6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6d08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d08:	4770      	bx	lr

000b6d0a <_ZN9IPAddressD0Ev>:
   b6d0a:	b510      	push	{r4, lr}
   b6d0c:	2118      	movs	r1, #24
   b6d0e:	4604      	mov	r4, r0
   b6d10:	f7fd f9c5 	bl	b409e <_ZdlPvj>
   b6d14:	4620      	mov	r0, r4
   b6d16:	bd10      	pop	{r4, pc}

000b6d18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d1a:	7d03      	ldrb	r3, [r0, #20]
   b6d1c:	2b06      	cmp	r3, #6
{
   b6d1e:	b08d      	sub	sp, #52	; 0x34
   b6d20:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d22:	f100 0704 	add.w	r7, r0, #4
   b6d26:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d2a:	d012      	beq.n	b6d52 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d2c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b6d30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d34:	220a      	movs	r2, #10
   b6d36:	4630      	mov	r0, r6
   b6d38:	f7ff fac5 	bl	b62c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d3c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d3e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d40:	d019      	beq.n	b6d76 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d42:	2c00      	cmp	r4, #0
   b6d44:	d0f4      	beq.n	b6d30 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d46:	212e      	movs	r1, #46	; 0x2e
   b6d48:	4630      	mov	r0, r6
   b6d4a:	f7ff fa9f 	bl	b628c <_ZN5Print5printEc>
   b6d4e:	4404      	add	r4, r0
   b6d50:	e7ee      	b.n	b6d30 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d52:	232f      	movs	r3, #47	; 0x2f
   b6d54:	466a      	mov	r2, sp
   b6d56:	4639      	mov	r1, r7
   b6d58:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d5a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d5e:	f7fe fd1f 	bl	b57a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d62:	4668      	mov	r0, sp
   b6d64:	f002 fc37 	bl	b95d6 <strlen>
   b6d68:	6833      	ldr	r3, [r6, #0]
   b6d6a:	4602      	mov	r2, r0
   b6d6c:	68db      	ldr	r3, [r3, #12]
   b6d6e:	4669      	mov	r1, sp
   b6d70:	4630      	mov	r0, r6
   b6d72:	4798      	blx	r3
   b6d74:	4604      	mov	r4, r0
    }
    return n;
}
   b6d76:	4620      	mov	r0, r4
   b6d78:	b00d      	add	sp, #52	; 0x34
   b6d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d7c:	b510      	push	{r4, lr}
   b6d7e:	4b05      	ldr	r3, [pc, #20]	; (b6d94 <_ZN9IPAddressC1Ev+0x18>)
   b6d80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d82:	2211      	movs	r2, #17
   b6d84:	f840 3b04 	str.w	r3, [r0], #4
   b6d88:	2100      	movs	r1, #0
   b6d8a:	f002 fbc9 	bl	b9520 <memset>
}
   b6d8e:	4620      	mov	r0, r4
   b6d90:	bd10      	pop	{r4, pc}
   b6d92:	bf00      	nop
   b6d94:	000b9a3c 	.word	0x000b9a3c

000b6d98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6d98:	4603      	mov	r3, r0
   b6d9a:	4a07      	ldr	r2, [pc, #28]	; (b6db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6d9c:	b510      	push	{r4, lr}
   b6d9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6da2:	f101 0210 	add.w	r2, r1, #16
   b6da6:	f851 4b04 	ldr.w	r4, [r1], #4
   b6daa:	f843 4b04 	str.w	r4, [r3], #4
   b6dae:	4291      	cmp	r1, r2
   b6db0:	d1f9      	bne.n	b6da6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6db2:	780a      	ldrb	r2, [r1, #0]
   b6db4:	701a      	strb	r2, [r3, #0]
}
   b6db6:	bd10      	pop	{r4, pc}
   b6db8:	000b9a3c 	.word	0x000b9a3c

000b6dbc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6dbc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6dbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dc2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6dc6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6dca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6dce:	2304      	movs	r3, #4
   b6dd0:	6041      	str	r1, [r0, #4]
   b6dd2:	7503      	strb	r3, [r0, #20]
}
   b6dd4:	bd10      	pop	{r4, pc}
	...

000b6dd8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6dd8:	b507      	push	{r0, r1, r2, lr}
   b6dda:	4b06      	ldr	r3, [pc, #24]	; (b6df4 <_ZN9IPAddressC1EPKh+0x1c>)
   b6ddc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6dde:	78cb      	ldrb	r3, [r1, #3]
   b6de0:	9300      	str	r3, [sp, #0]
   b6de2:	788b      	ldrb	r3, [r1, #2]
   b6de4:	784a      	ldrb	r2, [r1, #1]
   b6de6:	7809      	ldrb	r1, [r1, #0]
   b6de8:	f7ff ffe8 	bl	b6dbc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6dec:	b003      	add	sp, #12
   b6dee:	f85d fb04 	ldr.w	pc, [sp], #4
   b6df2:	bf00      	nop
   b6df4:	000b9a3c 	.word	0x000b9a3c

000b6df8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6df8:	7441      	strb	r1, [r0, #17]
}
   b6dfa:	4770      	bx	lr

000b6dfc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6dfc:	4770      	bx	lr

000b6dfe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6dfe:	4770      	bx	lr

000b6e00 <_ZN9USBSerial4readEv>:
{
   b6e00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6e02:	2100      	movs	r1, #0
   b6e04:	7c00      	ldrb	r0, [r0, #16]
   b6e06:	f7fe fdb3 	bl	b5970 <HAL_USB_USART_Receive_Data>
}
   b6e0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e0e:	bd08      	pop	{r3, pc}

000b6e10 <_ZN9USBSerial4peekEv>:
{
   b6e10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6e12:	2101      	movs	r1, #1
   b6e14:	7c00      	ldrb	r0, [r0, #16]
   b6e16:	f7fe fdab 	bl	b5970 <HAL_USB_USART_Receive_Data>
}
   b6e1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e1e:	bd08      	pop	{r3, pc}

000b6e20 <_ZN9USBSerial17availableForWriteEv>:
{
   b6e20:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6e22:	7c00      	ldrb	r0, [r0, #16]
   b6e24:	f7fe fd9c 	bl	b5960 <HAL_USB_USART_Available_Data_For_Write>
}
   b6e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e2c:	bd08      	pop	{r3, pc}

000b6e2e <_ZN9USBSerial9availableEv>:
{
   b6e2e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6e30:	7c00      	ldrb	r0, [r0, #16]
   b6e32:	f7fe fd8d 	bl	b5950 <HAL_USB_USART_Available_Data>
}
   b6e36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e3a:	bd08      	pop	{r3, pc}

000b6e3c <_ZN9USBSerial5writeEh>:
{
   b6e3c:	b513      	push	{r0, r1, r4, lr}
   b6e3e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e40:	7c00      	ldrb	r0, [r0, #16]
{
   b6e42:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e44:	f7fe fd8c 	bl	b5960 <HAL_USB_USART_Available_Data_For_Write>
   b6e48:	2800      	cmp	r0, #0
   b6e4a:	9901      	ldr	r1, [sp, #4]
   b6e4c:	dc01      	bgt.n	b6e52 <_ZN9USBSerial5writeEh+0x16>
   b6e4e:	7c60      	ldrb	r0, [r4, #17]
   b6e50:	b120      	cbz	r0, b6e5c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6e52:	7c20      	ldrb	r0, [r4, #16]
   b6e54:	f7fe fd94 	bl	b5980 <HAL_USB_USART_Send_Data>
   b6e58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6e5c:	b002      	add	sp, #8
   b6e5e:	bd10      	pop	{r4, pc}

000b6e60 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6e60:	7c00      	ldrb	r0, [r0, #16]
   b6e62:	f7fe bd95 	b.w	b5990 <HAL_USB_USART_Flush_Data>

000b6e66 <_ZN9USBSerialD0Ev>:
   b6e66:	b510      	push	{r4, lr}
   b6e68:	2114      	movs	r1, #20
   b6e6a:	4604      	mov	r4, r0
   b6e6c:	f7fd f917 	bl	b409e <_ZdlPvj>
   b6e70:	4620      	mov	r0, r4
   b6e72:	bd10      	pop	{r4, pc}

000b6e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6e74:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e7a:	4604      	mov	r4, r0
   b6e7c:	4608      	mov	r0, r1
   b6e7e:	2100      	movs	r1, #0
   b6e80:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6e84:	4b04      	ldr	r3, [pc, #16]	; (b6e98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6e86:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e88:	2301      	movs	r3, #1
  _serial = serial;
   b6e8a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6e8c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6e8e:	4611      	mov	r1, r2
   b6e90:	f7fe fd4e 	bl	b5930 <HAL_USB_USART_Init>
}
   b6e94:	4620      	mov	r0, r4
   b6e96:	bd10      	pop	{r4, pc}
   b6e98:	000b9a50 	.word	0x000b9a50

000b6e9c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6e9c:	7c00      	ldrb	r0, [r0, #16]
   b6e9e:	2200      	movs	r2, #0
   b6ea0:	f7fe bd4e 	b.w	b5940 <HAL_USB_USART_Begin>

000b6ea4 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b6ea4:	7c00      	ldrb	r0, [r0, #16]
   b6ea6:	f7fe bd7b 	b.w	b59a0 <HAL_USB_USART_Is_Enabled>

000b6eaa <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b6eaa:	f7ff bffb 	b.w	b6ea4 <_ZN9USBSerial9isEnabledEv>

000b6eae <_Z19acquireSerialBufferv>:
{
   b6eae:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6eb0:	2214      	movs	r2, #20
{
   b6eb2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6eb4:	2100      	movs	r1, #0
   b6eb6:	f002 fb33 	bl	b9520 <memset>
}
   b6eba:	4620      	mov	r0, r4
   b6ebc:	bd10      	pop	{r4, pc}
	...

000b6ec0 <_Z16_fetch_usbserialv>:
{
   b6ec0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ec2:	4c0f      	ldr	r4, [pc, #60]	; (b6f00 <_Z16_fetch_usbserialv+0x40>)
{
   b6ec4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6ec6:	a803      	add	r0, sp, #12
   b6ec8:	f7ff fff1 	bl	b6eae <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ecc:	7821      	ldrb	r1, [r4, #0]
   b6ece:	f3bf 8f5b 	dmb	ish
   b6ed2:	f011 0101 	ands.w	r1, r1, #1
   b6ed6:	d10f      	bne.n	b6ef8 <_Z16_fetch_usbserialv+0x38>
   b6ed8:	4620      	mov	r0, r4
   b6eda:	9101      	str	r1, [sp, #4]
   b6edc:	f7fd f8e1 	bl	b40a2 <__cxa_guard_acquire>
   b6ee0:	9901      	ldr	r1, [sp, #4]
   b6ee2:	b148      	cbz	r0, b6ef8 <_Z16_fetch_usbserialv+0x38>
   b6ee4:	aa03      	add	r2, sp, #12
   b6ee6:	4807      	ldr	r0, [pc, #28]	; (b6f04 <_Z16_fetch_usbserialv+0x44>)
   b6ee8:	f7ff ffc4 	bl	b6e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6eec:	4620      	mov	r0, r4
   b6eee:	f7fd f8dd 	bl	b40ac <__cxa_guard_release>
   b6ef2:	4805      	ldr	r0, [pc, #20]	; (b6f08 <_Z16_fetch_usbserialv+0x48>)
   b6ef4:	f002 fb00 	bl	b94f8 <atexit>
	return _usbserial;
}
   b6ef8:	4802      	ldr	r0, [pc, #8]	; (b6f04 <_Z16_fetch_usbserialv+0x44>)
   b6efa:	b008      	add	sp, #32
   b6efc:	bd10      	pop	{r4, pc}
   b6efe:	bf00      	nop
   b6f00:	2003e6b8 	.word	0x2003e6b8
   b6f04:	2003e6bc 	.word	0x2003e6bc
   b6f08:	000b6dfd 	.word	0x000b6dfd

000b6f0c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6f0c:	2200      	movs	r2, #0
   b6f0e:	6840      	ldr	r0, [r0, #4]
   b6f10:	4611      	mov	r1, r2
   b6f12:	f7fe bdcd 	b.w	b5ab0 <network_ready>

000b6f16 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6f16:	2200      	movs	r2, #0
   b6f18:	6840      	ldr	r0, [r0, #4]
   b6f1a:	4611      	mov	r1, r2
   b6f1c:	f7fe bde8 	b.w	b5af0 <network_listening>

000b6f20 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f20:	2200      	movs	r2, #0
   b6f22:	6840      	ldr	r0, [r0, #4]
   b6f24:	4611      	mov	r1, r2
   b6f26:	f7fe bdf3 	b.w	b5b10 <network_get_listen_timeout>

000b6f2a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f2a:	6840      	ldr	r0, [r0, #4]
   b6f2c:	2200      	movs	r2, #0
   b6f2e:	f7fe bde7 	b.w	b5b00 <network_set_listen_timeout>

000b6f32 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f32:	6840      	ldr	r0, [r0, #4]
   b6f34:	2200      	movs	r2, #0
   b6f36:	f081 0101 	eor.w	r1, r1, #1
   b6f3a:	f7fe bdd1 	b.w	b5ae0 <network_listen>

000b6f3e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f3e:	2300      	movs	r3, #0
   b6f40:	6840      	ldr	r0, [r0, #4]
   b6f42:	461a      	mov	r2, r3
   b6f44:	4619      	mov	r1, r3
   b6f46:	f7fe bdc3 	b.w	b5ad0 <network_off>

000b6f4a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f4a:	2300      	movs	r3, #0
   b6f4c:	6840      	ldr	r0, [r0, #4]
   b6f4e:	461a      	mov	r2, r3
   b6f50:	4619      	mov	r1, r3
   b6f52:	f7fe bdb5 	b.w	b5ac0 <network_on>

000b6f56 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f56:	2200      	movs	r2, #0
   b6f58:	6840      	ldr	r0, [r0, #4]
   b6f5a:	4611      	mov	r1, r2
   b6f5c:	f7fe bd98 	b.w	b5a90 <network_connecting>

000b6f60 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f60:	6840      	ldr	r0, [r0, #4]
   b6f62:	2200      	movs	r2, #0
   b6f64:	2102      	movs	r1, #2
   b6f66:	f7fe bd9b 	b.w	b5aa0 <network_disconnect>

000b6f6a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f6a:	2300      	movs	r3, #0
   b6f6c:	6840      	ldr	r0, [r0, #4]
   b6f6e:	461a      	mov	r2, r3
   b6f70:	f7fe bd86 	b.w	b5a80 <network_connect>

000b6f74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b6f74:	4b08      	ldr	r3, [pc, #32]	; (b6f98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b6f76:	b510      	push	{r4, lr}
   b6f78:	2428      	movs	r4, #40	; 0x28
   b6f7a:	4622      	mov	r2, r4
   b6f7c:	4618      	mov	r0, r3
   b6f7e:	2100      	movs	r1, #0
   b6f80:	f002 face 	bl	b9520 <memset>
   b6f84:	4b05      	ldr	r3, [pc, #20]	; (b6f9c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b6f86:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b6f88:	f04f 32ff 	mov.w	r2, #4294967295
   b6f8c:	6042      	str	r2, [r0, #4]
   b6f8e:	2204      	movs	r2, #4
   b6f90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b6f92:	4a03      	ldr	r2, [pc, #12]	; (b6fa0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b6f94:	601a      	str	r2, [r3, #0]
   b6f96:	bd10      	pop	{r4, pc}
   b6f98:	2003e6d8 	.word	0x2003e6d8
   b6f9c:	2003e6d0 	.word	0x2003e6d0
   b6fa0:	000b9a80 	.word	0x000b9a80

000b6fa4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6fa4:	4770      	bx	lr

000b6fa6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fa6:	7441      	strb	r1, [r0, #17]
}
   b6fa8:	4770      	bx	lr

000b6faa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6faa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6fac:	7c00      	ldrb	r0, [r0, #16]
   b6fae:	f7fe fc2f 	bl	b5810 <hal_usart_available_data_for_write>
}
   b6fb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fb6:	bd08      	pop	{r3, pc}

000b6fb8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6fb8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6fba:	7c00      	ldrb	r0, [r0, #16]
   b6fbc:	f7fe fc00 	bl	b57c0 <hal_usart_available>
}
   b6fc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fc4:	bd08      	pop	{r3, pc}

000b6fc6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6fc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6fc8:	7c00      	ldrb	r0, [r0, #16]
   b6fca:	f7fe fc09 	bl	b57e0 <hal_usart_peek>
}
   b6fce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fd2:	bd08      	pop	{r3, pc}

000b6fd4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6fd4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6fd6:	7c00      	ldrb	r0, [r0, #16]
   b6fd8:	f7fe fbfa 	bl	b57d0 <hal_usart_read>
}
   b6fdc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fe0:	bd08      	pop	{r3, pc}

000b6fe2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6fe2:	7c00      	ldrb	r0, [r0, #16]
   b6fe4:	f7fe bc04 	b.w	b57f0 <hal_usart_flush>

000b6fe8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fea:	7c45      	ldrb	r5, [r0, #17]
{
   b6fec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fee:	b12d      	cbz	r5, b6ffc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6ff0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6ff2:	b003      	add	sp, #12
   b6ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6ff8:	f7fe bbda 	b.w	b57b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6ffc:	7c00      	ldrb	r0, [r0, #16]
   b6ffe:	9101      	str	r1, [sp, #4]
   b7000:	f7fe fc06 	bl	b5810 <hal_usart_available_data_for_write>
   b7004:	2800      	cmp	r0, #0
   b7006:	9901      	ldr	r1, [sp, #4]
   b7008:	dcf2      	bgt.n	b6ff0 <_ZN11USARTSerial5writeEh+0x8>
}
   b700a:	4628      	mov	r0, r5
   b700c:	b003      	add	sp, #12
   b700e:	bd30      	pop	{r4, r5, pc}

000b7010 <_ZN11USARTSerialD0Ev>:
   b7010:	b510      	push	{r4, lr}
   b7012:	2114      	movs	r1, #20
   b7014:	4604      	mov	r4, r0
   b7016:	f7fd f842 	bl	b409e <_ZdlPvj>
   b701a:	4620      	mov	r0, r4
   b701c:	bd10      	pop	{r4, pc}
	...

000b7020 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7020:	b510      	push	{r4, lr}
   b7022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7026:	4604      	mov	r4, r0
   b7028:	4608      	mov	r0, r1
   b702a:	4611      	mov	r1, r2
   b702c:	2200      	movs	r2, #0
   b702e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7032:	4b04      	ldr	r3, [pc, #16]	; (b7044 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7034:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7036:	2301      	movs	r3, #1
  _serial = serial;
   b7038:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b703a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b703c:	f7fe fbf8 	bl	b5830 <hal_usart_init_ex>
}
   b7040:	4620      	mov	r0, r4
   b7042:	bd10      	pop	{r4, pc}
   b7044:	000b9abc 	.word	0x000b9abc

000b7048 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7048:	7c00      	ldrb	r0, [r0, #16]
   b704a:	2300      	movs	r3, #0
   b704c:	f7fe bbe8 	b.w	b5820 <hal_usart_begin_config>

000b7050 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b7050:	2200      	movs	r2, #0
   b7052:	f7ff bff9 	b.w	b7048 <_ZN11USARTSerial5beginEmm>

000b7056 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7056:	b510      	push	{r4, lr}
      if (_M_empty())
   b7058:	6883      	ldr	r3, [r0, #8]
   b705a:	4604      	mov	r4, r0
   b705c:	b90b      	cbnz	r3, b7062 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b705e:	f000 fac3 	bl	b75e8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7062:	68c3      	ldr	r3, [r0, #12]
   b7064:	4798      	blx	r3
      if (_M_manager)
   b7066:	68a3      	ldr	r3, [r4, #8]
   b7068:	b11b      	cbz	r3, b7072 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b706a:	2203      	movs	r2, #3
   b706c:	4621      	mov	r1, r4
   b706e:	4620      	mov	r0, r4
   b7070:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7072:	4620      	mov	r0, r4
   b7074:	2110      	movs	r1, #16
}
   b7076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b707a:	f7fd b810 	b.w	b409e <_ZdlPvj>

000b707e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b707e:	4770      	bx	lr

000b7080 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7082:	4606      	mov	r6, r0
   b7084:	4615      	mov	r5, r2
   b7086:	460c      	mov	r4, r1
   b7088:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b708a:	42bc      	cmp	r4, r7
   b708c:	d006      	beq.n	b709c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b708e:	6833      	ldr	r3, [r6, #0]
   b7090:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7094:	689b      	ldr	r3, [r3, #8]
   b7096:	4630      	mov	r0, r6
   b7098:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b709a:	e7f6      	b.n	b708a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b709c:	4628      	mov	r0, r5
   b709e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70a0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b70a0:	7c00      	ldrb	r0, [r0, #16]
   b70a2:	2200      	movs	r2, #0
   b70a4:	f7fe bbe4 	b.w	b5870 <hal_i2c_write>

000b70a8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b70a8:	7c00      	ldrb	r0, [r0, #16]
   b70aa:	2100      	movs	r1, #0
   b70ac:	f7fe bbe8 	b.w	b5880 <hal_i2c_available>

000b70b0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b70b0:	7c00      	ldrb	r0, [r0, #16]
   b70b2:	2100      	movs	r1, #0
   b70b4:	f7fe bbec 	b.w	b5890 <hal_i2c_read>

000b70b8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b70b8:	7c00      	ldrb	r0, [r0, #16]
   b70ba:	2100      	movs	r1, #0
   b70bc:	f7fe bbf0 	b.w	b58a0 <hal_i2c_peek>

000b70c0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b70c0:	7c00      	ldrb	r0, [r0, #16]
   b70c2:	2100      	movs	r1, #0
   b70c4:	f7fe bbf4 	b.w	b58b0 <hal_i2c_flush>

000b70c8 <_ZN7TwoWireD0Ev>:
   b70c8:	b510      	push	{r4, lr}
   b70ca:	2114      	movs	r1, #20
   b70cc:	4604      	mov	r4, r0
   b70ce:	f7fc ffe6 	bl	b409e <_ZdlPvj>
   b70d2:	4620      	mov	r0, r4
   b70d4:	bd10      	pop	{r4, pc}
	...

000b70d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70d8:	b538      	push	{r3, r4, r5, lr}
   b70da:	4604      	mov	r4, r0
   b70dc:	4615      	mov	r5, r2
   b70de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70e2:	2200      	movs	r2, #0
   b70e4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70e8:	4b09      	ldr	r3, [pc, #36]	; (b7110 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b70ea:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70ec:	4608      	mov	r0, r1
   b70ee:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b70f0:	4629      	mov	r1, r5
   b70f2:	f7fe fbed 	bl	b58d0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70f6:	30bf      	adds	r0, #191	; 0xbf
   b70f8:	d108      	bne.n	b710c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b70fa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70fc:	07db      	lsls	r3, r3, #31
   b70fe:	d505      	bpl.n	b710c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7100:	6868      	ldr	r0, [r5, #4]
   b7102:	f7fe fd5d 	bl	b5bc0 <free>
    free(conf.tx_buffer);
   b7106:	68e8      	ldr	r0, [r5, #12]
   b7108:	f7fe fd5a 	bl	b5bc0 <free>
}
   b710c:	4620      	mov	r0, r4
   b710e:	bd38      	pop	{r3, r4, r5, pc}
   b7110:	000b9aec 	.word	0x000b9aec

000b7114 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7114:	2300      	movs	r3, #0
   b7116:	7c00      	ldrb	r0, [r0, #16]
   b7118:	461a      	mov	r2, r3
   b711a:	4619      	mov	r1, r3
   b711c:	f7fe bb90 	b.w	b5840 <hal_i2c_begin>

000b7120 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7122:	2200      	movs	r2, #0
   b7124:	2314      	movs	r3, #20
   b7126:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b712a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b712e:	780b      	ldrb	r3, [r1, #0]
   b7130:	f88d 3008 	strb.w	r3, [sp, #8]
   b7134:	684b      	ldr	r3, [r1, #4]
   b7136:	9303      	str	r3, [sp, #12]
   b7138:	68cb      	ldr	r3, [r1, #12]
   b713a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b713c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b713e:	7a0b      	ldrb	r3, [r1, #8]
   b7140:	9305      	str	r3, [sp, #20]
   b7142:	a901      	add	r1, sp, #4
   b7144:	f7fe fbdc 	bl	b5900 <hal_i2c_request_ex>
}
   b7148:	b007      	add	sp, #28
   b714a:	f85d fb04 	ldr.w	pc, [sp], #4

000b714e <_ZN7TwoWire11requestFromEhjh>:
{
   b714e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7150:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7152:	f88d 1000 	strb.w	r1, [sp]
   b7156:	f04f 0164 	mov.w	r1, #100	; 0x64
   b715a:	9103      	str	r1, [sp, #12]
   b715c:	bf18      	it	ne
   b715e:	2301      	movne	r3, #1
   b7160:	4669      	mov	r1, sp
    size_ = size;
   b7162:	9201      	str	r2, [sp, #4]
   b7164:	f88d 3008 	strb.w	r3, [sp, #8]
   b7168:	f7ff ffda 	bl	b7120 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b716c:	b005      	add	sp, #20
   b716e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7172 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7172:	2301      	movs	r3, #1
   b7174:	f7ff bfeb 	b.w	b714e <_ZN7TwoWire11requestFromEhjh>

000b7178 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7178:	7c00      	ldrb	r0, [r0, #16]
   b717a:	2200      	movs	r2, #0
   b717c:	f7fe bb68 	b.w	b5850 <hal_i2c_begin_transmission>

000b7180 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7180:	b2c9      	uxtb	r1, r1
   b7182:	f7ff bff9 	b.w	b7178 <_ZN7TwoWire17beginTransmissionEh>

000b7186 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7186:	7c00      	ldrb	r0, [r0, #16]
   b7188:	2200      	movs	r2, #0
   b718a:	f7fe bb69 	b.w	b5860 <hal_i2c_end_transmission>

000b718e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b718e:	2101      	movs	r1, #1
   b7190:	f7ff bff9 	b.w	b7186 <_ZN7TwoWire15endTransmissionEh>

000b7194 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b7194:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b7196:	2100      	movs	r1, #0
   b7198:	7c00      	ldrb	r0, [r0, #16]
   b719a:	f7fe fba1 	bl	b58e0 <hal_i2c_lock>
}
   b719e:	fab0 f080 	clz	r0, r0
   b71a2:	0940      	lsrs	r0, r0, #5
   b71a4:	bd08      	pop	{r3, pc}

000b71a6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b71a6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b71a8:	2100      	movs	r1, #0
   b71aa:	7c00      	ldrb	r0, [r0, #16]
   b71ac:	f7fe fba0 	bl	b58f0 <hal_i2c_unlock>
}
   b71b0:	fab0 f080 	clz	r0, r0
   b71b4:	0940      	lsrs	r0, r0, #5
   b71b6:	bd08      	pop	{r3, pc}

000b71b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b71b8:	2300      	movs	r3, #0
   b71ba:	6840      	ldr	r0, [r0, #4]
   b71bc:	461a      	mov	r2, r3
   b71be:	f7fe bc5f 	b.w	b5a80 <network_connect>

000b71c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b71c2:	6840      	ldr	r0, [r0, #4]
   b71c4:	2200      	movs	r2, #0
   b71c6:	2102      	movs	r1, #2
   b71c8:	f7fe bc6a 	b.w	b5aa0 <network_disconnect>

000b71cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b71cc:	2200      	movs	r2, #0
   b71ce:	6840      	ldr	r0, [r0, #4]
   b71d0:	4611      	mov	r1, r2
   b71d2:	f7fe bc5d 	b.w	b5a90 <network_connecting>

000b71d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b71d6:	2200      	movs	r2, #0
   b71d8:	6840      	ldr	r0, [r0, #4]
   b71da:	4611      	mov	r1, r2
   b71dc:	f7fe bc68 	b.w	b5ab0 <network_ready>

000b71e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b71e0:	2300      	movs	r3, #0
   b71e2:	6840      	ldr	r0, [r0, #4]
   b71e4:	461a      	mov	r2, r3
   b71e6:	4619      	mov	r1, r3
   b71e8:	f7fe bc6a 	b.w	b5ac0 <network_on>

000b71ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b71ec:	2300      	movs	r3, #0
   b71ee:	6840      	ldr	r0, [r0, #4]
   b71f0:	461a      	mov	r2, r3
   b71f2:	4619      	mov	r1, r3
   b71f4:	f7fe bc6c 	b.w	b5ad0 <network_off>

000b71f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b71f8:	6840      	ldr	r0, [r0, #4]
   b71fa:	2100      	movs	r1, #0
   b71fc:	f7fe bc90 	b.w	b5b20 <network_is_on>

000b7200 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7200:	6840      	ldr	r0, [r0, #4]
   b7202:	2100      	movs	r1, #0
   b7204:	f7fe bc94 	b.w	b5b30 <network_is_off>

000b7208 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7208:	6840      	ldr	r0, [r0, #4]
   b720a:	2200      	movs	r2, #0
   b720c:	f081 0101 	eor.w	r1, r1, #1
   b7210:	f7fe bc66 	b.w	b5ae0 <network_listen>

000b7214 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7214:	6840      	ldr	r0, [r0, #4]
   b7216:	2200      	movs	r2, #0
   b7218:	f7fe bc72 	b.w	b5b00 <network_set_listen_timeout>

000b721c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b721c:	2200      	movs	r2, #0
   b721e:	6840      	ldr	r0, [r0, #4]
   b7220:	4611      	mov	r1, r2
   b7222:	f7fe bc75 	b.w	b5b10 <network_get_listen_timeout>

000b7226 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7226:	2200      	movs	r2, #0
   b7228:	6840      	ldr	r0, [r0, #4]
   b722a:	4611      	mov	r1, r2
   b722c:	f7fe bc60 	b.w	b5af0 <network_listening>

000b7230 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7234:	b095      	sub	sp, #84	; 0x54
   b7236:	4614      	mov	r4, r2
   b7238:	460d      	mov	r5, r1
   b723a:	4607      	mov	r7, r0
    IPAddress addr;
   b723c:	f7ff fd9e 	bl	b6d7c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7240:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7242:	221c      	movs	r2, #28
   b7244:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7246:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7248:	f002 f96a 	bl	b9520 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b724c:	2340      	movs	r3, #64	; 0x40
   b724e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7250:	4620      	mov	r0, r4
   b7252:	466b      	mov	r3, sp
   b7254:	aa0c      	add	r2, sp, #48	; 0x30
   b7256:	2100      	movs	r1, #0
   b7258:	f7fe fa3a 	bl	b56d0 <netdb_getaddrinfo>
    if (!r) {
   b725c:	4604      	mov	r4, r0
   b725e:	2800      	cmp	r0, #0
   b7260:	d14b      	bne.n	b72fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7262:	4602      	mov	r2, r0
   b7264:	2101      	movs	r1, #1
   b7266:	6868      	ldr	r0, [r5, #4]
   b7268:	f7fe fc22 	bl	b5ab0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b726c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b726e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7270:	4622      	mov	r2, r4
   b7272:	6868      	ldr	r0, [r5, #4]
   b7274:	f7fe fc1c 	bl	b5ab0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7278:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b727a:	4681      	mov	r9, r0
        bool ok = false;
   b727c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b727e:	2e00      	cmp	r6, #0
   b7280:	d03b      	beq.n	b72fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7282:	2900      	cmp	r1, #0
   b7284:	d139      	bne.n	b72fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7286:	6873      	ldr	r3, [r6, #4]
   b7288:	2b02      	cmp	r3, #2
   b728a:	d003      	beq.n	b7294 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b728c:	2b0a      	cmp	r3, #10
   b728e:	d011      	beq.n	b72b4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7290:	69f6      	ldr	r6, [r6, #28]
   b7292:	e7f4      	b.n	b727e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7294:	f1b8 0f00 	cmp.w	r8, #0
   b7298:	d0fa      	beq.n	b7290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b729a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b729c:	a806      	add	r0, sp, #24
   b729e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b72a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b72a2:	f7ff fd99 	bl	b6dd8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b72a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72a8:	1d3c      	adds	r4, r7, #4
   b72aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72ac:	682b      	ldr	r3, [r5, #0]
   b72ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b72b0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b72b2:	e7ed      	b.n	b7290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b72b4:	f1b9 0f00 	cmp.w	r9, #0
   b72b8:	d0ea      	beq.n	b7290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b72ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b72bc:	2210      	movs	r2, #16
   b72be:	a801      	add	r0, sp, #4
   b72c0:	f002 f92e 	bl	b9520 <memset>
                    a.v = 6;
   b72c4:	2306      	movs	r3, #6
   b72c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b72ca:	ad01      	add	r5, sp, #4
   b72cc:	f104 0308 	add.w	r3, r4, #8
   b72d0:	3418      	adds	r4, #24
   b72d2:	6818      	ldr	r0, [r3, #0]
   b72d4:	6859      	ldr	r1, [r3, #4]
   b72d6:	462a      	mov	r2, r5
   b72d8:	c203      	stmia	r2!, {r0, r1}
   b72da:	3308      	adds	r3, #8
   b72dc:	42a3      	cmp	r3, r4
   b72de:	4615      	mov	r5, r2
   b72e0:	d1f7      	bne.n	b72d2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b72e2:	a901      	add	r1, sp, #4
   b72e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b72e6:	ad07      	add	r5, sp, #28
   b72e8:	f7ff fd56 	bl	b6d98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b72ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72ee:	1d3c      	adds	r4, r7, #4
   b72f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72f2:	682b      	ldr	r3, [r5, #0]
   b72f4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b72f6:	4649      	mov	r1, r9
   b72f8:	e7ca      	b.n	b7290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b72fa:	9800      	ldr	r0, [sp, #0]
   b72fc:	f7fe f9e0 	bl	b56c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7300:	4638      	mov	r0, r7
   b7302:	b015      	add	sp, #84	; 0x54
   b7304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7308 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7308:	4b02      	ldr	r3, [pc, #8]	; (b7314 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b730a:	4a03      	ldr	r2, [pc, #12]	; (b7318 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b730c:	601a      	str	r2, [r3, #0]
   b730e:	2200      	movs	r2, #0
   b7310:	605a      	str	r2, [r3, #4]

} // spark
   b7312:	4770      	bx	lr
   b7314:	2003e700 	.word	0x2003e700
   b7318:	000b9b14 	.word	0x000b9b14

000b731c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b731c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b731e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7320:	d902      	bls.n	b7328 <pinAvailable+0xc>
    return false;
   b7322:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7324:	b002      	add	sp, #8
   b7326:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7328:	f1a0 030b 	sub.w	r3, r0, #11
   b732c:	2b02      	cmp	r3, #2
   b732e:	d81a      	bhi.n	b7366 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7330:	4c17      	ldr	r4, [pc, #92]	; (b7390 <pinAvailable+0x74>)
   b7332:	7821      	ldrb	r1, [r4, #0]
   b7334:	f3bf 8f5b 	dmb	ish
   b7338:	f011 0101 	ands.w	r1, r1, #1
   b733c:	d10b      	bne.n	b7356 <pinAvailable+0x3a>
   b733e:	4620      	mov	r0, r4
   b7340:	9101      	str	r1, [sp, #4]
   b7342:	f7fc feae 	bl	b40a2 <__cxa_guard_acquire>
   b7346:	9901      	ldr	r1, [sp, #4]
   b7348:	b128      	cbz	r0, b7356 <pinAvailable+0x3a>
   b734a:	4812      	ldr	r0, [pc, #72]	; (b7394 <pinAvailable+0x78>)
   b734c:	f7fe fcbe 	bl	b5ccc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7350:	4620      	mov	r0, r4
   b7352:	f7fc feab 	bl	b40ac <__cxa_guard_release>
   b7356:	4b0f      	ldr	r3, [pc, #60]	; (b7394 <pinAvailable+0x78>)
   b7358:	7818      	ldrb	r0, [r3, #0]
   b735a:	f7fe fae1 	bl	b5920 <hal_spi_is_enabled>
   b735e:	2800      	cmp	r0, #0
   b7360:	d1df      	bne.n	b7322 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7362:	2001      	movs	r0, #1
   b7364:	e7de      	b.n	b7324 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7366:	2801      	cmp	r0, #1
   b7368:	d809      	bhi.n	b737e <pinAvailable+0x62>
   b736a:	f000 f8f1 	bl	b7550 <_Z19__fetch_global_Wirev>
   b736e:	2100      	movs	r1, #0
   b7370:	7c00      	ldrb	r0, [r0, #16]
   b7372:	f7fe faa5 	bl	b58c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7376:	f080 0001 	eor.w	r0, r0, #1
   b737a:	b2c0      	uxtb	r0, r0
   b737c:	e7d2      	b.n	b7324 <pinAvailable+0x8>
   b737e:	3809      	subs	r0, #9
   b7380:	2801      	cmp	r0, #1
   b7382:	d8ee      	bhi.n	b7362 <pinAvailable+0x46>
   b7384:	f000 f88a 	bl	b749c <_Z22__fetch_global_Serial1v>
   b7388:	7c00      	ldrb	r0, [r0, #16]
   b738a:	f7fe fa39 	bl	b5800 <hal_usart_is_enabled>
   b738e:	e7f2      	b.n	b7376 <pinAvailable+0x5a>
   b7390:	2003e708 	.word	0x2003e708
   b7394:	2003e70c 	.word	0x2003e70c

000b7398 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7398:	2823      	cmp	r0, #35	; 0x23
{
   b739a:	b538      	push	{r3, r4, r5, lr}
   b739c:	4604      	mov	r4, r0
   b739e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b73a0:	d80a      	bhi.n	b73b8 <pinMode+0x20>
   b73a2:	29ff      	cmp	r1, #255	; 0xff
   b73a4:	d008      	beq.n	b73b8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b73a6:	f7ff ffb9 	bl	b731c <pinAvailable>
   b73aa:	b128      	cbz	r0, b73b8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b73ac:	4629      	mov	r1, r5
   b73ae:	4620      	mov	r0, r4
}
   b73b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b73b4:	f7fe b99c 	b.w	b56f0 <HAL_Pin_Mode>
}
   b73b8:	bd38      	pop	{r3, r4, r5, pc}

000b73ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b73ba:	b538      	push	{r3, r4, r5, lr}
   b73bc:	4604      	mov	r4, r0
   b73be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b73c0:	f7fe f99e 	bl	b5700 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b73c4:	28ff      	cmp	r0, #255	; 0xff
   b73c6:	d010      	beq.n	b73ea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b73c8:	2806      	cmp	r0, #6
   b73ca:	d804      	bhi.n	b73d6 <digitalWrite+0x1c>
   b73cc:	234d      	movs	r3, #77	; 0x4d
   b73ce:	fa23 f000 	lsr.w	r0, r3, r0
   b73d2:	07c3      	lsls	r3, r0, #31
   b73d4:	d409      	bmi.n	b73ea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b73d6:	4620      	mov	r0, r4
   b73d8:	f7ff ffa0 	bl	b731c <pinAvailable>
   b73dc:	b128      	cbz	r0, b73ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b73de:	4629      	mov	r1, r5
   b73e0:	4620      	mov	r0, r4
}
   b73e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b73e6:	f7fe b993 	b.w	b5710 <HAL_GPIO_Write>
}
   b73ea:	bd38      	pop	{r3, r4, r5, pc}

000b73ec <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b73ec:	280d      	cmp	r0, #13
{
   b73ee:	b510      	push	{r4, lr}
   b73f0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b73f2:	bf9c      	itt	ls
   b73f4:	340e      	addls	r4, #14
   b73f6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b73f8:	4620      	mov	r0, r4
   b73fa:	f7ff ff8f 	bl	b731c <pinAvailable>
   b73fe:	b150      	cbz	r0, b7416 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7400:	2103      	movs	r1, #3
   b7402:	4620      	mov	r0, r4
   b7404:	f7fe f96c 	bl	b56e0 <HAL_Validate_Pin_Function>
   b7408:	2803      	cmp	r0, #3
   b740a:	d104      	bne.n	b7416 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b740c:	4620      	mov	r0, r4
}
   b740e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7412:	f7fe b98d 	b.w	b5730 <hal_adc_read>
}
   b7416:	2000      	movs	r0, #0
   b7418:	bd10      	pop	{r4, pc}

000b741a <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b741a:	b538      	push	{r3, r4, r5, lr}
   b741c:	4604      	mov	r4, r0
   b741e:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b7420:	f7ff ff7c 	bl	b731c <pinAvailable>
   b7424:	b1f0      	cbz	r0, b7464 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b7426:	2104      	movs	r1, #4
   b7428:	4620      	mov	r0, r4
   b742a:	f7fe f959 	bl	b56e0 <HAL_Validate_Pin_Function>
   b742e:	2804      	cmp	r0, #4
   b7430:	d105      	bne.n	b743e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b7432:	b2a9      	uxth	r1, r5
   b7434:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b7436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b743a:	f7fe b971 	b.w	b5720 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b743e:	2102      	movs	r1, #2
   b7440:	4620      	mov	r0, r4
   b7442:	f7fe f94d 	bl	b56e0 <HAL_Validate_Pin_Function>
   b7446:	2802      	cmp	r0, #2
   b7448:	d10c      	bne.n	b7464 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b744a:	4620      	mov	r0, r4
   b744c:	f7fe f958 	bl	b5700 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b7450:	2801      	cmp	r0, #1
   b7452:	d001      	beq.n	b7458 <_Z11analogWritetm+0x3e>
   b7454:	2804      	cmp	r0, #4
   b7456:	d105      	bne.n	b7464 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b7458:	4629      	mov	r1, r5
   b745a:	4620      	mov	r0, r4
}
   b745c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b7460:	f7fe b96e 	b.w	b5740 <hal_pwm_write_ext>
}
   b7464:	bd38      	pop	{r3, r4, r5, pc}

000b7466 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7466:	4770      	bx	lr

000b7468 <_Z20acquireSerial1Bufferv>:
{
   b7468:	b538      	push	{r3, r4, r5, lr}
   b746a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b746c:	2514      	movs	r5, #20
   b746e:	462a      	mov	r2, r5
   b7470:	2100      	movs	r1, #0
   b7472:	f002 f855 	bl	b9520 <memset>
   b7476:	8025      	strh	r5, [r4, #0]
   b7478:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b747a:	4907      	ldr	r1, [pc, #28]	; (b7498 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b747c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b747e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7480:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7482:	f000 f8af 	bl	b75e4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7486:	4904      	ldr	r1, [pc, #16]	; (b7498 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7488:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b748a:	4628      	mov	r0, r5
   b748c:	f000 f8aa 	bl	b75e4 <_ZnajRKSt9nothrow_t>
    };
   b7490:	60e0      	str	r0, [r4, #12]
}
   b7492:	4620      	mov	r0, r4
   b7494:	bd38      	pop	{r3, r4, r5, pc}
   b7496:	bf00      	nop
   b7498:	000b9b48 	.word	0x000b9b48

000b749c <_Z22__fetch_global_Serial1v>:
{
   b749c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b749e:	4d0e      	ldr	r5, [pc, #56]	; (b74d8 <_Z22__fetch_global_Serial1v+0x3c>)
   b74a0:	7829      	ldrb	r1, [r5, #0]
   b74a2:	f3bf 8f5b 	dmb	ish
   b74a6:	f011 0401 	ands.w	r4, r1, #1
{
   b74aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b74ac:	d111      	bne.n	b74d2 <_Z22__fetch_global_Serial1v+0x36>
   b74ae:	4628      	mov	r0, r5
   b74b0:	f7fc fdf7 	bl	b40a2 <__cxa_guard_acquire>
   b74b4:	b168      	cbz	r0, b74d2 <_Z22__fetch_global_Serial1v+0x36>
   b74b6:	a801      	add	r0, sp, #4
   b74b8:	f7ff ffd6 	bl	b7468 <_Z20acquireSerial1Bufferv>
   b74bc:	aa01      	add	r2, sp, #4
   b74be:	4621      	mov	r1, r4
   b74c0:	4806      	ldr	r0, [pc, #24]	; (b74dc <_Z22__fetch_global_Serial1v+0x40>)
   b74c2:	f7ff fdad 	bl	b7020 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b74c6:	4628      	mov	r0, r5
   b74c8:	f7fc fdf0 	bl	b40ac <__cxa_guard_release>
   b74cc:	4804      	ldr	r0, [pc, #16]	; (b74e0 <_Z22__fetch_global_Serial1v+0x44>)
   b74ce:	f002 f813 	bl	b94f8 <atexit>
    return serial1;
}
   b74d2:	4802      	ldr	r0, [pc, #8]	; (b74dc <_Z22__fetch_global_Serial1v+0x40>)
   b74d4:	b007      	add	sp, #28
   b74d6:	bd30      	pop	{r4, r5, pc}
   b74d8:	2003e714 	.word	0x2003e714
   b74dc:	2003e718 	.word	0x2003e718
   b74e0:	000b7467 	.word	0x000b7467

000b74e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b74e4:	4770      	bx	lr

000b74e6 <__tcf_1>:
   b74e6:	4770      	bx	lr

000b74e8 <_Z17acquireWireBufferv>:
{
   b74e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b74ea:	4b0a      	ldr	r3, [pc, #40]	; (b7514 <_Z17acquireWireBufferv+0x2c>)
   b74ec:	6003      	str	r3, [r0, #0]
   b74ee:	2301      	movs	r3, #1
{
   b74f0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b74f2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b74f4:	4908      	ldr	r1, [pc, #32]	; (b7518 <_Z17acquireWireBufferv+0x30>)
   b74f6:	2020      	movs	r0, #32
   b74f8:	f000 f874 	bl	b75e4 <_ZnajRKSt9nothrow_t>
	};
   b74fc:	2520      	movs	r5, #32
   b74fe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7500:	4905      	ldr	r1, [pc, #20]	; (b7518 <_Z17acquireWireBufferv+0x30>)
	};
   b7502:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7504:	4628      	mov	r0, r5
   b7506:	f000 f86d 	bl	b75e4 <_ZnajRKSt9nothrow_t>
	};
   b750a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b750e:	4620      	mov	r0, r4
   b7510:	bd38      	pop	{r3, r4, r5, pc}
   b7512:	bf00      	nop
   b7514:	00010018 	.word	0x00010018
   b7518:	000b9b48 	.word	0x000b9b48

000b751c <_Z18acquireWire1Bufferv>:
{
   b751c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b751e:	4b0a      	ldr	r3, [pc, #40]	; (b7548 <_Z18acquireWire1Bufferv+0x2c>)
   b7520:	6003      	str	r3, [r0, #0]
   b7522:	2301      	movs	r3, #1
{
   b7524:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7526:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7528:	4908      	ldr	r1, [pc, #32]	; (b754c <_Z18acquireWire1Bufferv+0x30>)
   b752a:	2020      	movs	r0, #32
   b752c:	f000 f85a 	bl	b75e4 <_ZnajRKSt9nothrow_t>
	};
   b7530:	2520      	movs	r5, #32
   b7532:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7534:	4905      	ldr	r1, [pc, #20]	; (b754c <_Z18acquireWire1Bufferv+0x30>)
	};
   b7536:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7538:	4628      	mov	r0, r5
   b753a:	f000 f853 	bl	b75e4 <_ZnajRKSt9nothrow_t>
	};
   b753e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7542:	4620      	mov	r0, r4
   b7544:	bd38      	pop	{r3, r4, r5, pc}
   b7546:	bf00      	nop
   b7548:	00010018 	.word	0x00010018
   b754c:	000b9b48 	.word	0x000b9b48

000b7550 <_Z19__fetch_global_Wirev>:
{
   b7550:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7552:	4d0e      	ldr	r5, [pc, #56]	; (b758c <_Z19__fetch_global_Wirev+0x3c>)
   b7554:	7829      	ldrb	r1, [r5, #0]
   b7556:	f3bf 8f5b 	dmb	ish
   b755a:	f011 0401 	ands.w	r4, r1, #1
{
   b755e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7560:	d111      	bne.n	b7586 <_Z19__fetch_global_Wirev+0x36>
   b7562:	4628      	mov	r0, r5
   b7564:	f7fc fd9d 	bl	b40a2 <__cxa_guard_acquire>
   b7568:	b168      	cbz	r0, b7586 <_Z19__fetch_global_Wirev+0x36>
   b756a:	4668      	mov	r0, sp
   b756c:	f7ff ffbc 	bl	b74e8 <_Z17acquireWireBufferv>
   b7570:	466a      	mov	r2, sp
   b7572:	4621      	mov	r1, r4
   b7574:	4806      	ldr	r0, [pc, #24]	; (b7590 <_Z19__fetch_global_Wirev+0x40>)
   b7576:	f7ff fdaf 	bl	b70d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b757a:	4628      	mov	r0, r5
   b757c:	f7fc fd96 	bl	b40ac <__cxa_guard_release>
   b7580:	4804      	ldr	r0, [pc, #16]	; (b7594 <_Z19__fetch_global_Wirev+0x44>)
   b7582:	f001 ffb9 	bl	b94f8 <atexit>
	return wire;
}
   b7586:	4802      	ldr	r0, [pc, #8]	; (b7590 <_Z19__fetch_global_Wirev+0x40>)
   b7588:	b007      	add	sp, #28
   b758a:	bd30      	pop	{r4, r5, pc}
   b758c:	2003e730 	.word	0x2003e730
   b7590:	2003e738 	.word	0x2003e738
   b7594:	000b74e5 	.word	0x000b74e5

000b7598 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b7598:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b759a:	4c0e      	ldr	r4, [pc, #56]	; (b75d4 <_Z20__fetch_global_Wire1v+0x3c>)
   b759c:	7823      	ldrb	r3, [r4, #0]
   b759e:	f3bf 8f5b 	dmb	ish
   b75a2:	07db      	lsls	r3, r3, #31
{
   b75a4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b75a6:	d411      	bmi.n	b75cc <_Z20__fetch_global_Wire1v+0x34>
   b75a8:	4620      	mov	r0, r4
   b75aa:	f7fc fd7a 	bl	b40a2 <__cxa_guard_acquire>
   b75ae:	b168      	cbz	r0, b75cc <_Z20__fetch_global_Wire1v+0x34>
   b75b0:	4668      	mov	r0, sp
   b75b2:	f7ff ffb3 	bl	b751c <_Z18acquireWire1Bufferv>
   b75b6:	466a      	mov	r2, sp
   b75b8:	2101      	movs	r1, #1
   b75ba:	4807      	ldr	r0, [pc, #28]	; (b75d8 <_Z20__fetch_global_Wire1v+0x40>)
   b75bc:	f7ff fd8c 	bl	b70d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b75c0:	4620      	mov	r0, r4
   b75c2:	f7fc fd73 	bl	b40ac <__cxa_guard_release>
   b75c6:	4805      	ldr	r0, [pc, #20]	; (b75dc <_Z20__fetch_global_Wire1v+0x44>)
   b75c8:	f001 ff96 	bl	b94f8 <atexit>
	return wire;
}
   b75cc:	4802      	ldr	r0, [pc, #8]	; (b75d8 <_Z20__fetch_global_Wire1v+0x40>)
   b75ce:	b006      	add	sp, #24
   b75d0:	bd10      	pop	{r4, pc}
   b75d2:	bf00      	nop
   b75d4:	2003e734 	.word	0x2003e734
   b75d8:	2003e74c 	.word	0x2003e74c
   b75dc:	000b74e7 	.word	0x000b74e7

000b75e0 <_ZnwjRKSt9nothrow_t>:
   b75e0:	f7fc bd59 	b.w	b4096 <_Znwj>

000b75e4 <_ZnajRKSt9nothrow_t>:
   b75e4:	f7fc bd59 	b.w	b409a <_Znaj>

000b75e8 <_ZSt25__throw_bad_function_callv>:
   b75e8:	b508      	push	{r3, lr}
   b75ea:	f7fe fb01 	bl	b5bf0 <abort>
	...

000b75f0 <pow>:
   b75f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75f2:	ed2d 8b02 	vpush	{d8}
   b75f6:	ec57 6b10 	vmov	r6, r7, d0
   b75fa:	ec55 4b11 	vmov	r4, r5, d1
   b75fe:	f000 f8cb 	bl	b7798 <__ieee754_pow>
   b7602:	4b63      	ldr	r3, [pc, #396]	; (b7790 <pow+0x1a0>)
   b7604:	eeb0 8a40 	vmov.f32	s16, s0
   b7608:	eef0 8a60 	vmov.f32	s17, s1
   b760c:	f993 3000 	ldrsb.w	r3, [r3]
   b7610:	3301      	adds	r3, #1
   b7612:	d02a      	beq.n	b766a <pow+0x7a>
   b7614:	4622      	mov	r2, r4
   b7616:	462b      	mov	r3, r5
   b7618:	4620      	mov	r0, r4
   b761a:	4629      	mov	r1, r5
   b761c:	f001 fcc4 	bl	b8fa8 <__aeabi_dcmpun>
   b7620:	bb18      	cbnz	r0, b766a <pow+0x7a>
   b7622:	4632      	mov	r2, r6
   b7624:	463b      	mov	r3, r7
   b7626:	4630      	mov	r0, r6
   b7628:	4639      	mov	r1, r7
   b762a:	f001 fcbd 	bl	b8fa8 <__aeabi_dcmpun>
   b762e:	2800      	cmp	r0, #0
   b7630:	d144      	bne.n	b76bc <pow+0xcc>
   b7632:	2200      	movs	r2, #0
   b7634:	2300      	movs	r3, #0
   b7636:	4630      	mov	r0, r6
   b7638:	4639      	mov	r1, r7
   b763a:	f001 fc83 	bl	b8f44 <__aeabi_dcmpeq>
   b763e:	b1d8      	cbz	r0, b7678 <pow+0x88>
   b7640:	2200      	movs	r2, #0
   b7642:	2300      	movs	r3, #0
   b7644:	4620      	mov	r0, r4
   b7646:	4629      	mov	r1, r5
   b7648:	f001 fc7c 	bl	b8f44 <__aeabi_dcmpeq>
   b764c:	2800      	cmp	r0, #0
   b764e:	d13d      	bne.n	b76cc <pow+0xdc>
   b7650:	ec45 4b10 	vmov	d0, r4, r5
   b7654:	f000 ff10 	bl	b8478 <finite>
   b7658:	b138      	cbz	r0, b766a <pow+0x7a>
   b765a:	4620      	mov	r0, r4
   b765c:	4629      	mov	r1, r5
   b765e:	2200      	movs	r2, #0
   b7660:	2300      	movs	r3, #0
   b7662:	f001 fc79 	bl	b8f58 <__aeabi_dcmplt>
   b7666:	2800      	cmp	r0, #0
   b7668:	d15c      	bne.n	b7724 <pow+0x134>
   b766a:	eeb0 0a48 	vmov.f32	s0, s16
   b766e:	eef0 0a68 	vmov.f32	s1, s17
   b7672:	ecbd 8b02 	vpop	{d8}
   b7676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7678:	eeb0 0a48 	vmov.f32	s0, s16
   b767c:	eef0 0a68 	vmov.f32	s1, s17
   b7680:	f000 fefa 	bl	b8478 <finite>
   b7684:	b358      	cbz	r0, b76de <pow+0xee>
   b7686:	ec51 0b18 	vmov	r0, r1, d8
   b768a:	2200      	movs	r2, #0
   b768c:	2300      	movs	r3, #0
   b768e:	f001 fc59 	bl	b8f44 <__aeabi_dcmpeq>
   b7692:	2800      	cmp	r0, #0
   b7694:	d0e9      	beq.n	b766a <pow+0x7a>
   b7696:	ec47 6b10 	vmov	d0, r6, r7
   b769a:	f000 feed 	bl	b8478 <finite>
   b769e:	2800      	cmp	r0, #0
   b76a0:	d0e3      	beq.n	b766a <pow+0x7a>
   b76a2:	ec45 4b10 	vmov	d0, r4, r5
   b76a6:	f000 fee7 	bl	b8478 <finite>
   b76aa:	2800      	cmp	r0, #0
   b76ac:	d0dd      	beq.n	b766a <pow+0x7a>
   b76ae:	f7fe faaf 	bl	b5c10 <__errno>
   b76b2:	2322      	movs	r3, #34	; 0x22
   b76b4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b7770 <pow+0x180>
   b76b8:	6003      	str	r3, [r0, #0]
   b76ba:	e7d6      	b.n	b766a <pow+0x7a>
   b76bc:	4620      	mov	r0, r4
   b76be:	4629      	mov	r1, r5
   b76c0:	2200      	movs	r2, #0
   b76c2:	2300      	movs	r3, #0
   b76c4:	f001 fc3e 	bl	b8f44 <__aeabi_dcmpeq>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d0ce      	beq.n	b766a <pow+0x7a>
   b76cc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b7778 <pow+0x188>
   b76d0:	eeb0 0a48 	vmov.f32	s0, s16
   b76d4:	eef0 0a68 	vmov.f32	s1, s17
   b76d8:	ecbd 8b02 	vpop	{d8}
   b76dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b76de:	ec47 6b10 	vmov	d0, r6, r7
   b76e2:	f000 fec9 	bl	b8478 <finite>
   b76e6:	2800      	cmp	r0, #0
   b76e8:	d0cd      	beq.n	b7686 <pow+0x96>
   b76ea:	ec45 4b10 	vmov	d0, r4, r5
   b76ee:	f000 fec3 	bl	b8478 <finite>
   b76f2:	2800      	cmp	r0, #0
   b76f4:	d0c7      	beq.n	b7686 <pow+0x96>
   b76f6:	ec53 2b18 	vmov	r2, r3, d8
   b76fa:	ee18 0a10 	vmov	r0, s16
   b76fe:	4619      	mov	r1, r3
   b7700:	f001 fc52 	bl	b8fa8 <__aeabi_dcmpun>
   b7704:	bb20      	cbnz	r0, b7750 <pow+0x160>
   b7706:	f7fe fa83 	bl	b5c10 <__errno>
   b770a:	4603      	mov	r3, r0
   b770c:	2222      	movs	r2, #34	; 0x22
   b770e:	601a      	str	r2, [r3, #0]
   b7710:	4630      	mov	r0, r6
   b7712:	4639      	mov	r1, r7
   b7714:	2200      	movs	r2, #0
   b7716:	2300      	movs	r3, #0
   b7718:	f001 fc1e 	bl	b8f58 <__aeabi_dcmplt>
   b771c:	b948      	cbnz	r0, b7732 <pow+0x142>
   b771e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b7780 <pow+0x190>
   b7722:	e7a2      	b.n	b766a <pow+0x7a>
   b7724:	f7fe fa74 	bl	b5c10 <__errno>
   b7728:	2321      	movs	r3, #33	; 0x21
   b772a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b7788 <pow+0x198>
   b772e:	6003      	str	r3, [r0, #0]
   b7730:	e79b      	b.n	b766a <pow+0x7a>
   b7732:	ec45 4b10 	vmov	d0, r4, r5
   b7736:	f000 feb3 	bl	b84a0 <rint>
   b773a:	4622      	mov	r2, r4
   b773c:	ec51 0b10 	vmov	r0, r1, d0
   b7740:	462b      	mov	r3, r5
   b7742:	f001 fbff 	bl	b8f44 <__aeabi_dcmpeq>
   b7746:	2800      	cmp	r0, #0
   b7748:	d1e9      	bne.n	b771e <pow+0x12e>
   b774a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b7788 <pow+0x198>
   b774e:	e78c      	b.n	b766a <pow+0x7a>
   b7750:	f7fe fa5e 	bl	b5c10 <__errno>
   b7754:	2200      	movs	r2, #0
   b7756:	2300      	movs	r3, #0
   b7758:	2121      	movs	r1, #33	; 0x21
   b775a:	6001      	str	r1, [r0, #0]
   b775c:	4610      	mov	r0, r2
   b775e:	4619      	mov	r1, r3
   b7760:	f001 fab2 	bl	b8cc8 <__aeabi_ddiv>
   b7764:	ec41 0b18 	vmov	d8, r0, r1
   b7768:	e77f      	b.n	b766a <pow+0x7a>
   b776a:	bf00      	nop
   b776c:	f3af 8000 	nop.w
	...
   b777c:	3ff00000 	.word	0x3ff00000
   b7780:	00000000 	.word	0x00000000
   b7784:	7ff00000 	.word	0x7ff00000
   b7788:	00000000 	.word	0x00000000
   b778c:	fff00000 	.word	0xfff00000
   b7790:	2003e4c0 	.word	0x2003e4c0
   b7794:	00000000 	.word	0x00000000

000b7798 <__ieee754_pow>:
   b7798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b779c:	ec57 6b11 	vmov	r6, r7, d1
   b77a0:	ed2d 8b0c 	vpush	{d8-d13}
   b77a4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b77a8:	ea5a 0206 	orrs.w	r2, sl, r6
   b77ac:	b087      	sub	sp, #28
   b77ae:	d03d      	beq.n	b782c <__ieee754_pow+0x94>
   b77b0:	ec55 4b10 	vmov	r4, r5, d0
   b77b4:	4972      	ldr	r1, [pc, #456]	; (b7980 <__ieee754_pow+0x1e8>)
   b77b6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b77ba:	4588      	cmp	r8, r1
   b77bc:	ee10 2a10 	vmov	r2, s0
   b77c0:	46a9      	mov	r9, r5
   b77c2:	dc2c      	bgt.n	b781e <__ieee754_pow+0x86>
   b77c4:	ee11 3a10 	vmov	r3, s2
   b77c8:	46bb      	mov	fp, r7
   b77ca:	d036      	beq.n	b783a <__ieee754_pow+0xa2>
   b77cc:	458a      	cmp	sl, r1
   b77ce:	dc26      	bgt.n	b781e <__ieee754_pow+0x86>
   b77d0:	496b      	ldr	r1, [pc, #428]	; (b7980 <__ieee754_pow+0x1e8>)
   b77d2:	458a      	cmp	sl, r1
   b77d4:	d021      	beq.n	b781a <__ieee754_pow+0x82>
   b77d6:	f1b9 0f00 	cmp.w	r9, #0
   b77da:	db39      	blt.n	b7850 <__ieee754_pow+0xb8>
   b77dc:	2100      	movs	r1, #0
   b77de:	9100      	str	r1, [sp, #0]
   b77e0:	2b00      	cmp	r3, #0
   b77e2:	d151      	bne.n	b7888 <__ieee754_pow+0xf0>
   b77e4:	4b66      	ldr	r3, [pc, #408]	; (b7980 <__ieee754_pow+0x1e8>)
   b77e6:	459a      	cmp	sl, r3
   b77e8:	f000 80a2 	beq.w	b7930 <__ieee754_pow+0x198>
   b77ec:	4b65      	ldr	r3, [pc, #404]	; (b7984 <__ieee754_pow+0x1ec>)
   b77ee:	459a      	cmp	sl, r3
   b77f0:	f000 80b0 	beq.w	b7954 <__ieee754_pow+0x1bc>
   b77f4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b77f8:	f000 84c0 	beq.w	b817c <__ieee754_pow+0x9e4>
   b77fc:	4b62      	ldr	r3, [pc, #392]	; (b7988 <__ieee754_pow+0x1f0>)
   b77fe:	459b      	cmp	fp, r3
   b7800:	d142      	bne.n	b7888 <__ieee754_pow+0xf0>
   b7802:	f1b9 0f00 	cmp.w	r9, #0
   b7806:	db3f      	blt.n	b7888 <__ieee754_pow+0xf0>
   b7808:	ec45 4b10 	vmov	d0, r4, r5
   b780c:	b007      	add	sp, #28
   b780e:	ecbd 8b0c 	vpop	{d8-d13}
   b7812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7816:	f000 bd59 	b.w	b82cc <__ieee754_sqrt>
   b781a:	2b00      	cmp	r3, #0
   b781c:	d0db      	beq.n	b77d6 <__ieee754_pow+0x3e>
   b781e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7822:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7826:	ea58 0302 	orrs.w	r3, r8, r2
   b782a:	d109      	bne.n	b7840 <__ieee754_pow+0xa8>
   b782c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b7970 <__ieee754_pow+0x1d8>
   b7830:	b007      	add	sp, #28
   b7832:	ecbd 8b0c 	vpop	{d8-d13}
   b7836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b783a:	b90c      	cbnz	r4, b7840 <__ieee754_pow+0xa8>
   b783c:	45c2      	cmp	sl, r8
   b783e:	ddc7      	ble.n	b77d0 <__ieee754_pow+0x38>
   b7840:	4852      	ldr	r0, [pc, #328]	; (b798c <__ieee754_pow+0x1f4>)
   b7842:	b007      	add	sp, #28
   b7844:	ecbd 8b0c 	vpop	{d8-d13}
   b7848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b784c:	f000 be20 	b.w	b8490 <nan>
   b7850:	494f      	ldr	r1, [pc, #316]	; (b7990 <__ieee754_pow+0x1f8>)
   b7852:	458a      	cmp	sl, r1
   b7854:	f300 8085 	bgt.w	b7962 <__ieee754_pow+0x1ca>
   b7858:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b785c:	458a      	cmp	sl, r1
   b785e:	dd0f      	ble.n	b7880 <__ieee754_pow+0xe8>
   b7860:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7864:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7868:	2914      	cmp	r1, #20
   b786a:	f340 849b 	ble.w	b81a4 <__ieee754_pow+0xa0c>
   b786e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b7872:	fa23 f001 	lsr.w	r0, r3, r1
   b7876:	fa00 f101 	lsl.w	r1, r0, r1
   b787a:	4299      	cmp	r1, r3
   b787c:	f000 84ed 	beq.w	b825a <__ieee754_pow+0xac2>
   b7880:	2100      	movs	r1, #0
   b7882:	9100      	str	r1, [sp, #0]
   b7884:	2b00      	cmp	r3, #0
   b7886:	d0b1      	beq.n	b77ec <__ieee754_pow+0x54>
   b7888:	ec45 4b10 	vmov	d0, r4, r5
   b788c:	9202      	str	r2, [sp, #8]
   b788e:	f000 fde9 	bl	b8464 <fabs>
   b7892:	9a02      	ldr	r2, [sp, #8]
   b7894:	bb5a      	cbnz	r2, b78ee <__ieee754_pow+0x156>
   b7896:	f1b8 0f00 	cmp.w	r8, #0
   b789a:	d004      	beq.n	b78a6 <__ieee754_pow+0x10e>
   b789c:	4b39      	ldr	r3, [pc, #228]	; (b7984 <__ieee754_pow+0x1ec>)
   b789e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b78a2:	429a      	cmp	r2, r3
   b78a4:	d123      	bne.n	b78ee <__ieee754_pow+0x156>
   b78a6:	f1bb 0f00 	cmp.w	fp, #0
   b78aa:	da07      	bge.n	b78bc <__ieee754_pow+0x124>
   b78ac:	ec53 2b10 	vmov	r2, r3, d0
   b78b0:	4934      	ldr	r1, [pc, #208]	; (b7984 <__ieee754_pow+0x1ec>)
   b78b2:	2000      	movs	r0, #0
   b78b4:	f001 fa08 	bl	b8cc8 <__aeabi_ddiv>
   b78b8:	ec41 0b10 	vmov	d0, r0, r1
   b78bc:	f1b9 0f00 	cmp.w	r9, #0
   b78c0:	dab6      	bge.n	b7830 <__ieee754_pow+0x98>
   b78c2:	9b00      	ldr	r3, [sp, #0]
   b78c4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b78c8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b78cc:	ea58 0303 	orrs.w	r3, r8, r3
   b78d0:	f040 848d 	bne.w	b81ee <__ieee754_pow+0xa56>
   b78d4:	ec53 2b10 	vmov	r2, r3, d0
   b78d8:	4610      	mov	r0, r2
   b78da:	4619      	mov	r1, r3
   b78dc:	f000 ff12 	bl	b8704 <__aeabi_dsub>
   b78e0:	4602      	mov	r2, r0
   b78e2:	460b      	mov	r3, r1
   b78e4:	f001 f9f0 	bl	b8cc8 <__aeabi_ddiv>
   b78e8:	ec41 0b10 	vmov	d0, r0, r1
   b78ec:	e7a0      	b.n	b7830 <__ieee754_pow+0x98>
   b78ee:	9a00      	ldr	r2, [sp, #0]
   b78f0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b78f4:	3b01      	subs	r3, #1
   b78f6:	9304      	str	r3, [sp, #16]
   b78f8:	4313      	orrs	r3, r2
   b78fa:	d035      	beq.n	b7968 <__ieee754_pow+0x1d0>
   b78fc:	4b25      	ldr	r3, [pc, #148]	; (b7994 <__ieee754_pow+0x1fc>)
   b78fe:	459a      	cmp	sl, r3
   b7900:	dd4c      	ble.n	b799c <__ieee754_pow+0x204>
   b7902:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b7906:	459a      	cmp	sl, r3
   b7908:	4b23      	ldr	r3, [pc, #140]	; (b7998 <__ieee754_pow+0x200>)
   b790a:	f340 83db 	ble.w	b80c4 <__ieee754_pow+0x92c>
   b790e:	4598      	cmp	r8, r3
   b7910:	f340 8360 	ble.w	b7fd4 <__ieee754_pow+0x83c>
   b7914:	f1bb 0f00 	cmp.w	fp, #0
   b7918:	f340 8360 	ble.w	b7fdc <__ieee754_pow+0x844>
   b791c:	a316      	add	r3, pc, #88	; (adr r3, b7978 <__ieee754_pow+0x1e0>)
   b791e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7922:	4610      	mov	r0, r2
   b7924:	4619      	mov	r1, r3
   b7926:	f001 f8a5 	bl	b8a74 <__aeabi_dmul>
   b792a:	ec41 0b10 	vmov	d0, r0, r1
   b792e:	e77f      	b.n	b7830 <__ieee754_pow+0x98>
   b7930:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b7934:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b7938:	4313      	orrs	r3, r2
   b793a:	f43f af77 	beq.w	b782c <__ieee754_pow+0x94>
   b793e:	4b16      	ldr	r3, [pc, #88]	; (b7998 <__ieee754_pow+0x200>)
   b7940:	4598      	cmp	r8, r3
   b7942:	f340 837a 	ble.w	b803a <__ieee754_pow+0x8a2>
   b7946:	f1bb 0f00 	cmp.w	fp, #0
   b794a:	f2c0 8347 	blt.w	b7fdc <__ieee754_pow+0x844>
   b794e:	ec47 6b10 	vmov	d0, r6, r7
   b7952:	e76d      	b.n	b7830 <__ieee754_pow+0x98>
   b7954:	f1bb 0f00 	cmp.w	fp, #0
   b7958:	f2c0 841a 	blt.w	b8190 <__ieee754_pow+0x9f8>
   b795c:	ec45 4b10 	vmov	d0, r4, r5
   b7960:	e766      	b.n	b7830 <__ieee754_pow+0x98>
   b7962:	2102      	movs	r1, #2
   b7964:	9100      	str	r1, [sp, #0]
   b7966:	e73b      	b.n	b77e0 <__ieee754_pow+0x48>
   b7968:	4622      	mov	r2, r4
   b796a:	462b      	mov	r3, r5
   b796c:	e7b4      	b.n	b78d8 <__ieee754_pow+0x140>
   b796e:	bf00      	nop
   b7970:	00000000 	.word	0x00000000
   b7974:	3ff00000 	.word	0x3ff00000
   b7978:	8800759c 	.word	0x8800759c
   b797c:	7e37e43c 	.word	0x7e37e43c
   b7980:	7ff00000 	.word	0x7ff00000
   b7984:	3ff00000 	.word	0x3ff00000
   b7988:	3fe00000 	.word	0x3fe00000
   b798c:	000b9b4c 	.word	0x000b9b4c
   b7990:	433fffff 	.word	0x433fffff
   b7994:	41e00000 	.word	0x41e00000
   b7998:	3fefffff 	.word	0x3fefffff
   b799c:	4be4      	ldr	r3, [pc, #912]	; (b7d30 <__ieee754_pow+0x598>)
   b799e:	ea09 0303 	and.w	r3, r9, r3
   b79a2:	2200      	movs	r2, #0
   b79a4:	b953      	cbnz	r3, b79bc <__ieee754_pow+0x224>
   b79a6:	ec51 0b10 	vmov	r0, r1, d0
   b79aa:	4be2      	ldr	r3, [pc, #904]	; (b7d34 <__ieee754_pow+0x59c>)
   b79ac:	f001 f862 	bl	b8a74 <__aeabi_dmul>
   b79b0:	ec41 0b10 	vmov	d0, r0, r1
   b79b4:	ee10 8a90 	vmov	r8, s1
   b79b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b79bc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b79c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b79c4:	189a      	adds	r2, r3, r2
   b79c6:	4bdc      	ldr	r3, [pc, #880]	; (b7d38 <__ieee754_pow+0x5a0>)
   b79c8:	9205      	str	r2, [sp, #20]
   b79ca:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b79ce:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b79d2:	4598      	cmp	r8, r3
   b79d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b79d8:	dd07      	ble.n	b79ea <__ieee754_pow+0x252>
   b79da:	4bd8      	ldr	r3, [pc, #864]	; (b7d3c <__ieee754_pow+0x5a4>)
   b79dc:	4598      	cmp	r8, r3
   b79de:	f340 8414 	ble.w	b820a <__ieee754_pow+0xa72>
   b79e2:	3201      	adds	r2, #1
   b79e4:	9205      	str	r2, [sp, #20]
   b79e6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b79ea:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b7cd0 <__ieee754_pow+0x538>
   b79ee:	ed9f 7bba 	vldr	d7, [pc, #744]	; b7cd8 <__ieee754_pow+0x540>
   b79f2:	ec53 2b16 	vmov	r2, r3, d6
   b79f6:	eeb0 ca47 	vmov.f32	s24, s14
   b79fa:	eef0 ca67 	vmov.f32	s25, s15
   b79fe:	2500      	movs	r5, #0
   b7a00:	eeb0 da47 	vmov.f32	s26, s14
   b7a04:	eef0 da67 	vmov.f32	s27, s15
   b7a08:	ec5b ab10 	vmov	sl, fp, d0
   b7a0c:	46a3      	mov	fp, r4
   b7a0e:	4650      	mov	r0, sl
   b7a10:	4659      	mov	r1, fp
   b7a12:	ec43 2b1a 	vmov	d10, r2, r3
   b7a16:	f000 fe75 	bl	b8704 <__aeabi_dsub>
   b7a1a:	ec53 2b1a 	vmov	r2, r3, d10
   b7a1e:	4680      	mov	r8, r0
   b7a20:	4689      	mov	r9, r1
   b7a22:	4650      	mov	r0, sl
   b7a24:	4659      	mov	r1, fp
   b7a26:	f000 fe6f 	bl	b8708 <__adddf3>
   b7a2a:	4602      	mov	r2, r0
   b7a2c:	460b      	mov	r3, r1
   b7a2e:	2000      	movs	r0, #0
   b7a30:	49c3      	ldr	r1, [pc, #780]	; (b7d40 <__ieee754_pow+0x5a8>)
   b7a32:	f001 f949 	bl	b8cc8 <__aeabi_ddiv>
   b7a36:	ec41 0b1b 	vmov	d11, r0, r1
   b7a3a:	4640      	mov	r0, r8
   b7a3c:	ec53 2b1b 	vmov	r2, r3, d11
   b7a40:	4649      	mov	r1, r9
   b7a42:	f001 f817 	bl	b8a74 <__aeabi_dmul>
   b7a46:	ec41 0b18 	vmov	d8, r0, r1
   b7a4a:	460a      	mov	r2, r1
   b7a4c:	4601      	mov	r1, r0
   b7a4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7a52:	2100      	movs	r1, #0
   b7a54:	9102      	str	r1, [sp, #8]
   b7a56:	1064      	asrs	r4, r4, #1
   b7a58:	ec4b ab19 	vmov	d9, sl, fp
   b7a5c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b7a60:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b7a64:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b7a68:	2000      	movs	r0, #0
   b7a6a:	1959      	adds	r1, r3, r5
   b7a6c:	4604      	mov	r4, r0
   b7a6e:	460d      	mov	r5, r1
   b7a70:	4602      	mov	r2, r0
   b7a72:	460b      	mov	r3, r1
   b7a74:	4650      	mov	r0, sl
   b7a76:	4659      	mov	r1, fp
   b7a78:	f000 fffc 	bl	b8a74 <__aeabi_dmul>
   b7a7c:	4602      	mov	r2, r0
   b7a7e:	460b      	mov	r3, r1
   b7a80:	4640      	mov	r0, r8
   b7a82:	4649      	mov	r1, r9
   b7a84:	f000 fe3e 	bl	b8704 <__aeabi_dsub>
   b7a88:	ec53 2b1a 	vmov	r2, r3, d10
   b7a8c:	4680      	mov	r8, r0
   b7a8e:	4689      	mov	r9, r1
   b7a90:	4620      	mov	r0, r4
   b7a92:	4629      	mov	r1, r5
   b7a94:	f000 fe36 	bl	b8704 <__aeabi_dsub>
   b7a98:	4602      	mov	r2, r0
   b7a9a:	460b      	mov	r3, r1
   b7a9c:	ec51 0b19 	vmov	r0, r1, d9
   b7aa0:	f000 fe30 	bl	b8704 <__aeabi_dsub>
   b7aa4:	4652      	mov	r2, sl
   b7aa6:	465b      	mov	r3, fp
   b7aa8:	f000 ffe4 	bl	b8a74 <__aeabi_dmul>
   b7aac:	4602      	mov	r2, r0
   b7aae:	460b      	mov	r3, r1
   b7ab0:	4640      	mov	r0, r8
   b7ab2:	4649      	mov	r1, r9
   b7ab4:	f000 fe26 	bl	b8704 <__aeabi_dsub>
   b7ab8:	ec53 2b1b 	vmov	r2, r3, d11
   b7abc:	f000 ffda 	bl	b8a74 <__aeabi_dmul>
   b7ac0:	ec53 2b18 	vmov	r2, r3, d8
   b7ac4:	ec41 0b19 	vmov	d9, r0, r1
   b7ac8:	ec51 0b18 	vmov	r0, r1, d8
   b7acc:	f000 ffd2 	bl	b8a74 <__aeabi_dmul>
   b7ad0:	a383      	add	r3, pc, #524	; (adr r3, b7ce0 <__ieee754_pow+0x548>)
   b7ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ad6:	4604      	mov	r4, r0
   b7ad8:	460d      	mov	r5, r1
   b7ada:	f000 ffcb 	bl	b8a74 <__aeabi_dmul>
   b7ade:	a382      	add	r3, pc, #520	; (adr r3, b7ce8 <__ieee754_pow+0x550>)
   b7ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ae4:	f000 fe10 	bl	b8708 <__adddf3>
   b7ae8:	4622      	mov	r2, r4
   b7aea:	462b      	mov	r3, r5
   b7aec:	f000 ffc2 	bl	b8a74 <__aeabi_dmul>
   b7af0:	a37f      	add	r3, pc, #508	; (adr r3, b7cf0 <__ieee754_pow+0x558>)
   b7af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7af6:	f000 fe07 	bl	b8708 <__adddf3>
   b7afa:	4622      	mov	r2, r4
   b7afc:	462b      	mov	r3, r5
   b7afe:	f000 ffb9 	bl	b8a74 <__aeabi_dmul>
   b7b02:	a37d      	add	r3, pc, #500	; (adr r3, b7cf8 <__ieee754_pow+0x560>)
   b7b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b08:	f000 fdfe 	bl	b8708 <__adddf3>
   b7b0c:	4622      	mov	r2, r4
   b7b0e:	462b      	mov	r3, r5
   b7b10:	f000 ffb0 	bl	b8a74 <__aeabi_dmul>
   b7b14:	a37a      	add	r3, pc, #488	; (adr r3, b7d00 <__ieee754_pow+0x568>)
   b7b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b1a:	f000 fdf5 	bl	b8708 <__adddf3>
   b7b1e:	4622      	mov	r2, r4
   b7b20:	462b      	mov	r3, r5
   b7b22:	f000 ffa7 	bl	b8a74 <__aeabi_dmul>
   b7b26:	a378      	add	r3, pc, #480	; (adr r3, b7d08 <__ieee754_pow+0x570>)
   b7b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b2c:	f000 fdec 	bl	b8708 <__adddf3>
   b7b30:	4622      	mov	r2, r4
   b7b32:	4680      	mov	r8, r0
   b7b34:	4689      	mov	r9, r1
   b7b36:	462b      	mov	r3, r5
   b7b38:	4620      	mov	r0, r4
   b7b3a:	4629      	mov	r1, r5
   b7b3c:	f000 ff9a 	bl	b8a74 <__aeabi_dmul>
   b7b40:	4602      	mov	r2, r0
   b7b42:	460b      	mov	r3, r1
   b7b44:	4640      	mov	r0, r8
   b7b46:	4649      	mov	r1, r9
   b7b48:	f000 ff94 	bl	b8a74 <__aeabi_dmul>
   b7b4c:	4652      	mov	r2, sl
   b7b4e:	4604      	mov	r4, r0
   b7b50:	460d      	mov	r5, r1
   b7b52:	465b      	mov	r3, fp
   b7b54:	ec51 0b18 	vmov	r0, r1, d8
   b7b58:	f000 fdd6 	bl	b8708 <__adddf3>
   b7b5c:	ec53 2b19 	vmov	r2, r3, d9
   b7b60:	f000 ff88 	bl	b8a74 <__aeabi_dmul>
   b7b64:	4622      	mov	r2, r4
   b7b66:	462b      	mov	r3, r5
   b7b68:	f000 fdce 	bl	b8708 <__adddf3>
   b7b6c:	4652      	mov	r2, sl
   b7b6e:	4680      	mov	r8, r0
   b7b70:	4689      	mov	r9, r1
   b7b72:	465b      	mov	r3, fp
   b7b74:	4650      	mov	r0, sl
   b7b76:	4659      	mov	r1, fp
   b7b78:	f000 ff7c 	bl	b8a74 <__aeabi_dmul>
   b7b7c:	4602      	mov	r2, r0
   b7b7e:	460b      	mov	r3, r1
   b7b80:	ec43 2b1a 	vmov	d10, r2, r3
   b7b84:	4b6f      	ldr	r3, [pc, #444]	; (b7d44 <__ieee754_pow+0x5ac>)
   b7b86:	2200      	movs	r2, #0
   b7b88:	f000 fdbe 	bl	b8708 <__adddf3>
   b7b8c:	4642      	mov	r2, r8
   b7b8e:	464b      	mov	r3, r9
   b7b90:	f000 fdba 	bl	b8708 <__adddf3>
   b7b94:	2400      	movs	r4, #0
   b7b96:	460d      	mov	r5, r1
   b7b98:	4622      	mov	r2, r4
   b7b9a:	462b      	mov	r3, r5
   b7b9c:	4650      	mov	r0, sl
   b7b9e:	4659      	mov	r1, fp
   b7ba0:	f000 ff68 	bl	b8a74 <__aeabi_dmul>
   b7ba4:	4b67      	ldr	r3, [pc, #412]	; (b7d44 <__ieee754_pow+0x5ac>)
   b7ba6:	4682      	mov	sl, r0
   b7ba8:	468b      	mov	fp, r1
   b7baa:	2200      	movs	r2, #0
   b7bac:	4620      	mov	r0, r4
   b7bae:	4629      	mov	r1, r5
   b7bb0:	f000 fda8 	bl	b8704 <__aeabi_dsub>
   b7bb4:	ec53 2b1a 	vmov	r2, r3, d10
   b7bb8:	f000 fda4 	bl	b8704 <__aeabi_dsub>
   b7bbc:	4602      	mov	r2, r0
   b7bbe:	460b      	mov	r3, r1
   b7bc0:	4640      	mov	r0, r8
   b7bc2:	4649      	mov	r1, r9
   b7bc4:	f000 fd9e 	bl	b8704 <__aeabi_dsub>
   b7bc8:	ec53 2b18 	vmov	r2, r3, d8
   b7bcc:	f000 ff52 	bl	b8a74 <__aeabi_dmul>
   b7bd0:	4622      	mov	r2, r4
   b7bd2:	462b      	mov	r3, r5
   b7bd4:	4604      	mov	r4, r0
   b7bd6:	460d      	mov	r5, r1
   b7bd8:	ec51 0b19 	vmov	r0, r1, d9
   b7bdc:	f000 ff4a 	bl	b8a74 <__aeabi_dmul>
   b7be0:	4602      	mov	r2, r0
   b7be2:	460b      	mov	r3, r1
   b7be4:	4620      	mov	r0, r4
   b7be6:	4629      	mov	r1, r5
   b7be8:	f000 fd8e 	bl	b8708 <__adddf3>
   b7bec:	4680      	mov	r8, r0
   b7bee:	4689      	mov	r9, r1
   b7bf0:	4642      	mov	r2, r8
   b7bf2:	464b      	mov	r3, r9
   b7bf4:	4650      	mov	r0, sl
   b7bf6:	4659      	mov	r1, fp
   b7bf8:	f000 fd86 	bl	b8708 <__adddf3>
   b7bfc:	a344      	add	r3, pc, #272	; (adr r3, b7d10 <__ieee754_pow+0x578>)
   b7bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7c02:	2000      	movs	r0, #0
   b7c04:	4604      	mov	r4, r0
   b7c06:	460d      	mov	r5, r1
   b7c08:	f000 ff34 	bl	b8a74 <__aeabi_dmul>
   b7c0c:	4652      	mov	r2, sl
   b7c0e:	ec41 0b19 	vmov	d9, r0, r1
   b7c12:	465b      	mov	r3, fp
   b7c14:	4620      	mov	r0, r4
   b7c16:	4629      	mov	r1, r5
   b7c18:	f000 fd74 	bl	b8704 <__aeabi_dsub>
   b7c1c:	4602      	mov	r2, r0
   b7c1e:	460b      	mov	r3, r1
   b7c20:	4640      	mov	r0, r8
   b7c22:	4649      	mov	r1, r9
   b7c24:	f000 fd6e 	bl	b8704 <__aeabi_dsub>
   b7c28:	a33b      	add	r3, pc, #236	; (adr r3, b7d18 <__ieee754_pow+0x580>)
   b7c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7c2e:	f000 ff21 	bl	b8a74 <__aeabi_dmul>
   b7c32:	4602      	mov	r2, r0
   b7c34:	460b      	mov	r3, r1
   b7c36:	4620      	mov	r0, r4
   b7c38:	4629      	mov	r1, r5
   b7c3a:	4614      	mov	r4, r2
   b7c3c:	461d      	mov	r5, r3
   b7c3e:	a338      	add	r3, pc, #224	; (adr r3, b7d20 <__ieee754_pow+0x588>)
   b7c40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7c44:	f000 ff16 	bl	b8a74 <__aeabi_dmul>
   b7c48:	4602      	mov	r2, r0
   b7c4a:	460b      	mov	r3, r1
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	4629      	mov	r1, r5
   b7c50:	f000 fd5a 	bl	b8708 <__adddf3>
   b7c54:	ec53 2b1d 	vmov	r2, r3, d13
   b7c58:	f000 fd56 	bl	b8708 <__adddf3>
   b7c5c:	4680      	mov	r8, r0
   b7c5e:	9805      	ldr	r0, [sp, #20]
   b7c60:	4689      	mov	r9, r1
   b7c62:	f000 fe9d 	bl	b89a0 <__aeabi_i2d>
   b7c66:	4642      	mov	r2, r8
   b7c68:	4682      	mov	sl, r0
   b7c6a:	468b      	mov	fp, r1
   b7c6c:	464b      	mov	r3, r9
   b7c6e:	ec51 0b19 	vmov	r0, r1, d9
   b7c72:	f000 fd49 	bl	b8708 <__adddf3>
   b7c76:	ec53 2b1c 	vmov	r2, r3, d12
   b7c7a:	f000 fd45 	bl	b8708 <__adddf3>
   b7c7e:	4652      	mov	r2, sl
   b7c80:	465b      	mov	r3, fp
   b7c82:	f000 fd41 	bl	b8708 <__adddf3>
   b7c86:	4652      	mov	r2, sl
   b7c88:	465b      	mov	r3, fp
   b7c8a:	2000      	movs	r0, #0
   b7c8c:	4604      	mov	r4, r0
   b7c8e:	460d      	mov	r5, r1
   b7c90:	f000 fd38 	bl	b8704 <__aeabi_dsub>
   b7c94:	ec53 2b1c 	vmov	r2, r3, d12
   b7c98:	f000 fd34 	bl	b8704 <__aeabi_dsub>
   b7c9c:	ec53 2b19 	vmov	r2, r3, d9
   b7ca0:	f000 fd30 	bl	b8704 <__aeabi_dsub>
   b7ca4:	4602      	mov	r2, r0
   b7ca6:	460b      	mov	r3, r1
   b7ca8:	4640      	mov	r0, r8
   b7caa:	4649      	mov	r1, r9
   b7cac:	f000 fd2a 	bl	b8704 <__aeabi_dsub>
   b7cb0:	9b00      	ldr	r3, [sp, #0]
   b7cb2:	9a04      	ldr	r2, [sp, #16]
   b7cb4:	3b01      	subs	r3, #1
   b7cb6:	4313      	orrs	r3, r2
   b7cb8:	4682      	mov	sl, r0
   b7cba:	468b      	mov	fp, r1
   b7cbc:	f040 81b6 	bne.w	b802c <__ieee754_pow+0x894>
   b7cc0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b7d28 <__ieee754_pow+0x590>
   b7cc4:	eeb0 8a47 	vmov.f32	s16, s14
   b7cc8:	eef0 8a67 	vmov.f32	s17, s15
   b7ccc:	e03c      	b.n	b7d48 <__ieee754_pow+0x5b0>
   b7cce:	bf00      	nop
   b7cd0:	00000000 	.word	0x00000000
   b7cd4:	3ff00000 	.word	0x3ff00000
	...
   b7ce0:	4a454eef 	.word	0x4a454eef
   b7ce4:	3fca7e28 	.word	0x3fca7e28
   b7ce8:	93c9db65 	.word	0x93c9db65
   b7cec:	3fcd864a 	.word	0x3fcd864a
   b7cf0:	a91d4101 	.word	0xa91d4101
   b7cf4:	3fd17460 	.word	0x3fd17460
   b7cf8:	518f264d 	.word	0x518f264d
   b7cfc:	3fd55555 	.word	0x3fd55555
   b7d00:	db6fabff 	.word	0xdb6fabff
   b7d04:	3fdb6db6 	.word	0x3fdb6db6
   b7d08:	33333303 	.word	0x33333303
   b7d0c:	3fe33333 	.word	0x3fe33333
   b7d10:	e0000000 	.word	0xe0000000
   b7d14:	3feec709 	.word	0x3feec709
   b7d18:	dc3a03fd 	.word	0xdc3a03fd
   b7d1c:	3feec709 	.word	0x3feec709
   b7d20:	145b01f5 	.word	0x145b01f5
   b7d24:	be3e2fe0 	.word	0xbe3e2fe0
   b7d28:	00000000 	.word	0x00000000
   b7d2c:	bff00000 	.word	0xbff00000
   b7d30:	7ff00000 	.word	0x7ff00000
   b7d34:	43400000 	.word	0x43400000
   b7d38:	0003988e 	.word	0x0003988e
   b7d3c:	000bb679 	.word	0x000bb679
   b7d40:	3ff00000 	.word	0x3ff00000
   b7d44:	40080000 	.word	0x40080000
   b7d48:	2300      	movs	r3, #0
   b7d4a:	e9cd 6700 	strd	r6, r7, [sp]
   b7d4e:	9300      	str	r3, [sp, #0]
   b7d50:	e9dd 8900 	ldrd	r8, r9, [sp]
   b7d54:	4630      	mov	r0, r6
   b7d56:	4642      	mov	r2, r8
   b7d58:	464b      	mov	r3, r9
   b7d5a:	4639      	mov	r1, r7
   b7d5c:	f000 fcd2 	bl	b8704 <__aeabi_dsub>
   b7d60:	4622      	mov	r2, r4
   b7d62:	462b      	mov	r3, r5
   b7d64:	f000 fe86 	bl	b8a74 <__aeabi_dmul>
   b7d68:	4632      	mov	r2, r6
   b7d6a:	463b      	mov	r3, r7
   b7d6c:	4606      	mov	r6, r0
   b7d6e:	460f      	mov	r7, r1
   b7d70:	4650      	mov	r0, sl
   b7d72:	4659      	mov	r1, fp
   b7d74:	f000 fe7e 	bl	b8a74 <__aeabi_dmul>
   b7d78:	4602      	mov	r2, r0
   b7d7a:	460b      	mov	r3, r1
   b7d7c:	4630      	mov	r0, r6
   b7d7e:	4639      	mov	r1, r7
   b7d80:	f000 fcc2 	bl	b8708 <__adddf3>
   b7d84:	4642      	mov	r2, r8
   b7d86:	464b      	mov	r3, r9
   b7d88:	4606      	mov	r6, r0
   b7d8a:	460f      	mov	r7, r1
   b7d8c:	4620      	mov	r0, r4
   b7d8e:	4629      	mov	r1, r5
   b7d90:	f000 fe70 	bl	b8a74 <__aeabi_dmul>
   b7d94:	4604      	mov	r4, r0
   b7d96:	460d      	mov	r5, r1
   b7d98:	462b      	mov	r3, r5
   b7d9a:	4630      	mov	r0, r6
   b7d9c:	4639      	mov	r1, r7
   b7d9e:	4622      	mov	r2, r4
   b7da0:	f000 fcb2 	bl	b8708 <__adddf3>
   b7da4:	4bc2      	ldr	r3, [pc, #776]	; (b80b0 <__ieee754_pow+0x918>)
   b7da6:	4299      	cmp	r1, r3
   b7da8:	4680      	mov	r8, r0
   b7daa:	4689      	mov	r9, r1
   b7dac:	468a      	mov	sl, r1
   b7dae:	f340 8118 	ble.w	b7fe2 <__ieee754_pow+0x84a>
   b7db2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b7db6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b7dba:	4303      	orrs	r3, r0
   b7dbc:	f040 8207 	bne.w	b81ce <__ieee754_pow+0xa36>
   b7dc0:	a3a3      	add	r3, pc, #652	; (adr r3, b8050 <__ieee754_pow+0x8b8>)
   b7dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7dc6:	4630      	mov	r0, r6
   b7dc8:	4639      	mov	r1, r7
   b7dca:	f000 fc9d 	bl	b8708 <__adddf3>
   b7dce:	4602      	mov	r2, r0
   b7dd0:	460b      	mov	r3, r1
   b7dd2:	4640      	mov	r0, r8
   b7dd4:	4649      	mov	r1, r9
   b7dd6:	4690      	mov	r8, r2
   b7dd8:	4699      	mov	r9, r3
   b7dda:	4622      	mov	r2, r4
   b7ddc:	462b      	mov	r3, r5
   b7dde:	f000 fc91 	bl	b8704 <__aeabi_dsub>
   b7de2:	4602      	mov	r2, r0
   b7de4:	460b      	mov	r3, r1
   b7de6:	4640      	mov	r0, r8
   b7de8:	4649      	mov	r1, r9
   b7dea:	f001 f8d3 	bl	b8f94 <__aeabi_dcmpgt>
   b7dee:	2800      	cmp	r0, #0
   b7df0:	f040 81ed 	bne.w	b81ce <__ieee754_pow+0xa36>
   b7df4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b7df8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b7dfc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b7e00:	fa42 f303 	asr.w	r3, r2, r3
   b7e04:	4453      	add	r3, sl
   b7e06:	49ab      	ldr	r1, [pc, #684]	; (b80b4 <__ieee754_pow+0x91c>)
   b7e08:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b7e0c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b7e10:	fa41 fc02 	asr.w	ip, r1, r2
   b7e14:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b7e18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e1c:	f1c2 0214 	rsb	r2, r2, #20
   b7e20:	fa41 f202 	asr.w	r2, r1, r2
   b7e24:	2000      	movs	r0, #0
   b7e26:	ea23 010c 	bic.w	r1, r3, ip
   b7e2a:	f1ba 0f00 	cmp.w	sl, #0
   b7e2e:	9200      	str	r2, [sp, #0]
   b7e30:	460b      	mov	r3, r1
   b7e32:	4602      	mov	r2, r0
   b7e34:	da02      	bge.n	b7e3c <__ieee754_pow+0x6a4>
   b7e36:	9900      	ldr	r1, [sp, #0]
   b7e38:	4249      	negs	r1, r1
   b7e3a:	9100      	str	r1, [sp, #0]
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	4629      	mov	r1, r5
   b7e40:	f000 fc60 	bl	b8704 <__aeabi_dsub>
   b7e44:	9b00      	ldr	r3, [sp, #0]
   b7e46:	051b      	lsls	r3, r3, #20
   b7e48:	9302      	str	r3, [sp, #8]
   b7e4a:	4602      	mov	r2, r0
   b7e4c:	460b      	mov	r3, r1
   b7e4e:	4604      	mov	r4, r0
   b7e50:	460d      	mov	r5, r1
   b7e52:	4630      	mov	r0, r6
   b7e54:	4639      	mov	r1, r7
   b7e56:	f000 fc57 	bl	b8708 <__adddf3>
   b7e5a:	4689      	mov	r9, r1
   b7e5c:	f04f 0800 	mov.w	r8, #0
   b7e60:	a37d      	add	r3, pc, #500	; (adr r3, b8058 <__ieee754_pow+0x8c0>)
   b7e62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e66:	4640      	mov	r0, r8
   b7e68:	4649      	mov	r1, r9
   b7e6a:	f000 fe03 	bl	b8a74 <__aeabi_dmul>
   b7e6e:	4622      	mov	r2, r4
   b7e70:	462b      	mov	r3, r5
   b7e72:	4682      	mov	sl, r0
   b7e74:	468b      	mov	fp, r1
   b7e76:	4640      	mov	r0, r8
   b7e78:	4649      	mov	r1, r9
   b7e7a:	f000 fc43 	bl	b8704 <__aeabi_dsub>
   b7e7e:	4602      	mov	r2, r0
   b7e80:	460b      	mov	r3, r1
   b7e82:	4630      	mov	r0, r6
   b7e84:	4639      	mov	r1, r7
   b7e86:	f000 fc3d 	bl	b8704 <__aeabi_dsub>
   b7e8a:	a375      	add	r3, pc, #468	; (adr r3, b8060 <__ieee754_pow+0x8c8>)
   b7e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e90:	f000 fdf0 	bl	b8a74 <__aeabi_dmul>
   b7e94:	a374      	add	r3, pc, #464	; (adr r3, b8068 <__ieee754_pow+0x8d0>)
   b7e96:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e9a:	4604      	mov	r4, r0
   b7e9c:	460d      	mov	r5, r1
   b7e9e:	4640      	mov	r0, r8
   b7ea0:	4649      	mov	r1, r9
   b7ea2:	f000 fde7 	bl	b8a74 <__aeabi_dmul>
   b7ea6:	4602      	mov	r2, r0
   b7ea8:	460b      	mov	r3, r1
   b7eaa:	4620      	mov	r0, r4
   b7eac:	4629      	mov	r1, r5
   b7eae:	f000 fc2b 	bl	b8708 <__adddf3>
   b7eb2:	4606      	mov	r6, r0
   b7eb4:	460f      	mov	r7, r1
   b7eb6:	4632      	mov	r2, r6
   b7eb8:	463b      	mov	r3, r7
   b7eba:	4650      	mov	r0, sl
   b7ebc:	4659      	mov	r1, fp
   b7ebe:	f000 fc23 	bl	b8708 <__adddf3>
   b7ec2:	4652      	mov	r2, sl
   b7ec4:	465b      	mov	r3, fp
   b7ec6:	4604      	mov	r4, r0
   b7ec8:	460d      	mov	r5, r1
   b7eca:	f000 fc1b 	bl	b8704 <__aeabi_dsub>
   b7ece:	4602      	mov	r2, r0
   b7ed0:	460b      	mov	r3, r1
   b7ed2:	4630      	mov	r0, r6
   b7ed4:	4639      	mov	r1, r7
   b7ed6:	f000 fc15 	bl	b8704 <__aeabi_dsub>
   b7eda:	4622      	mov	r2, r4
   b7edc:	4680      	mov	r8, r0
   b7ede:	4689      	mov	r9, r1
   b7ee0:	462b      	mov	r3, r5
   b7ee2:	4620      	mov	r0, r4
   b7ee4:	4629      	mov	r1, r5
   b7ee6:	f000 fdc5 	bl	b8a74 <__aeabi_dmul>
   b7eea:	a361      	add	r3, pc, #388	; (adr r3, b8070 <__ieee754_pow+0x8d8>)
   b7eec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ef0:	4606      	mov	r6, r0
   b7ef2:	460f      	mov	r7, r1
   b7ef4:	f000 fdbe 	bl	b8a74 <__aeabi_dmul>
   b7ef8:	a35f      	add	r3, pc, #380	; (adr r3, b8078 <__ieee754_pow+0x8e0>)
   b7efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7efe:	f000 fc01 	bl	b8704 <__aeabi_dsub>
   b7f02:	4632      	mov	r2, r6
   b7f04:	463b      	mov	r3, r7
   b7f06:	f000 fdb5 	bl	b8a74 <__aeabi_dmul>
   b7f0a:	a35d      	add	r3, pc, #372	; (adr r3, b8080 <__ieee754_pow+0x8e8>)
   b7f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f10:	f000 fbfa 	bl	b8708 <__adddf3>
   b7f14:	4632      	mov	r2, r6
   b7f16:	463b      	mov	r3, r7
   b7f18:	f000 fdac 	bl	b8a74 <__aeabi_dmul>
   b7f1c:	a35a      	add	r3, pc, #360	; (adr r3, b8088 <__ieee754_pow+0x8f0>)
   b7f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f22:	f000 fbef 	bl	b8704 <__aeabi_dsub>
   b7f26:	4632      	mov	r2, r6
   b7f28:	463b      	mov	r3, r7
   b7f2a:	f000 fda3 	bl	b8a74 <__aeabi_dmul>
   b7f2e:	a358      	add	r3, pc, #352	; (adr r3, b8090 <__ieee754_pow+0x8f8>)
   b7f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f34:	f000 fbe8 	bl	b8708 <__adddf3>
   b7f38:	4632      	mov	r2, r6
   b7f3a:	463b      	mov	r3, r7
   b7f3c:	f000 fd9a 	bl	b8a74 <__aeabi_dmul>
   b7f40:	4602      	mov	r2, r0
   b7f42:	460b      	mov	r3, r1
   b7f44:	4620      	mov	r0, r4
   b7f46:	4629      	mov	r1, r5
   b7f48:	f000 fbdc 	bl	b8704 <__aeabi_dsub>
   b7f4c:	4606      	mov	r6, r0
   b7f4e:	460f      	mov	r7, r1
   b7f50:	4632      	mov	r2, r6
   b7f52:	463b      	mov	r3, r7
   b7f54:	4620      	mov	r0, r4
   b7f56:	4629      	mov	r1, r5
   b7f58:	f000 fd8c 	bl	b8a74 <__aeabi_dmul>
   b7f5c:	4602      	mov	r2, r0
   b7f5e:	460b      	mov	r3, r1
   b7f60:	4630      	mov	r0, r6
   b7f62:	4639      	mov	r1, r7
   b7f64:	4616      	mov	r6, r2
   b7f66:	461f      	mov	r7, r3
   b7f68:	2200      	movs	r2, #0
   b7f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7f6e:	f000 fbc9 	bl	b8704 <__aeabi_dsub>
   b7f72:	4602      	mov	r2, r0
   b7f74:	460b      	mov	r3, r1
   b7f76:	4630      	mov	r0, r6
   b7f78:	4639      	mov	r1, r7
   b7f7a:	f000 fea5 	bl	b8cc8 <__aeabi_ddiv>
   b7f7e:	4642      	mov	r2, r8
   b7f80:	4606      	mov	r6, r0
   b7f82:	460f      	mov	r7, r1
   b7f84:	464b      	mov	r3, r9
   b7f86:	4620      	mov	r0, r4
   b7f88:	4629      	mov	r1, r5
   b7f8a:	f000 fd73 	bl	b8a74 <__aeabi_dmul>
   b7f8e:	4642      	mov	r2, r8
   b7f90:	464b      	mov	r3, r9
   b7f92:	f000 fbb9 	bl	b8708 <__adddf3>
   b7f96:	4602      	mov	r2, r0
   b7f98:	460b      	mov	r3, r1
   b7f9a:	4630      	mov	r0, r6
   b7f9c:	4639      	mov	r1, r7
   b7f9e:	f000 fbb1 	bl	b8704 <__aeabi_dsub>
   b7fa2:	4622      	mov	r2, r4
   b7fa4:	462b      	mov	r3, r5
   b7fa6:	f000 fbad 	bl	b8704 <__aeabi_dsub>
   b7faa:	4602      	mov	r2, r0
   b7fac:	460b      	mov	r3, r1
   b7fae:	2000      	movs	r0, #0
   b7fb0:	4941      	ldr	r1, [pc, #260]	; (b80b8 <__ieee754_pow+0x920>)
   b7fb2:	f000 fba7 	bl	b8704 <__aeabi_dsub>
   b7fb6:	9a02      	ldr	r2, [sp, #8]
   b7fb8:	460b      	mov	r3, r1
   b7fba:	4413      	add	r3, r2
   b7fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b7fc0:	f2c0 8143 	blt.w	b824a <__ieee754_pow+0xab2>
   b7fc4:	4619      	mov	r1, r3
   b7fc6:	ec53 2b18 	vmov	r2, r3, d8
   b7fca:	f000 fd53 	bl	b8a74 <__aeabi_dmul>
   b7fce:	ec41 0b10 	vmov	d0, r0, r1
   b7fd2:	e42d      	b.n	b7830 <__ieee754_pow+0x98>
   b7fd4:	f1bb 0f00 	cmp.w	fp, #0
   b7fd8:	f6ff aca0 	blt.w	b791c <__ieee754_pow+0x184>
   b7fdc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b8098 <__ieee754_pow+0x900>
   b7fe0:	e426      	b.n	b7830 <__ieee754_pow+0x98>
   b7fe2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b80c0 <__ieee754_pow+0x928>
   b7fe6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7fea:	4563      	cmp	r3, ip
   b7fec:	f340 80e7 	ble.w	b81be <__ieee754_pow+0xa26>
   b7ff0:	4b32      	ldr	r3, [pc, #200]	; (b80bc <__ieee754_pow+0x924>)
   b7ff2:	440b      	add	r3, r1
   b7ff4:	4303      	orrs	r3, r0
   b7ff6:	d10a      	bne.n	b800e <__ieee754_pow+0x876>
   b7ff8:	4622      	mov	r2, r4
   b7ffa:	462b      	mov	r3, r5
   b7ffc:	f000 fb82 	bl	b8704 <__aeabi_dsub>
   b8000:	4632      	mov	r2, r6
   b8002:	463b      	mov	r3, r7
   b8004:	f000 ffbc 	bl	b8f80 <__aeabi_dcmpge>
   b8008:	2800      	cmp	r0, #0
   b800a:	f43f aef3 	beq.w	b7df4 <__ieee754_pow+0x65c>
   b800e:	a324      	add	r3, pc, #144	; (adr r3, b80a0 <__ieee754_pow+0x908>)
   b8010:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8014:	ec51 0b18 	vmov	r0, r1, d8
   b8018:	f000 fd2c 	bl	b8a74 <__aeabi_dmul>
   b801c:	a320      	add	r3, pc, #128	; (adr r3, b80a0 <__ieee754_pow+0x908>)
   b801e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8022:	f000 fd27 	bl	b8a74 <__aeabi_dmul>
   b8026:	ec41 0b10 	vmov	d0, r0, r1
   b802a:	e401      	b.n	b7830 <__ieee754_pow+0x98>
   b802c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b80a8 <__ieee754_pow+0x910>
   b8030:	eeb0 8a47 	vmov.f32	s16, s14
   b8034:	eef0 8a67 	vmov.f32	s17, s15
   b8038:	e686      	b.n	b7d48 <__ieee754_pow+0x5b0>
   b803a:	f1bb 0f00 	cmp.w	fp, #0
   b803e:	dacd      	bge.n	b7fdc <__ieee754_pow+0x844>
   b8040:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b8044:	ee00 6a10 	vmov	s0, r6
   b8048:	ee00 3a90 	vmov	s1, r3
   b804c:	f7ff bbf0 	b.w	b7830 <__ieee754_pow+0x98>
   b8050:	652b82fe 	.word	0x652b82fe
   b8054:	3c971547 	.word	0x3c971547
   b8058:	00000000 	.word	0x00000000
   b805c:	3fe62e43 	.word	0x3fe62e43
   b8060:	fefa39ef 	.word	0xfefa39ef
   b8064:	3fe62e42 	.word	0x3fe62e42
   b8068:	0ca86c39 	.word	0x0ca86c39
   b806c:	be205c61 	.word	0xbe205c61
   b8070:	72bea4d0 	.word	0x72bea4d0
   b8074:	3e663769 	.word	0x3e663769
   b8078:	c5d26bf1 	.word	0xc5d26bf1
   b807c:	3ebbbd41 	.word	0x3ebbbd41
   b8080:	af25de2c 	.word	0xaf25de2c
   b8084:	3f11566a 	.word	0x3f11566a
   b8088:	16bebd93 	.word	0x16bebd93
   b808c:	3f66c16c 	.word	0x3f66c16c
   b8090:	5555553e 	.word	0x5555553e
   b8094:	3fc55555 	.word	0x3fc55555
	...
   b80a0:	c2f8f359 	.word	0xc2f8f359
   b80a4:	01a56e1f 	.word	0x01a56e1f
   b80a8:	00000000 	.word	0x00000000
   b80ac:	3ff00000 	.word	0x3ff00000
   b80b0:	408fffff 	.word	0x408fffff
   b80b4:	000fffff 	.word	0x000fffff
   b80b8:	3ff00000 	.word	0x3ff00000
   b80bc:	3f6f3400 	.word	0x3f6f3400
   b80c0:	4090cbff 	.word	0x4090cbff
   b80c4:	4598      	cmp	r8, r3
   b80c6:	db85      	blt.n	b7fd4 <__ieee754_pow+0x83c>
   b80c8:	4b7d      	ldr	r3, [pc, #500]	; (b82c0 <__ieee754_pow+0xb28>)
   b80ca:	4598      	cmp	r8, r3
   b80cc:	f73f ac22 	bgt.w	b7914 <__ieee754_pow+0x17c>
   b80d0:	ec51 0b10 	vmov	r0, r1, d0
   b80d4:	4b7a      	ldr	r3, [pc, #488]	; (b82c0 <__ieee754_pow+0xb28>)
   b80d6:	2200      	movs	r2, #0
   b80d8:	f000 fb14 	bl	b8704 <__aeabi_dsub>
   b80dc:	a368      	add	r3, pc, #416	; (adr r3, b8280 <__ieee754_pow+0xae8>)
   b80de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80e2:	4604      	mov	r4, r0
   b80e4:	460d      	mov	r5, r1
   b80e6:	f000 fcc5 	bl	b8a74 <__aeabi_dmul>
   b80ea:	a367      	add	r3, pc, #412	; (adr r3, b8288 <__ieee754_pow+0xaf0>)
   b80ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80f0:	4682      	mov	sl, r0
   b80f2:	468b      	mov	fp, r1
   b80f4:	4620      	mov	r0, r4
   b80f6:	4629      	mov	r1, r5
   b80f8:	f000 fcbc 	bl	b8a74 <__aeabi_dmul>
   b80fc:	4b71      	ldr	r3, [pc, #452]	; (b82c4 <__ieee754_pow+0xb2c>)
   b80fe:	ec41 0b18 	vmov	d8, r0, r1
   b8102:	2200      	movs	r2, #0
   b8104:	4620      	mov	r0, r4
   b8106:	4629      	mov	r1, r5
   b8108:	f000 fcb4 	bl	b8a74 <__aeabi_dmul>
   b810c:	4602      	mov	r2, r0
   b810e:	460b      	mov	r3, r1
   b8110:	a15f      	add	r1, pc, #380	; (adr r1, b8290 <__ieee754_pow+0xaf8>)
   b8112:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8116:	f000 faf5 	bl	b8704 <__aeabi_dsub>
   b811a:	4622      	mov	r2, r4
   b811c:	462b      	mov	r3, r5
   b811e:	f000 fca9 	bl	b8a74 <__aeabi_dmul>
   b8122:	4602      	mov	r2, r0
   b8124:	460b      	mov	r3, r1
   b8126:	2000      	movs	r0, #0
   b8128:	4967      	ldr	r1, [pc, #412]	; (b82c8 <__ieee754_pow+0xb30>)
   b812a:	f000 faeb 	bl	b8704 <__aeabi_dsub>
   b812e:	4622      	mov	r2, r4
   b8130:	4680      	mov	r8, r0
   b8132:	4689      	mov	r9, r1
   b8134:	462b      	mov	r3, r5
   b8136:	4620      	mov	r0, r4
   b8138:	4629      	mov	r1, r5
   b813a:	f000 fc9b 	bl	b8a74 <__aeabi_dmul>
   b813e:	4602      	mov	r2, r0
   b8140:	460b      	mov	r3, r1
   b8142:	4640      	mov	r0, r8
   b8144:	4649      	mov	r1, r9
   b8146:	f000 fc95 	bl	b8a74 <__aeabi_dmul>
   b814a:	a353      	add	r3, pc, #332	; (adr r3, b8298 <__ieee754_pow+0xb00>)
   b814c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8150:	f000 fc90 	bl	b8a74 <__aeabi_dmul>
   b8154:	4602      	mov	r2, r0
   b8156:	460b      	mov	r3, r1
   b8158:	ec51 0b18 	vmov	r0, r1, d8
   b815c:	f000 fad2 	bl	b8704 <__aeabi_dsub>
   b8160:	4680      	mov	r8, r0
   b8162:	4689      	mov	r9, r1
   b8164:	4642      	mov	r2, r8
   b8166:	464b      	mov	r3, r9
   b8168:	4650      	mov	r0, sl
   b816a:	4659      	mov	r1, fp
   b816c:	f000 facc 	bl	b8708 <__adddf3>
   b8170:	2000      	movs	r0, #0
   b8172:	4652      	mov	r2, sl
   b8174:	465b      	mov	r3, fp
   b8176:	4604      	mov	r4, r0
   b8178:	460d      	mov	r5, r1
   b817a:	e591      	b.n	b7ca0 <__ieee754_pow+0x508>
   b817c:	4622      	mov	r2, r4
   b817e:	462b      	mov	r3, r5
   b8180:	4620      	mov	r0, r4
   b8182:	4629      	mov	r1, r5
   b8184:	f000 fc76 	bl	b8a74 <__aeabi_dmul>
   b8188:	ec41 0b10 	vmov	d0, r0, r1
   b818c:	f7ff bb50 	b.w	b7830 <__ieee754_pow+0x98>
   b8190:	494b      	ldr	r1, [pc, #300]	; (b82c0 <__ieee754_pow+0xb28>)
   b8192:	2000      	movs	r0, #0
   b8194:	4622      	mov	r2, r4
   b8196:	462b      	mov	r3, r5
   b8198:	f000 fd96 	bl	b8cc8 <__aeabi_ddiv>
   b819c:	ec41 0b10 	vmov	d0, r0, r1
   b81a0:	f7ff bb46 	b.w	b7830 <__ieee754_pow+0x98>
   b81a4:	2b00      	cmp	r3, #0
   b81a6:	d144      	bne.n	b8232 <__ieee754_pow+0xa9a>
   b81a8:	f1c1 0114 	rsb	r1, r1, #20
   b81ac:	fa4a f001 	asr.w	r0, sl, r1
   b81b0:	fa00 f101 	lsl.w	r1, r0, r1
   b81b4:	4551      	cmp	r1, sl
   b81b6:	d05a      	beq.n	b826e <__ieee754_pow+0xad6>
   b81b8:	9300      	str	r3, [sp, #0]
   b81ba:	f7ff bb17 	b.w	b77ec <__ieee754_pow+0x54>
   b81be:	4a42      	ldr	r2, [pc, #264]	; (b82c8 <__ieee754_pow+0xb30>)
   b81c0:	4293      	cmp	r3, r2
   b81c2:	dc5b      	bgt.n	b827c <__ieee754_pow+0xae4>
   b81c4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b81c8:	9102      	str	r1, [sp, #8]
   b81ca:	9100      	str	r1, [sp, #0]
   b81cc:	e646      	b.n	b7e5c <__ieee754_pow+0x6c4>
   b81ce:	a334      	add	r3, pc, #208	; (adr r3, b82a0 <__ieee754_pow+0xb08>)
   b81d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81d4:	ec51 0b18 	vmov	r0, r1, d8
   b81d8:	f000 fc4c 	bl	b8a74 <__aeabi_dmul>
   b81dc:	a330      	add	r3, pc, #192	; (adr r3, b82a0 <__ieee754_pow+0xb08>)
   b81de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81e2:	f000 fc47 	bl	b8a74 <__aeabi_dmul>
   b81e6:	ec41 0b10 	vmov	d0, r0, r1
   b81ea:	f7ff bb21 	b.w	b7830 <__ieee754_pow+0x98>
   b81ee:	9b00      	ldr	r3, [sp, #0]
   b81f0:	2b01      	cmp	r3, #1
   b81f2:	f47f ab1d 	bne.w	b7830 <__ieee754_pow+0x98>
   b81f6:	ee10 1a90 	vmov	r1, s1
   b81fa:	ee10 2a10 	vmov	r2, s0
   b81fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8202:	ec43 2b10 	vmov	d0, r2, r3
   b8206:	f7ff bb13 	b.w	b7830 <__ieee754_pow+0x98>
   b820a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b82a8 <__ieee754_pow+0xb10>
   b820e:	eeb0 ca47 	vmov.f32	s24, s14
   b8212:	eef0 ca67 	vmov.f32	s25, s15
   b8216:	ed9f 7b26 	vldr	d7, [pc, #152]	; b82b0 <__ieee754_pow+0xb18>
   b821a:	eeb0 da47 	vmov.f32	s26, s14
   b821e:	eef0 da67 	vmov.f32	s27, s15
   b8222:	ed9f 7b25 	vldr	d7, [pc, #148]	; b82b8 <__ieee754_pow+0xb20>
   b8226:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b822a:	ec53 2b17 	vmov	r2, r3, d7
   b822e:	f7ff bbeb 	b.w	b7a08 <__ieee754_pow+0x270>
   b8232:	ec45 4b10 	vmov	d0, r4, r5
   b8236:	9200      	str	r2, [sp, #0]
   b8238:	f000 f914 	bl	b8464 <fabs>
   b823c:	9a00      	ldr	r2, [sp, #0]
   b823e:	2a00      	cmp	r2, #0
   b8240:	f47f ab92 	bne.w	b7968 <__ieee754_pow+0x1d0>
   b8244:	9200      	str	r2, [sp, #0]
   b8246:	f7ff bb26 	b.w	b7896 <__ieee754_pow+0xfe>
   b824a:	ec41 0b10 	vmov	d0, r0, r1
   b824e:	9800      	ldr	r0, [sp, #0]
   b8250:	f000 f9c2 	bl	b85d8 <scalbn>
   b8254:	ec51 0b10 	vmov	r0, r1, d0
   b8258:	e6b5      	b.n	b7fc6 <__ieee754_pow+0x82e>
   b825a:	f000 0001 	and.w	r0, r0, #1
   b825e:	f1c0 0102 	rsb	r1, r0, #2
   b8262:	9100      	str	r1, [sp, #0]
   b8264:	2b00      	cmp	r3, #0
   b8266:	f43f aac1 	beq.w	b77ec <__ieee754_pow+0x54>
   b826a:	f7ff bb0d 	b.w	b7888 <__ieee754_pow+0xf0>
   b826e:	f000 0001 	and.w	r0, r0, #1
   b8272:	f1c0 0302 	rsb	r3, r0, #2
   b8276:	9300      	str	r3, [sp, #0]
   b8278:	f7ff bab8 	b.w	b77ec <__ieee754_pow+0x54>
   b827c:	151b      	asrs	r3, r3, #20
   b827e:	e5bb      	b.n	b7df8 <__ieee754_pow+0x660>
   b8280:	60000000 	.word	0x60000000
   b8284:	3ff71547 	.word	0x3ff71547
   b8288:	f85ddf44 	.word	0xf85ddf44
   b828c:	3e54ae0b 	.word	0x3e54ae0b
   b8290:	55555555 	.word	0x55555555
   b8294:	3fd55555 	.word	0x3fd55555
   b8298:	652b82fe 	.word	0x652b82fe
   b829c:	3ff71547 	.word	0x3ff71547
   b82a0:	8800759c 	.word	0x8800759c
   b82a4:	7e37e43c 	.word	0x7e37e43c
   b82a8:	40000000 	.word	0x40000000
   b82ac:	3fe2b803 	.word	0x3fe2b803
   b82b0:	43cfd006 	.word	0x43cfd006
   b82b4:	3e4cfdeb 	.word	0x3e4cfdeb
   b82b8:	00000000 	.word	0x00000000
   b82bc:	3ff80000 	.word	0x3ff80000
   b82c0:	3ff00000 	.word	0x3ff00000
   b82c4:	3fd00000 	.word	0x3fd00000
   b82c8:	3fe00000 	.word	0x3fe00000

000b82cc <__ieee754_sqrt>:
   b82cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b82d0:	4a63      	ldr	r2, [pc, #396]	; (b8460 <__ieee754_sqrt+0x194>)
   b82d2:	ec55 4b10 	vmov	r4, r5, d0
   b82d6:	43aa      	bics	r2, r5
   b82d8:	f000 809f 	beq.w	b841a <__ieee754_sqrt+0x14e>
   b82dc:	2d00      	cmp	r5, #0
   b82de:	ee10 ca10 	vmov	ip, s0
   b82e2:	462b      	mov	r3, r5
   b82e4:	dd54      	ble.n	b8390 <__ieee754_sqrt+0xc4>
   b82e6:	1529      	asrs	r1, r5, #20
   b82e8:	d063      	beq.n	b83b2 <__ieee754_sqrt+0xe6>
   b82ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b82ee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b82f2:	07c9      	lsls	r1, r1, #31
   b82f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b82f8:	d404      	bmi.n	b8304 <__ieee754_sqrt+0x38>
   b82fa:	005b      	lsls	r3, r3, #1
   b82fc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8300:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8304:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8308:	2600      	movs	r6, #0
   b830a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b830e:	107f      	asrs	r7, r7, #1
   b8310:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8314:	f04f 0e16 	mov.w	lr, #22
   b8318:	4634      	mov	r4, r6
   b831a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b831e:	18a1      	adds	r1, r4, r2
   b8320:	4299      	cmp	r1, r3
   b8322:	dc02      	bgt.n	b832a <__ieee754_sqrt+0x5e>
   b8324:	1a5b      	subs	r3, r3, r1
   b8326:	188c      	adds	r4, r1, r2
   b8328:	4416      	add	r6, r2
   b832a:	005b      	lsls	r3, r3, #1
   b832c:	f1be 0e01 	subs.w	lr, lr, #1
   b8330:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8334:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8338:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b833c:	d1ef      	bne.n	b831e <__ieee754_sqrt+0x52>
   b833e:	4675      	mov	r5, lr
   b8340:	2020      	movs	r0, #32
   b8342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b8346:	e00a      	b.n	b835e <__ieee754_sqrt+0x92>
   b8348:	d044      	beq.n	b83d4 <__ieee754_sqrt+0x108>
   b834a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b834e:	3801      	subs	r0, #1
   b8350:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b8354:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8358:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b835c:	d043      	beq.n	b83e6 <__ieee754_sqrt+0x11a>
   b835e:	42a3      	cmp	r3, r4
   b8360:	eb02 010e 	add.w	r1, r2, lr
   b8364:	ddf0      	ble.n	b8348 <__ieee754_sqrt+0x7c>
   b8366:	2900      	cmp	r1, #0
   b8368:	eb01 0e02 	add.w	lr, r1, r2
   b836c:	db0a      	blt.n	b8384 <__ieee754_sqrt+0xb8>
   b836e:	46a0      	mov	r8, r4
   b8370:	1b1b      	subs	r3, r3, r4
   b8372:	4561      	cmp	r1, ip
   b8374:	bf88      	it	hi
   b8376:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b837a:	ebac 0c01 	sub.w	ip, ip, r1
   b837e:	4415      	add	r5, r2
   b8380:	4644      	mov	r4, r8
   b8382:	e7e2      	b.n	b834a <__ieee754_sqrt+0x7e>
   b8384:	f1be 0f00 	cmp.w	lr, #0
   b8388:	dbf1      	blt.n	b836e <__ieee754_sqrt+0xa2>
   b838a:	f104 0801 	add.w	r8, r4, #1
   b838e:	e7ef      	b.n	b8370 <__ieee754_sqrt+0xa4>
   b8390:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b8394:	4322      	orrs	r2, r4
   b8396:	d038      	beq.n	b840a <__ieee754_sqrt+0x13e>
   b8398:	2d00      	cmp	r5, #0
   b839a:	d14e      	bne.n	b843a <__ieee754_sqrt+0x16e>
   b839c:	4629      	mov	r1, r5
   b839e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b83a2:	3915      	subs	r1, #21
   b83a4:	4613      	mov	r3, r2
   b83a6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b83aa:	2a00      	cmp	r2, #0
   b83ac:	d0f7      	beq.n	b839e <__ieee754_sqrt+0xd2>
   b83ae:	02d6      	lsls	r6, r2, #11
   b83b0:	d450      	bmi.n	b8454 <__ieee754_sqrt+0x188>
   b83b2:	2000      	movs	r0, #0
   b83b4:	005b      	lsls	r3, r3, #1
   b83b6:	02dd      	lsls	r5, r3, #11
   b83b8:	4604      	mov	r4, r0
   b83ba:	f100 0001 	add.w	r0, r0, #1
   b83be:	d5f9      	bpl.n	b83b4 <__ieee754_sqrt+0xe8>
   b83c0:	461a      	mov	r2, r3
   b83c2:	4663      	mov	r3, ip
   b83c4:	fa0c fc00 	lsl.w	ip, ip, r0
   b83c8:	f1c0 0020 	rsb	r0, r0, #32
   b83cc:	40c3      	lsrs	r3, r0
   b83ce:	1b09      	subs	r1, r1, r4
   b83d0:	4313      	orrs	r3, r2
   b83d2:	e78a      	b.n	b82ea <__ieee754_sqrt+0x1e>
   b83d4:	4561      	cmp	r1, ip
   b83d6:	d8b8      	bhi.n	b834a <__ieee754_sqrt+0x7e>
   b83d8:	2900      	cmp	r1, #0
   b83da:	eb01 0e02 	add.w	lr, r1, r2
   b83de:	dbd1      	blt.n	b8384 <__ieee754_sqrt+0xb8>
   b83e0:	4698      	mov	r8, r3
   b83e2:	2300      	movs	r3, #0
   b83e4:	e7c9      	b.n	b837a <__ieee754_sqrt+0xae>
   b83e6:	ea53 030c 	orrs.w	r3, r3, ip
   b83ea:	d110      	bne.n	b840e <__ieee754_sqrt+0x142>
   b83ec:	0868      	lsrs	r0, r5, #1
   b83ee:	1071      	asrs	r1, r6, #1
   b83f0:	07f3      	lsls	r3, r6, #31
   b83f2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b83f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b83fa:	bf48      	it	mi
   b83fc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8400:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8404:	4602      	mov	r2, r0
   b8406:	ec43 2b10 	vmov	d0, r2, r3
   b840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b840e:	1c6a      	adds	r2, r5, #1
   b8410:	bf16      	itet	ne
   b8412:	1c68      	addne	r0, r5, #1
   b8414:	3601      	addeq	r6, #1
   b8416:	0840      	lsrne	r0, r0, #1
   b8418:	e7e9      	b.n	b83ee <__ieee754_sqrt+0x122>
   b841a:	ee10 2a10 	vmov	r2, s0
   b841e:	ee10 0a10 	vmov	r0, s0
   b8422:	462b      	mov	r3, r5
   b8424:	4629      	mov	r1, r5
   b8426:	f000 fb25 	bl	b8a74 <__aeabi_dmul>
   b842a:	4622      	mov	r2, r4
   b842c:	462b      	mov	r3, r5
   b842e:	f000 f96b 	bl	b8708 <__adddf3>
   b8432:	ec41 0b10 	vmov	d0, r0, r1
   b8436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b843a:	ee10 2a10 	vmov	r2, s0
   b843e:	4620      	mov	r0, r4
   b8440:	4629      	mov	r1, r5
   b8442:	f000 f95f 	bl	b8704 <__aeabi_dsub>
   b8446:	4602      	mov	r2, r0
   b8448:	460b      	mov	r3, r1
   b844a:	f000 fc3d 	bl	b8cc8 <__aeabi_ddiv>
   b844e:	ec41 0b10 	vmov	d0, r0, r1
   b8452:	e7da      	b.n	b840a <__ieee754_sqrt+0x13e>
   b8454:	4663      	mov	r3, ip
   b8456:	2020      	movs	r0, #32
   b8458:	f04f 34ff 	mov.w	r4, #4294967295
   b845c:	e7b6      	b.n	b83cc <__ieee754_sqrt+0x100>
   b845e:	bf00      	nop
   b8460:	7ff00000 	.word	0x7ff00000

000b8464 <fabs>:
   b8464:	ec51 0b10 	vmov	r0, r1, d0
   b8468:	ee10 2a10 	vmov	r2, s0
   b846c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8470:	ec43 2b10 	vmov	d0, r2, r3
   b8474:	4770      	bx	lr
   b8476:	bf00      	nop

000b8478 <finite>:
   b8478:	b082      	sub	sp, #8
   b847a:	ed8d 0b00 	vstr	d0, [sp]
   b847e:	9801      	ldr	r0, [sp, #4]
   b8480:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8484:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8488:	0fc0      	lsrs	r0, r0, #31
   b848a:	b002      	add	sp, #8
   b848c:	4770      	bx	lr
   b848e:	bf00      	nop

000b8490 <nan>:
   b8490:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8498 <nan+0x8>
   b8494:	4770      	bx	lr
   b8496:	bf00      	nop
   b8498:	00000000 	.word	0x00000000
   b849c:	7ff80000 	.word	0x7ff80000

000b84a0 <rint>:
   b84a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b84a2:	ec53 2b10 	vmov	r2, r3, d0
   b84a6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b84aa:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b84ae:	2913      	cmp	r1, #19
   b84b0:	ee10 0a10 	vmov	r0, s0
   b84b4:	b083      	sub	sp, #12
   b84b6:	461c      	mov	r4, r3
   b84b8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b84bc:	dc3a      	bgt.n	b8534 <rint+0x94>
   b84be:	2900      	cmp	r1, #0
   b84c0:	db30      	blt.n	b8524 <rint+0x84>
   b84c2:	4d42      	ldr	r5, [pc, #264]	; (b85cc <rint+0x12c>)
   b84c4:	fa45 fc01 	asr.w	ip, r5, r1
   b84c8:	ea03 050c 	and.w	r5, r3, ip
   b84cc:	4315      	orrs	r5, r2
   b84ce:	d02d      	beq.n	b852c <rint+0x8c>
   b84d0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b84d4:	4318      	orrs	r0, r3
   b84d6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b84da:	d00c      	beq.n	b84f6 <rint+0x56>
   b84dc:	ea24 0c0c 	bic.w	ip, r4, ip
   b84e0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b84e4:	2913      	cmp	r1, #19
   b84e6:	fa44 f101 	asr.w	r1, r4, r1
   b84ea:	bf0c      	ite	eq
   b84ec:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b84f0:	2000      	movne	r0, #0
   b84f2:	ea4c 0401 	orr.w	r4, ip, r1
   b84f6:	4936      	ldr	r1, [pc, #216]	; (b85d0 <rint+0x130>)
   b84f8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b84fc:	4623      	mov	r3, r4
   b84fe:	e9de 4500 	ldrd	r4, r5, [lr]
   b8502:	4602      	mov	r2, r0
   b8504:	4629      	mov	r1, r5
   b8506:	4620      	mov	r0, r4
   b8508:	f000 f8fe 	bl	b8708 <__adddf3>
   b850c:	e9cd 0100 	strd	r0, r1, [sp]
   b8510:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8514:	4622      	mov	r2, r4
   b8516:	462b      	mov	r3, r5
   b8518:	f000 f8f4 	bl	b8704 <__aeabi_dsub>
   b851c:	ec41 0b10 	vmov	d0, r0, r1
   b8520:	b003      	add	sp, #12
   b8522:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8524:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8528:	4311      	orrs	r1, r2
   b852a:	d124      	bne.n	b8576 <rint+0xd6>
   b852c:	ec43 2b10 	vmov	d0, r2, r3
   b8530:	b003      	add	sp, #12
   b8532:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8534:	2933      	cmp	r1, #51	; 0x33
   b8536:	dd08      	ble.n	b854a <rint+0xaa>
   b8538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b853c:	d1f6      	bne.n	b852c <rint+0x8c>
   b853e:	4619      	mov	r1, r3
   b8540:	f000 f8e2 	bl	b8708 <__adddf3>
   b8544:	ec41 0b10 	vmov	d0, r0, r1
   b8548:	e7f2      	b.n	b8530 <rint+0x90>
   b854a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b854e:	f04f 31ff 	mov.w	r1, #4294967295
   b8552:	fa21 f10c 	lsr.w	r1, r1, ip
   b8556:	420a      	tst	r2, r1
   b8558:	d0e8      	beq.n	b852c <rint+0x8c>
   b855a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b855e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8562:	d0c8      	beq.n	b84f6 <rint+0x56>
   b8564:	ea20 0303 	bic.w	r3, r0, r3
   b8568:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b856c:	fa40 fc0c 	asr.w	ip, r0, ip
   b8570:	ea43 000c 	orr.w	r0, r3, ip
   b8574:	e7bf      	b.n	b84f6 <rint+0x56>
   b8576:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b857a:	4318      	orrs	r0, r3
   b857c:	4a14      	ldr	r2, [pc, #80]	; (b85d0 <rint+0x130>)
   b857e:	4243      	negs	r3, r0
   b8580:	4303      	orrs	r3, r0
   b8582:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8586:	0b1b      	lsrs	r3, r3, #12
   b8588:	0c62      	lsrs	r2, r4, #17
   b858a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b858e:	0452      	lsls	r2, r2, #17
   b8590:	ea43 0702 	orr.w	r7, r3, r2
   b8594:	463b      	mov	r3, r7
   b8596:	e9de 6700 	ldrd	r6, r7, [lr]
   b859a:	ee10 2a10 	vmov	r2, s0
   b859e:	4630      	mov	r0, r6
   b85a0:	4639      	mov	r1, r7
   b85a2:	f000 f8b1 	bl	b8708 <__adddf3>
   b85a6:	e9cd 0100 	strd	r0, r1, [sp]
   b85aa:	4632      	mov	r2, r6
   b85ac:	463b      	mov	r3, r7
   b85ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   b85b2:	f000 f8a7 	bl	b8704 <__aeabi_dsub>
   b85b6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b85ba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b85be:	4602      	mov	r2, r0
   b85c0:	ea41 0304 	orr.w	r3, r1, r4
   b85c4:	ec43 2b10 	vmov	d0, r2, r3
   b85c8:	b003      	add	sp, #12
   b85ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b85cc:	000fffff 	.word	0x000fffff
   b85d0:	000b9b50 	.word	0x000b9b50
   b85d4:	00000000 	.word	0x00000000

000b85d8 <scalbn>:
   b85d8:	b538      	push	{r3, r4, r5, lr}
   b85da:	ec53 2b10 	vmov	r2, r3, d0
   b85de:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b85e2:	4604      	mov	r4, r0
   b85e4:	469c      	mov	ip, r3
   b85e6:	bb89      	cbnz	r1, b864c <scalbn+0x74>
   b85e8:	ee10 1a10 	vmov	r1, s0
   b85ec:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b85f0:	ea5c 0101 	orrs.w	r1, ip, r1
   b85f4:	d029      	beq.n	b864a <scalbn+0x72>
   b85f6:	4619      	mov	r1, r3
   b85f8:	2200      	movs	r2, #0
   b85fa:	4b3d      	ldr	r3, [pc, #244]	; (b86f0 <scalbn+0x118>)
   b85fc:	4d3d      	ldr	r5, [pc, #244]	; (b86f4 <scalbn+0x11c>)
   b85fe:	ee10 0a10 	vmov	r0, s0
   b8602:	f000 fa37 	bl	b8a74 <__aeabi_dmul>
   b8606:	42ac      	cmp	r4, r5
   b8608:	4602      	mov	r2, r0
   b860a:	460b      	mov	r3, r1
   b860c:	db16      	blt.n	b863c <scalbn+0x64>
   b860e:	468c      	mov	ip, r1
   b8610:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8614:	3936      	subs	r1, #54	; 0x36
   b8616:	4421      	add	r1, r4
   b8618:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b861c:	4281      	cmp	r1, r0
   b861e:	dc21      	bgt.n	b8664 <scalbn+0x8c>
   b8620:	2900      	cmp	r1, #0
   b8622:	dc47      	bgt.n	b86b4 <scalbn+0xdc>
   b8624:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8628:	da34      	bge.n	b8694 <scalbn+0xbc>
   b862a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b862e:	428c      	cmp	r4, r1
   b8630:	dc18      	bgt.n	b8664 <scalbn+0x8c>
   b8632:	2b00      	cmp	r3, #0
   b8634:	a126      	add	r1, pc, #152	; (adr r1, b86d0 <scalbn+0xf8>)
   b8636:	e9d1 0100 	ldrd	r0, r1, [r1]
   b863a:	db44      	blt.n	b86c6 <scalbn+0xee>
   b863c:	a324      	add	r3, pc, #144	; (adr r3, b86d0 <scalbn+0xf8>)
   b863e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8642:	f000 fa17 	bl	b8a74 <__aeabi_dmul>
   b8646:	ec41 0b10 	vmov	d0, r0, r1
   b864a:	bd38      	pop	{r3, r4, r5, pc}
   b864c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8650:	4281      	cmp	r1, r0
   b8652:	d1e0      	bne.n	b8616 <scalbn+0x3e>
   b8654:	ee10 0a10 	vmov	r0, s0
   b8658:	4619      	mov	r1, r3
   b865a:	f000 f855 	bl	b8708 <__adddf3>
   b865e:	ec41 0b10 	vmov	d0, r0, r1
   b8662:	bd38      	pop	{r3, r4, r5, pc}
   b8664:	2b00      	cmp	r3, #0
   b8666:	a11c      	add	r1, pc, #112	; (adr r1, b86d8 <scalbn+0x100>)
   b8668:	e9d1 0100 	ldrd	r0, r1, [r1]
   b866c:	db07      	blt.n	b867e <scalbn+0xa6>
   b866e:	a31a      	add	r3, pc, #104	; (adr r3, b86d8 <scalbn+0x100>)
   b8670:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8674:	f000 f9fe 	bl	b8a74 <__aeabi_dmul>
   b8678:	ec41 0b10 	vmov	d0, r0, r1
   b867c:	bd38      	pop	{r3, r4, r5, pc}
   b867e:	a118      	add	r1, pc, #96	; (adr r1, b86e0 <scalbn+0x108>)
   b8680:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8684:	a314      	add	r3, pc, #80	; (adr r3, b86d8 <scalbn+0x100>)
   b8686:	e9d3 2300 	ldrd	r2, r3, [r3]
   b868a:	f000 f9f3 	bl	b8a74 <__aeabi_dmul>
   b868e:	ec41 0b10 	vmov	d0, r0, r1
   b8692:	e7f3      	b.n	b867c <scalbn+0xa4>
   b8694:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8698:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b869c:	3136      	adds	r1, #54	; 0x36
   b869e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b86a2:	4610      	mov	r0, r2
   b86a4:	4619      	mov	r1, r3
   b86a6:	2200      	movs	r2, #0
   b86a8:	4b13      	ldr	r3, [pc, #76]	; (b86f8 <scalbn+0x120>)
   b86aa:	f000 f9e3 	bl	b8a74 <__aeabi_dmul>
   b86ae:	ec41 0b10 	vmov	d0, r0, r1
   b86b2:	bd38      	pop	{r3, r4, r5, pc}
   b86b4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b86b8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b86bc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b86c0:	ec43 2b10 	vmov	d0, r2, r3
   b86c4:	bd38      	pop	{r3, r4, r5, pc}
   b86c6:	a108      	add	r1, pc, #32	; (adr r1, b86e8 <scalbn+0x110>)
   b86c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b86cc:	e7b6      	b.n	b863c <scalbn+0x64>
   b86ce:	bf00      	nop
   b86d0:	c2f8f359 	.word	0xc2f8f359
   b86d4:	01a56e1f 	.word	0x01a56e1f
   b86d8:	8800759c 	.word	0x8800759c
   b86dc:	7e37e43c 	.word	0x7e37e43c
   b86e0:	8800759c 	.word	0x8800759c
   b86e4:	fe37e43c 	.word	0xfe37e43c
   b86e8:	c2f8f359 	.word	0xc2f8f359
   b86ec:	81a56e1f 	.word	0x81a56e1f
   b86f0:	43500000 	.word	0x43500000
   b86f4:	ffff3cb0 	.word	0xffff3cb0
   b86f8:	3c900000 	.word	0x3c900000

000b86fc <__aeabi_drsub>:
   b86fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8700:	e002      	b.n	b8708 <__adddf3>
   b8702:	bf00      	nop

000b8704 <__aeabi_dsub>:
   b8704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8708 <__adddf3>:
   b8708:	b530      	push	{r4, r5, lr}
   b870a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b870e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8712:	ea94 0f05 	teq	r4, r5
   b8716:	bf08      	it	eq
   b8718:	ea90 0f02 	teqeq	r0, r2
   b871c:	bf1f      	itttt	ne
   b871e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8722:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8726:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b872a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b872e:	f000 80e2 	beq.w	b88f6 <__adddf3+0x1ee>
   b8732:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8736:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b873a:	bfb8      	it	lt
   b873c:	426d      	neglt	r5, r5
   b873e:	dd0c      	ble.n	b875a <__adddf3+0x52>
   b8740:	442c      	add	r4, r5
   b8742:	ea80 0202 	eor.w	r2, r0, r2
   b8746:	ea81 0303 	eor.w	r3, r1, r3
   b874a:	ea82 0000 	eor.w	r0, r2, r0
   b874e:	ea83 0101 	eor.w	r1, r3, r1
   b8752:	ea80 0202 	eor.w	r2, r0, r2
   b8756:	ea81 0303 	eor.w	r3, r1, r3
   b875a:	2d36      	cmp	r5, #54	; 0x36
   b875c:	bf88      	it	hi
   b875e:	bd30      	pophi	{r4, r5, pc}
   b8760:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8764:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8768:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b876c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8770:	d002      	beq.n	b8778 <__adddf3+0x70>
   b8772:	4240      	negs	r0, r0
   b8774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8778:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b877c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8780:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8784:	d002      	beq.n	b878c <__adddf3+0x84>
   b8786:	4252      	negs	r2, r2
   b8788:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b878c:	ea94 0f05 	teq	r4, r5
   b8790:	f000 80a7 	beq.w	b88e2 <__adddf3+0x1da>
   b8794:	f1a4 0401 	sub.w	r4, r4, #1
   b8798:	f1d5 0e20 	rsbs	lr, r5, #32
   b879c:	db0d      	blt.n	b87ba <__adddf3+0xb2>
   b879e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b87a2:	fa22 f205 	lsr.w	r2, r2, r5
   b87a6:	1880      	adds	r0, r0, r2
   b87a8:	f141 0100 	adc.w	r1, r1, #0
   b87ac:	fa03 f20e 	lsl.w	r2, r3, lr
   b87b0:	1880      	adds	r0, r0, r2
   b87b2:	fa43 f305 	asr.w	r3, r3, r5
   b87b6:	4159      	adcs	r1, r3
   b87b8:	e00e      	b.n	b87d8 <__adddf3+0xd0>
   b87ba:	f1a5 0520 	sub.w	r5, r5, #32
   b87be:	f10e 0e20 	add.w	lr, lr, #32
   b87c2:	2a01      	cmp	r2, #1
   b87c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b87c8:	bf28      	it	cs
   b87ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   b87ce:	fa43 f305 	asr.w	r3, r3, r5
   b87d2:	18c0      	adds	r0, r0, r3
   b87d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b87d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b87dc:	d507      	bpl.n	b87ee <__adddf3+0xe6>
   b87de:	f04f 0e00 	mov.w	lr, #0
   b87e2:	f1dc 0c00 	rsbs	ip, ip, #0
   b87e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b87ea:	eb6e 0101 	sbc.w	r1, lr, r1
   b87ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b87f2:	d31b      	bcc.n	b882c <__adddf3+0x124>
   b87f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b87f8:	d30c      	bcc.n	b8814 <__adddf3+0x10c>
   b87fa:	0849      	lsrs	r1, r1, #1
   b87fc:	ea5f 0030 	movs.w	r0, r0, rrx
   b8800:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8804:	f104 0401 	add.w	r4, r4, #1
   b8808:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b880c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8810:	f080 809a 	bcs.w	b8948 <__adddf3+0x240>
   b8814:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8818:	bf08      	it	eq
   b881a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b881e:	f150 0000 	adcs.w	r0, r0, #0
   b8822:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8826:	ea41 0105 	orr.w	r1, r1, r5
   b882a:	bd30      	pop	{r4, r5, pc}
   b882c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8830:	4140      	adcs	r0, r0
   b8832:	eb41 0101 	adc.w	r1, r1, r1
   b8836:	3c01      	subs	r4, #1
   b8838:	bf28      	it	cs
   b883a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b883e:	d2e9      	bcs.n	b8814 <__adddf3+0x10c>
   b8840:	f091 0f00 	teq	r1, #0
   b8844:	bf04      	itt	eq
   b8846:	4601      	moveq	r1, r0
   b8848:	2000      	moveq	r0, #0
   b884a:	fab1 f381 	clz	r3, r1
   b884e:	bf08      	it	eq
   b8850:	3320      	addeq	r3, #32
   b8852:	f1a3 030b 	sub.w	r3, r3, #11
   b8856:	f1b3 0220 	subs.w	r2, r3, #32
   b885a:	da0c      	bge.n	b8876 <__adddf3+0x16e>
   b885c:	320c      	adds	r2, #12
   b885e:	dd08      	ble.n	b8872 <__adddf3+0x16a>
   b8860:	f102 0c14 	add.w	ip, r2, #20
   b8864:	f1c2 020c 	rsb	r2, r2, #12
   b8868:	fa01 f00c 	lsl.w	r0, r1, ip
   b886c:	fa21 f102 	lsr.w	r1, r1, r2
   b8870:	e00c      	b.n	b888c <__adddf3+0x184>
   b8872:	f102 0214 	add.w	r2, r2, #20
   b8876:	bfd8      	it	le
   b8878:	f1c2 0c20 	rsble	ip, r2, #32
   b887c:	fa01 f102 	lsl.w	r1, r1, r2
   b8880:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8884:	bfdc      	itt	le
   b8886:	ea41 010c 	orrle.w	r1, r1, ip
   b888a:	4090      	lslle	r0, r2
   b888c:	1ae4      	subs	r4, r4, r3
   b888e:	bfa2      	ittt	ge
   b8890:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8894:	4329      	orrge	r1, r5
   b8896:	bd30      	popge	{r4, r5, pc}
   b8898:	ea6f 0404 	mvn.w	r4, r4
   b889c:	3c1f      	subs	r4, #31
   b889e:	da1c      	bge.n	b88da <__adddf3+0x1d2>
   b88a0:	340c      	adds	r4, #12
   b88a2:	dc0e      	bgt.n	b88c2 <__adddf3+0x1ba>
   b88a4:	f104 0414 	add.w	r4, r4, #20
   b88a8:	f1c4 0220 	rsb	r2, r4, #32
   b88ac:	fa20 f004 	lsr.w	r0, r0, r4
   b88b0:	fa01 f302 	lsl.w	r3, r1, r2
   b88b4:	ea40 0003 	orr.w	r0, r0, r3
   b88b8:	fa21 f304 	lsr.w	r3, r1, r4
   b88bc:	ea45 0103 	orr.w	r1, r5, r3
   b88c0:	bd30      	pop	{r4, r5, pc}
   b88c2:	f1c4 040c 	rsb	r4, r4, #12
   b88c6:	f1c4 0220 	rsb	r2, r4, #32
   b88ca:	fa20 f002 	lsr.w	r0, r0, r2
   b88ce:	fa01 f304 	lsl.w	r3, r1, r4
   b88d2:	ea40 0003 	orr.w	r0, r0, r3
   b88d6:	4629      	mov	r1, r5
   b88d8:	bd30      	pop	{r4, r5, pc}
   b88da:	fa21 f004 	lsr.w	r0, r1, r4
   b88de:	4629      	mov	r1, r5
   b88e0:	bd30      	pop	{r4, r5, pc}
   b88e2:	f094 0f00 	teq	r4, #0
   b88e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b88ea:	bf06      	itte	eq
   b88ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b88f0:	3401      	addeq	r4, #1
   b88f2:	3d01      	subne	r5, #1
   b88f4:	e74e      	b.n	b8794 <__adddf3+0x8c>
   b88f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b88fa:	bf18      	it	ne
   b88fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8900:	d029      	beq.n	b8956 <__adddf3+0x24e>
   b8902:	ea94 0f05 	teq	r4, r5
   b8906:	bf08      	it	eq
   b8908:	ea90 0f02 	teqeq	r0, r2
   b890c:	d005      	beq.n	b891a <__adddf3+0x212>
   b890e:	ea54 0c00 	orrs.w	ip, r4, r0
   b8912:	bf04      	itt	eq
   b8914:	4619      	moveq	r1, r3
   b8916:	4610      	moveq	r0, r2
   b8918:	bd30      	pop	{r4, r5, pc}
   b891a:	ea91 0f03 	teq	r1, r3
   b891e:	bf1e      	ittt	ne
   b8920:	2100      	movne	r1, #0
   b8922:	2000      	movne	r0, #0
   b8924:	bd30      	popne	{r4, r5, pc}
   b8926:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b892a:	d105      	bne.n	b8938 <__adddf3+0x230>
   b892c:	0040      	lsls	r0, r0, #1
   b892e:	4149      	adcs	r1, r1
   b8930:	bf28      	it	cs
   b8932:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8936:	bd30      	pop	{r4, r5, pc}
   b8938:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b893c:	bf3c      	itt	cc
   b893e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8942:	bd30      	popcc	{r4, r5, pc}
   b8944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8948:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b894c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8950:	f04f 0000 	mov.w	r0, #0
   b8954:	bd30      	pop	{r4, r5, pc}
   b8956:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b895a:	bf1a      	itte	ne
   b895c:	4619      	movne	r1, r3
   b895e:	4610      	movne	r0, r2
   b8960:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8964:	bf1c      	itt	ne
   b8966:	460b      	movne	r3, r1
   b8968:	4602      	movne	r2, r0
   b896a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b896e:	bf06      	itte	eq
   b8970:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8974:	ea91 0f03 	teqeq	r1, r3
   b8978:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b897c:	bd30      	pop	{r4, r5, pc}
   b897e:	bf00      	nop

000b8980 <__aeabi_ui2d>:
   b8980:	f090 0f00 	teq	r0, #0
   b8984:	bf04      	itt	eq
   b8986:	2100      	moveq	r1, #0
   b8988:	4770      	bxeq	lr
   b898a:	b530      	push	{r4, r5, lr}
   b898c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8990:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8994:	f04f 0500 	mov.w	r5, #0
   b8998:	f04f 0100 	mov.w	r1, #0
   b899c:	e750      	b.n	b8840 <__adddf3+0x138>
   b899e:	bf00      	nop

000b89a0 <__aeabi_i2d>:
   b89a0:	f090 0f00 	teq	r0, #0
   b89a4:	bf04      	itt	eq
   b89a6:	2100      	moveq	r1, #0
   b89a8:	4770      	bxeq	lr
   b89aa:	b530      	push	{r4, r5, lr}
   b89ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b89b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b89b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b89b8:	bf48      	it	mi
   b89ba:	4240      	negmi	r0, r0
   b89bc:	f04f 0100 	mov.w	r1, #0
   b89c0:	e73e      	b.n	b8840 <__adddf3+0x138>
   b89c2:	bf00      	nop

000b89c4 <__aeabi_f2d>:
   b89c4:	0042      	lsls	r2, r0, #1
   b89c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b89ca:	ea4f 0131 	mov.w	r1, r1, rrx
   b89ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b89d2:	bf1f      	itttt	ne
   b89d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b89d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b89dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b89e0:	4770      	bxne	lr
   b89e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b89e6:	bf08      	it	eq
   b89e8:	4770      	bxeq	lr
   b89ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b89ee:	bf04      	itt	eq
   b89f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b89f4:	4770      	bxeq	lr
   b89f6:	b530      	push	{r4, r5, lr}
   b89f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b89fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8a00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8a04:	e71c      	b.n	b8840 <__adddf3+0x138>
   b8a06:	bf00      	nop

000b8a08 <__aeabi_ul2d>:
   b8a08:	ea50 0201 	orrs.w	r2, r0, r1
   b8a0c:	bf08      	it	eq
   b8a0e:	4770      	bxeq	lr
   b8a10:	b530      	push	{r4, r5, lr}
   b8a12:	f04f 0500 	mov.w	r5, #0
   b8a16:	e00a      	b.n	b8a2e <__aeabi_l2d+0x16>

000b8a18 <__aeabi_l2d>:
   b8a18:	ea50 0201 	orrs.w	r2, r0, r1
   b8a1c:	bf08      	it	eq
   b8a1e:	4770      	bxeq	lr
   b8a20:	b530      	push	{r4, r5, lr}
   b8a22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8a26:	d502      	bpl.n	b8a2e <__aeabi_l2d+0x16>
   b8a28:	4240      	negs	r0, r0
   b8a2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8a2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8a32:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8a36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8a3a:	f43f aed8 	beq.w	b87ee <__adddf3+0xe6>
   b8a3e:	f04f 0203 	mov.w	r2, #3
   b8a42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8a46:	bf18      	it	ne
   b8a48:	3203      	addne	r2, #3
   b8a4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8a4e:	bf18      	it	ne
   b8a50:	3203      	addne	r2, #3
   b8a52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8a56:	f1c2 0320 	rsb	r3, r2, #32
   b8a5a:	fa00 fc03 	lsl.w	ip, r0, r3
   b8a5e:	fa20 f002 	lsr.w	r0, r0, r2
   b8a62:	fa01 fe03 	lsl.w	lr, r1, r3
   b8a66:	ea40 000e 	orr.w	r0, r0, lr
   b8a6a:	fa21 f102 	lsr.w	r1, r1, r2
   b8a6e:	4414      	add	r4, r2
   b8a70:	e6bd      	b.n	b87ee <__adddf3+0xe6>
   b8a72:	bf00      	nop

000b8a74 <__aeabi_dmul>:
   b8a74:	b570      	push	{r4, r5, r6, lr}
   b8a76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8a7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8a7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8a82:	bf1d      	ittte	ne
   b8a84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8a88:	ea94 0f0c 	teqne	r4, ip
   b8a8c:	ea95 0f0c 	teqne	r5, ip
   b8a90:	f000 f8de 	bleq	b8c50 <__aeabi_dmul+0x1dc>
   b8a94:	442c      	add	r4, r5
   b8a96:	ea81 0603 	eor.w	r6, r1, r3
   b8a9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8a9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8aa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8aa6:	bf18      	it	ne
   b8aa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8ab4:	d038      	beq.n	b8b28 <__aeabi_dmul+0xb4>
   b8ab6:	fba0 ce02 	umull	ip, lr, r0, r2
   b8aba:	f04f 0500 	mov.w	r5, #0
   b8abe:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8ac2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8ac6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8aca:	f04f 0600 	mov.w	r6, #0
   b8ace:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8ad2:	f09c 0f00 	teq	ip, #0
   b8ad6:	bf18      	it	ne
   b8ad8:	f04e 0e01 	orrne.w	lr, lr, #1
   b8adc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8ae0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8ae4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8ae8:	d204      	bcs.n	b8af4 <__aeabi_dmul+0x80>
   b8aea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8aee:	416d      	adcs	r5, r5
   b8af0:	eb46 0606 	adc.w	r6, r6, r6
   b8af4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8af8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8afc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8b00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8b04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8b08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8b0c:	bf88      	it	hi
   b8b0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8b12:	d81e      	bhi.n	b8b52 <__aeabi_dmul+0xde>
   b8b14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8b18:	bf08      	it	eq
   b8b1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8b1e:	f150 0000 	adcs.w	r0, r0, #0
   b8b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8b26:	bd70      	pop	{r4, r5, r6, pc}
   b8b28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8b2c:	ea46 0101 	orr.w	r1, r6, r1
   b8b30:	ea40 0002 	orr.w	r0, r0, r2
   b8b34:	ea81 0103 	eor.w	r1, r1, r3
   b8b38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8b3c:	bfc2      	ittt	gt
   b8b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8b46:	bd70      	popgt	{r4, r5, r6, pc}
   b8b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8b4c:	f04f 0e00 	mov.w	lr, #0
   b8b50:	3c01      	subs	r4, #1
   b8b52:	f300 80ab 	bgt.w	b8cac <__aeabi_dmul+0x238>
   b8b56:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8b5a:	bfde      	ittt	le
   b8b5c:	2000      	movle	r0, #0
   b8b5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8b62:	bd70      	pople	{r4, r5, r6, pc}
   b8b64:	f1c4 0400 	rsb	r4, r4, #0
   b8b68:	3c20      	subs	r4, #32
   b8b6a:	da35      	bge.n	b8bd8 <__aeabi_dmul+0x164>
   b8b6c:	340c      	adds	r4, #12
   b8b6e:	dc1b      	bgt.n	b8ba8 <__aeabi_dmul+0x134>
   b8b70:	f104 0414 	add.w	r4, r4, #20
   b8b74:	f1c4 0520 	rsb	r5, r4, #32
   b8b78:	fa00 f305 	lsl.w	r3, r0, r5
   b8b7c:	fa20 f004 	lsr.w	r0, r0, r4
   b8b80:	fa01 f205 	lsl.w	r2, r1, r5
   b8b84:	ea40 0002 	orr.w	r0, r0, r2
   b8b88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8b8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8b90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8b94:	fa21 f604 	lsr.w	r6, r1, r4
   b8b98:	eb42 0106 	adc.w	r1, r2, r6
   b8b9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8ba0:	bf08      	it	eq
   b8ba2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8ba6:	bd70      	pop	{r4, r5, r6, pc}
   b8ba8:	f1c4 040c 	rsb	r4, r4, #12
   b8bac:	f1c4 0520 	rsb	r5, r4, #32
   b8bb0:	fa00 f304 	lsl.w	r3, r0, r4
   b8bb4:	fa20 f005 	lsr.w	r0, r0, r5
   b8bb8:	fa01 f204 	lsl.w	r2, r1, r4
   b8bbc:	ea40 0002 	orr.w	r0, r0, r2
   b8bc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8bc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8bc8:	f141 0100 	adc.w	r1, r1, #0
   b8bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8bd0:	bf08      	it	eq
   b8bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8bd6:	bd70      	pop	{r4, r5, r6, pc}
   b8bd8:	f1c4 0520 	rsb	r5, r4, #32
   b8bdc:	fa00 f205 	lsl.w	r2, r0, r5
   b8be0:	ea4e 0e02 	orr.w	lr, lr, r2
   b8be4:	fa20 f304 	lsr.w	r3, r0, r4
   b8be8:	fa01 f205 	lsl.w	r2, r1, r5
   b8bec:	ea43 0302 	orr.w	r3, r3, r2
   b8bf0:	fa21 f004 	lsr.w	r0, r1, r4
   b8bf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8bf8:	fa21 f204 	lsr.w	r2, r1, r4
   b8bfc:	ea20 0002 	bic.w	r0, r0, r2
   b8c00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8c08:	bf08      	it	eq
   b8c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8c0e:	bd70      	pop	{r4, r5, r6, pc}
   b8c10:	f094 0f00 	teq	r4, #0
   b8c14:	d10f      	bne.n	b8c36 <__aeabi_dmul+0x1c2>
   b8c16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8c1a:	0040      	lsls	r0, r0, #1
   b8c1c:	eb41 0101 	adc.w	r1, r1, r1
   b8c20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8c24:	bf08      	it	eq
   b8c26:	3c01      	subeq	r4, #1
   b8c28:	d0f7      	beq.n	b8c1a <__aeabi_dmul+0x1a6>
   b8c2a:	ea41 0106 	orr.w	r1, r1, r6
   b8c2e:	f095 0f00 	teq	r5, #0
   b8c32:	bf18      	it	ne
   b8c34:	4770      	bxne	lr
   b8c36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8c3a:	0052      	lsls	r2, r2, #1
   b8c3c:	eb43 0303 	adc.w	r3, r3, r3
   b8c40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8c44:	bf08      	it	eq
   b8c46:	3d01      	subeq	r5, #1
   b8c48:	d0f7      	beq.n	b8c3a <__aeabi_dmul+0x1c6>
   b8c4a:	ea43 0306 	orr.w	r3, r3, r6
   b8c4e:	4770      	bx	lr
   b8c50:	ea94 0f0c 	teq	r4, ip
   b8c54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8c58:	bf18      	it	ne
   b8c5a:	ea95 0f0c 	teqne	r5, ip
   b8c5e:	d00c      	beq.n	b8c7a <__aeabi_dmul+0x206>
   b8c60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8c64:	bf18      	it	ne
   b8c66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8c6a:	d1d1      	bne.n	b8c10 <__aeabi_dmul+0x19c>
   b8c6c:	ea81 0103 	eor.w	r1, r1, r3
   b8c70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8c74:	f04f 0000 	mov.w	r0, #0
   b8c78:	bd70      	pop	{r4, r5, r6, pc}
   b8c7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8c7e:	bf06      	itte	eq
   b8c80:	4610      	moveq	r0, r2
   b8c82:	4619      	moveq	r1, r3
   b8c84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8c88:	d019      	beq.n	b8cbe <__aeabi_dmul+0x24a>
   b8c8a:	ea94 0f0c 	teq	r4, ip
   b8c8e:	d102      	bne.n	b8c96 <__aeabi_dmul+0x222>
   b8c90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8c94:	d113      	bne.n	b8cbe <__aeabi_dmul+0x24a>
   b8c96:	ea95 0f0c 	teq	r5, ip
   b8c9a:	d105      	bne.n	b8ca8 <__aeabi_dmul+0x234>
   b8c9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8ca0:	bf1c      	itt	ne
   b8ca2:	4610      	movne	r0, r2
   b8ca4:	4619      	movne	r1, r3
   b8ca6:	d10a      	bne.n	b8cbe <__aeabi_dmul+0x24a>
   b8ca8:	ea81 0103 	eor.w	r1, r1, r3
   b8cac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8cb0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8cb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8cb8:	f04f 0000 	mov.w	r0, #0
   b8cbc:	bd70      	pop	{r4, r5, r6, pc}
   b8cbe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8cc2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8cc6:	bd70      	pop	{r4, r5, r6, pc}

000b8cc8 <__aeabi_ddiv>:
   b8cc8:	b570      	push	{r4, r5, r6, lr}
   b8cca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8cce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8cd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8cd6:	bf1d      	ittte	ne
   b8cd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8cdc:	ea94 0f0c 	teqne	r4, ip
   b8ce0:	ea95 0f0c 	teqne	r5, ip
   b8ce4:	f000 f8a7 	bleq	b8e36 <__aeabi_ddiv+0x16e>
   b8ce8:	eba4 0405 	sub.w	r4, r4, r5
   b8cec:	ea81 0e03 	eor.w	lr, r1, r3
   b8cf0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8cf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8cf8:	f000 8088 	beq.w	b8e0c <__aeabi_ddiv+0x144>
   b8cfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8d00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8d04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8d08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8d0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8d10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8d14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8d18:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8d1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8d20:	429d      	cmp	r5, r3
   b8d22:	bf08      	it	eq
   b8d24:	4296      	cmpeq	r6, r2
   b8d26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8d2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8d2e:	d202      	bcs.n	b8d36 <__aeabi_ddiv+0x6e>
   b8d30:	085b      	lsrs	r3, r3, #1
   b8d32:	ea4f 0232 	mov.w	r2, r2, rrx
   b8d36:	1ab6      	subs	r6, r6, r2
   b8d38:	eb65 0503 	sbc.w	r5, r5, r3
   b8d3c:	085b      	lsrs	r3, r3, #1
   b8d3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8d42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8d46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8d52:	bf22      	ittt	cs
   b8d54:	1ab6      	subcs	r6, r6, r2
   b8d56:	4675      	movcs	r5, lr
   b8d58:	ea40 000c 	orrcs.w	r0, r0, ip
   b8d5c:	085b      	lsrs	r3, r3, #1
   b8d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8d62:	ebb6 0e02 	subs.w	lr, r6, r2
   b8d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8d6a:	bf22      	ittt	cs
   b8d6c:	1ab6      	subcs	r6, r6, r2
   b8d6e:	4675      	movcs	r5, lr
   b8d70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8d74:	085b      	lsrs	r3, r3, #1
   b8d76:	ea4f 0232 	mov.w	r2, r2, rrx
   b8d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8d82:	bf22      	ittt	cs
   b8d84:	1ab6      	subcs	r6, r6, r2
   b8d86:	4675      	movcs	r5, lr
   b8d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8d8c:	085b      	lsrs	r3, r3, #1
   b8d8e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8d92:	ebb6 0e02 	subs.w	lr, r6, r2
   b8d96:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8d9a:	bf22      	ittt	cs
   b8d9c:	1ab6      	subcs	r6, r6, r2
   b8d9e:	4675      	movcs	r5, lr
   b8da0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8da4:	ea55 0e06 	orrs.w	lr, r5, r6
   b8da8:	d018      	beq.n	b8ddc <__aeabi_ddiv+0x114>
   b8daa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8dae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8db2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8db6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8dba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8dbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8dc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8dc6:	d1c0      	bne.n	b8d4a <__aeabi_ddiv+0x82>
   b8dc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8dcc:	d10b      	bne.n	b8de6 <__aeabi_ddiv+0x11e>
   b8dce:	ea41 0100 	orr.w	r1, r1, r0
   b8dd2:	f04f 0000 	mov.w	r0, #0
   b8dd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8dda:	e7b6      	b.n	b8d4a <__aeabi_ddiv+0x82>
   b8ddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8de0:	bf04      	itt	eq
   b8de2:	4301      	orreq	r1, r0
   b8de4:	2000      	moveq	r0, #0
   b8de6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8dea:	bf88      	it	hi
   b8dec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8df0:	f63f aeaf 	bhi.w	b8b52 <__aeabi_dmul+0xde>
   b8df4:	ebb5 0c03 	subs.w	ip, r5, r3
   b8df8:	bf04      	itt	eq
   b8dfa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8dfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8e02:	f150 0000 	adcs.w	r0, r0, #0
   b8e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8e0a:	bd70      	pop	{r4, r5, r6, pc}
   b8e0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8e10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8e14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8e18:	bfc2      	ittt	gt
   b8e1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8e1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8e22:	bd70      	popgt	{r4, r5, r6, pc}
   b8e24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8e28:	f04f 0e00 	mov.w	lr, #0
   b8e2c:	3c01      	subs	r4, #1
   b8e2e:	e690      	b.n	b8b52 <__aeabi_dmul+0xde>
   b8e30:	ea45 0e06 	orr.w	lr, r5, r6
   b8e34:	e68d      	b.n	b8b52 <__aeabi_dmul+0xde>
   b8e36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8e3a:	ea94 0f0c 	teq	r4, ip
   b8e3e:	bf08      	it	eq
   b8e40:	ea95 0f0c 	teqeq	r5, ip
   b8e44:	f43f af3b 	beq.w	b8cbe <__aeabi_dmul+0x24a>
   b8e48:	ea94 0f0c 	teq	r4, ip
   b8e4c:	d10a      	bne.n	b8e64 <__aeabi_ddiv+0x19c>
   b8e4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8e52:	f47f af34 	bne.w	b8cbe <__aeabi_dmul+0x24a>
   b8e56:	ea95 0f0c 	teq	r5, ip
   b8e5a:	f47f af25 	bne.w	b8ca8 <__aeabi_dmul+0x234>
   b8e5e:	4610      	mov	r0, r2
   b8e60:	4619      	mov	r1, r3
   b8e62:	e72c      	b.n	b8cbe <__aeabi_dmul+0x24a>
   b8e64:	ea95 0f0c 	teq	r5, ip
   b8e68:	d106      	bne.n	b8e78 <__aeabi_ddiv+0x1b0>
   b8e6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8e6e:	f43f aefd 	beq.w	b8c6c <__aeabi_dmul+0x1f8>
   b8e72:	4610      	mov	r0, r2
   b8e74:	4619      	mov	r1, r3
   b8e76:	e722      	b.n	b8cbe <__aeabi_dmul+0x24a>
   b8e78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8e7c:	bf18      	it	ne
   b8e7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8e82:	f47f aec5 	bne.w	b8c10 <__aeabi_dmul+0x19c>
   b8e86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8e8a:	f47f af0d 	bne.w	b8ca8 <__aeabi_dmul+0x234>
   b8e8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8e92:	f47f aeeb 	bne.w	b8c6c <__aeabi_dmul+0x1f8>
   b8e96:	e712      	b.n	b8cbe <__aeabi_dmul+0x24a>

000b8e98 <__gedf2>:
   b8e98:	f04f 3cff 	mov.w	ip, #4294967295
   b8e9c:	e006      	b.n	b8eac <__cmpdf2+0x4>
   b8e9e:	bf00      	nop

000b8ea0 <__ledf2>:
   b8ea0:	f04f 0c01 	mov.w	ip, #1
   b8ea4:	e002      	b.n	b8eac <__cmpdf2+0x4>
   b8ea6:	bf00      	nop

000b8ea8 <__cmpdf2>:
   b8ea8:	f04f 0c01 	mov.w	ip, #1
   b8eac:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8eb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8eb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8ebc:	bf18      	it	ne
   b8ebe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8ec2:	d01b      	beq.n	b8efc <__cmpdf2+0x54>
   b8ec4:	b001      	add	sp, #4
   b8ec6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8eca:	bf0c      	ite	eq
   b8ecc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8ed0:	ea91 0f03 	teqne	r1, r3
   b8ed4:	bf02      	ittt	eq
   b8ed6:	ea90 0f02 	teqeq	r0, r2
   b8eda:	2000      	moveq	r0, #0
   b8edc:	4770      	bxeq	lr
   b8ede:	f110 0f00 	cmn.w	r0, #0
   b8ee2:	ea91 0f03 	teq	r1, r3
   b8ee6:	bf58      	it	pl
   b8ee8:	4299      	cmppl	r1, r3
   b8eea:	bf08      	it	eq
   b8eec:	4290      	cmpeq	r0, r2
   b8eee:	bf2c      	ite	cs
   b8ef0:	17d8      	asrcs	r0, r3, #31
   b8ef2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8ef6:	f040 0001 	orr.w	r0, r0, #1
   b8efa:	4770      	bx	lr
   b8efc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8f00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8f04:	d102      	bne.n	b8f0c <__cmpdf2+0x64>
   b8f06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8f0a:	d107      	bne.n	b8f1c <__cmpdf2+0x74>
   b8f0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8f14:	d1d6      	bne.n	b8ec4 <__cmpdf2+0x1c>
   b8f16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8f1a:	d0d3      	beq.n	b8ec4 <__cmpdf2+0x1c>
   b8f1c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8f20:	4770      	bx	lr
   b8f22:	bf00      	nop

000b8f24 <__aeabi_cdrcmple>:
   b8f24:	4684      	mov	ip, r0
   b8f26:	4610      	mov	r0, r2
   b8f28:	4662      	mov	r2, ip
   b8f2a:	468c      	mov	ip, r1
   b8f2c:	4619      	mov	r1, r3
   b8f2e:	4663      	mov	r3, ip
   b8f30:	e000      	b.n	b8f34 <__aeabi_cdcmpeq>
   b8f32:	bf00      	nop

000b8f34 <__aeabi_cdcmpeq>:
   b8f34:	b501      	push	{r0, lr}
   b8f36:	f7ff ffb7 	bl	b8ea8 <__cmpdf2>
   b8f3a:	2800      	cmp	r0, #0
   b8f3c:	bf48      	it	mi
   b8f3e:	f110 0f00 	cmnmi.w	r0, #0
   b8f42:	bd01      	pop	{r0, pc}

000b8f44 <__aeabi_dcmpeq>:
   b8f44:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8f48:	f7ff fff4 	bl	b8f34 <__aeabi_cdcmpeq>
   b8f4c:	bf0c      	ite	eq
   b8f4e:	2001      	moveq	r0, #1
   b8f50:	2000      	movne	r0, #0
   b8f52:	f85d fb08 	ldr.w	pc, [sp], #8
   b8f56:	bf00      	nop

000b8f58 <__aeabi_dcmplt>:
   b8f58:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8f5c:	f7ff ffea 	bl	b8f34 <__aeabi_cdcmpeq>
   b8f60:	bf34      	ite	cc
   b8f62:	2001      	movcc	r0, #1
   b8f64:	2000      	movcs	r0, #0
   b8f66:	f85d fb08 	ldr.w	pc, [sp], #8
   b8f6a:	bf00      	nop

000b8f6c <__aeabi_dcmple>:
   b8f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8f70:	f7ff ffe0 	bl	b8f34 <__aeabi_cdcmpeq>
   b8f74:	bf94      	ite	ls
   b8f76:	2001      	movls	r0, #1
   b8f78:	2000      	movhi	r0, #0
   b8f7a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8f7e:	bf00      	nop

000b8f80 <__aeabi_dcmpge>:
   b8f80:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8f84:	f7ff ffce 	bl	b8f24 <__aeabi_cdrcmple>
   b8f88:	bf94      	ite	ls
   b8f8a:	2001      	movls	r0, #1
   b8f8c:	2000      	movhi	r0, #0
   b8f8e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8f92:	bf00      	nop

000b8f94 <__aeabi_dcmpgt>:
   b8f94:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8f98:	f7ff ffc4 	bl	b8f24 <__aeabi_cdrcmple>
   b8f9c:	bf34      	ite	cc
   b8f9e:	2001      	movcc	r0, #1
   b8fa0:	2000      	movcs	r0, #0
   b8fa2:	f85d fb08 	ldr.w	pc, [sp], #8
   b8fa6:	bf00      	nop

000b8fa8 <__aeabi_dcmpun>:
   b8fa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8fb0:	d102      	bne.n	b8fb8 <__aeabi_dcmpun+0x10>
   b8fb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8fb6:	d10a      	bne.n	b8fce <__aeabi_dcmpun+0x26>
   b8fb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8fbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8fc0:	d102      	bne.n	b8fc8 <__aeabi_dcmpun+0x20>
   b8fc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8fc6:	d102      	bne.n	b8fce <__aeabi_dcmpun+0x26>
   b8fc8:	f04f 0000 	mov.w	r0, #0
   b8fcc:	4770      	bx	lr
   b8fce:	f04f 0001 	mov.w	r0, #1
   b8fd2:	4770      	bx	lr

000b8fd4 <__aeabi_d2iz>:
   b8fd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8fd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8fdc:	d215      	bcs.n	b900a <__aeabi_d2iz+0x36>
   b8fde:	d511      	bpl.n	b9004 <__aeabi_d2iz+0x30>
   b8fe0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8fe4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8fe8:	d912      	bls.n	b9010 <__aeabi_d2iz+0x3c>
   b8fea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8ff2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8ff6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8ffa:	fa23 f002 	lsr.w	r0, r3, r2
   b8ffe:	bf18      	it	ne
   b9000:	4240      	negne	r0, r0
   b9002:	4770      	bx	lr
   b9004:	f04f 0000 	mov.w	r0, #0
   b9008:	4770      	bx	lr
   b900a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b900e:	d105      	bne.n	b901c <__aeabi_d2iz+0x48>
   b9010:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b9014:	bf08      	it	eq
   b9016:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b901a:	4770      	bx	lr
   b901c:	f04f 0000 	mov.w	r0, #0
   b9020:	4770      	bx	lr
   b9022:	bf00      	nop

000b9024 <__aeabi_d2uiz>:
   b9024:	004a      	lsls	r2, r1, #1
   b9026:	d211      	bcs.n	b904c <__aeabi_d2uiz+0x28>
   b9028:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b902c:	d211      	bcs.n	b9052 <__aeabi_d2uiz+0x2e>
   b902e:	d50d      	bpl.n	b904c <__aeabi_d2uiz+0x28>
   b9030:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9034:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9038:	d40e      	bmi.n	b9058 <__aeabi_d2uiz+0x34>
   b903a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b903e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9042:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9046:	fa23 f002 	lsr.w	r0, r3, r2
   b904a:	4770      	bx	lr
   b904c:	f04f 0000 	mov.w	r0, #0
   b9050:	4770      	bx	lr
   b9052:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9056:	d102      	bne.n	b905e <__aeabi_d2uiz+0x3a>
   b9058:	f04f 30ff 	mov.w	r0, #4294967295
   b905c:	4770      	bx	lr
   b905e:	f04f 0000 	mov.w	r0, #0
   b9062:	4770      	bx	lr

000b9064 <__aeabi_d2f>:
   b9064:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9068:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b906c:	bf24      	itt	cs
   b906e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9072:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9076:	d90d      	bls.n	b9094 <__aeabi_d2f+0x30>
   b9078:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b907c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9080:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9084:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9088:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b908c:	bf08      	it	eq
   b908e:	f020 0001 	biceq.w	r0, r0, #1
   b9092:	4770      	bx	lr
   b9094:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9098:	d121      	bne.n	b90de <__aeabi_d2f+0x7a>
   b909a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b909e:	bfbc      	itt	lt
   b90a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b90a4:	4770      	bxlt	lr
   b90a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b90aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b90ae:	f1c2 0218 	rsb	r2, r2, #24
   b90b2:	f1c2 0c20 	rsb	ip, r2, #32
   b90b6:	fa10 f30c 	lsls.w	r3, r0, ip
   b90ba:	fa20 f002 	lsr.w	r0, r0, r2
   b90be:	bf18      	it	ne
   b90c0:	f040 0001 	orrne.w	r0, r0, #1
   b90c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b90c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b90cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   b90d0:	ea40 000c 	orr.w	r0, r0, ip
   b90d4:	fa23 f302 	lsr.w	r3, r3, r2
   b90d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b90dc:	e7cc      	b.n	b9078 <__aeabi_d2f+0x14>
   b90de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b90e2:	d107      	bne.n	b90f4 <__aeabi_d2f+0x90>
   b90e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b90e8:	bf1e      	ittt	ne
   b90ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b90ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b90f2:	4770      	bxne	lr
   b90f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b90f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b90fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9100:	4770      	bx	lr
   b9102:	bf00      	nop

000b9104 <__aeabi_uldivmod>:
   b9104:	b953      	cbnz	r3, b911c <__aeabi_uldivmod+0x18>
   b9106:	b94a      	cbnz	r2, b911c <__aeabi_uldivmod+0x18>
   b9108:	2900      	cmp	r1, #0
   b910a:	bf08      	it	eq
   b910c:	2800      	cmpeq	r0, #0
   b910e:	bf1c      	itt	ne
   b9110:	f04f 31ff 	movne.w	r1, #4294967295
   b9114:	f04f 30ff 	movne.w	r0, #4294967295
   b9118:	f000 b9c6 	b.w	b94a8 <__aeabi_idiv0>
   b911c:	f1ad 0c08 	sub.w	ip, sp, #8
   b9120:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b9124:	f000 f858 	bl	b91d8 <__udivmoddi4>
   b9128:	f8dd e004 	ldr.w	lr, [sp, #4]
   b912c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9130:	b004      	add	sp, #16
   b9132:	4770      	bx	lr

000b9134 <__aeabi_f2lz>:
   b9134:	ee07 0a90 	vmov	s15, r0
   b9138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b913c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9140:	d401      	bmi.n	b9146 <__aeabi_f2lz+0x12>
   b9142:	f000 b80b 	b.w	b915c <__aeabi_f2ulz>
   b9146:	eef1 7a67 	vneg.f32	s15, s15
   b914a:	b508      	push	{r3, lr}
   b914c:	ee17 0a90 	vmov	r0, s15
   b9150:	f000 f804 	bl	b915c <__aeabi_f2ulz>
   b9154:	4240      	negs	r0, r0
   b9156:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b915a:	bd08      	pop	{r3, pc}

000b915c <__aeabi_f2ulz>:
   b915c:	b5d0      	push	{r4, r6, r7, lr}
   b915e:	f7ff fc31 	bl	b89c4 <__aeabi_f2d>
   b9162:	4b0c      	ldr	r3, [pc, #48]	; (b9194 <__aeabi_f2ulz+0x38>)
   b9164:	2200      	movs	r2, #0
   b9166:	4606      	mov	r6, r0
   b9168:	460f      	mov	r7, r1
   b916a:	f7ff fc83 	bl	b8a74 <__aeabi_dmul>
   b916e:	f7ff ff59 	bl	b9024 <__aeabi_d2uiz>
   b9172:	4604      	mov	r4, r0
   b9174:	f7ff fc04 	bl	b8980 <__aeabi_ui2d>
   b9178:	4b07      	ldr	r3, [pc, #28]	; (b9198 <__aeabi_f2ulz+0x3c>)
   b917a:	2200      	movs	r2, #0
   b917c:	f7ff fc7a 	bl	b8a74 <__aeabi_dmul>
   b9180:	4602      	mov	r2, r0
   b9182:	460b      	mov	r3, r1
   b9184:	4630      	mov	r0, r6
   b9186:	4639      	mov	r1, r7
   b9188:	f7ff fabc 	bl	b8704 <__aeabi_dsub>
   b918c:	f7ff ff4a 	bl	b9024 <__aeabi_d2uiz>
   b9190:	4621      	mov	r1, r4
   b9192:	bdd0      	pop	{r4, r6, r7, pc}
   b9194:	3df00000 	.word	0x3df00000
   b9198:	41f00000 	.word	0x41f00000

000b919c <__aeabi_d2ulz>:
   b919c:	b5d0      	push	{r4, r6, r7, lr}
   b919e:	4b0c      	ldr	r3, [pc, #48]	; (b91d0 <__aeabi_d2ulz+0x34>)
   b91a0:	2200      	movs	r2, #0
   b91a2:	4606      	mov	r6, r0
   b91a4:	460f      	mov	r7, r1
   b91a6:	f7ff fc65 	bl	b8a74 <__aeabi_dmul>
   b91aa:	f7ff ff3b 	bl	b9024 <__aeabi_d2uiz>
   b91ae:	4604      	mov	r4, r0
   b91b0:	f7ff fbe6 	bl	b8980 <__aeabi_ui2d>
   b91b4:	4b07      	ldr	r3, [pc, #28]	; (b91d4 <__aeabi_d2ulz+0x38>)
   b91b6:	2200      	movs	r2, #0
   b91b8:	f7ff fc5c 	bl	b8a74 <__aeabi_dmul>
   b91bc:	4602      	mov	r2, r0
   b91be:	460b      	mov	r3, r1
   b91c0:	4630      	mov	r0, r6
   b91c2:	4639      	mov	r1, r7
   b91c4:	f7ff fa9e 	bl	b8704 <__aeabi_dsub>
   b91c8:	f7ff ff2c 	bl	b9024 <__aeabi_d2uiz>
   b91cc:	4621      	mov	r1, r4
   b91ce:	bdd0      	pop	{r4, r6, r7, pc}
   b91d0:	3df00000 	.word	0x3df00000
   b91d4:	41f00000 	.word	0x41f00000

000b91d8 <__udivmoddi4>:
   b91d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b91dc:	9d08      	ldr	r5, [sp, #32]
   b91de:	4604      	mov	r4, r0
   b91e0:	468e      	mov	lr, r1
   b91e2:	2b00      	cmp	r3, #0
   b91e4:	d14d      	bne.n	b9282 <__udivmoddi4+0xaa>
   b91e6:	428a      	cmp	r2, r1
   b91e8:	4694      	mov	ip, r2
   b91ea:	d969      	bls.n	b92c0 <__udivmoddi4+0xe8>
   b91ec:	fab2 f282 	clz	r2, r2
   b91f0:	b152      	cbz	r2, b9208 <__udivmoddi4+0x30>
   b91f2:	fa01 f302 	lsl.w	r3, r1, r2
   b91f6:	f1c2 0120 	rsb	r1, r2, #32
   b91fa:	fa20 f101 	lsr.w	r1, r0, r1
   b91fe:	fa0c fc02 	lsl.w	ip, ip, r2
   b9202:	ea41 0e03 	orr.w	lr, r1, r3
   b9206:	4094      	lsls	r4, r2
   b9208:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b920c:	0c21      	lsrs	r1, r4, #16
   b920e:	fbbe f6f8 	udiv	r6, lr, r8
   b9212:	fa1f f78c 	uxth.w	r7, ip
   b9216:	fb08 e316 	mls	r3, r8, r6, lr
   b921a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b921e:	fb06 f107 	mul.w	r1, r6, r7
   b9222:	4299      	cmp	r1, r3
   b9224:	d90a      	bls.n	b923c <__udivmoddi4+0x64>
   b9226:	eb1c 0303 	adds.w	r3, ip, r3
   b922a:	f106 30ff 	add.w	r0, r6, #4294967295
   b922e:	f080 811f 	bcs.w	b9470 <__udivmoddi4+0x298>
   b9232:	4299      	cmp	r1, r3
   b9234:	f240 811c 	bls.w	b9470 <__udivmoddi4+0x298>
   b9238:	3e02      	subs	r6, #2
   b923a:	4463      	add	r3, ip
   b923c:	1a5b      	subs	r3, r3, r1
   b923e:	b2a4      	uxth	r4, r4
   b9240:	fbb3 f0f8 	udiv	r0, r3, r8
   b9244:	fb08 3310 	mls	r3, r8, r0, r3
   b9248:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b924c:	fb00 f707 	mul.w	r7, r0, r7
   b9250:	42a7      	cmp	r7, r4
   b9252:	d90a      	bls.n	b926a <__udivmoddi4+0x92>
   b9254:	eb1c 0404 	adds.w	r4, ip, r4
   b9258:	f100 33ff 	add.w	r3, r0, #4294967295
   b925c:	f080 810a 	bcs.w	b9474 <__udivmoddi4+0x29c>
   b9260:	42a7      	cmp	r7, r4
   b9262:	f240 8107 	bls.w	b9474 <__udivmoddi4+0x29c>
   b9266:	4464      	add	r4, ip
   b9268:	3802      	subs	r0, #2
   b926a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b926e:	1be4      	subs	r4, r4, r7
   b9270:	2600      	movs	r6, #0
   b9272:	b11d      	cbz	r5, b927c <__udivmoddi4+0xa4>
   b9274:	40d4      	lsrs	r4, r2
   b9276:	2300      	movs	r3, #0
   b9278:	e9c5 4300 	strd	r4, r3, [r5]
   b927c:	4631      	mov	r1, r6
   b927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9282:	428b      	cmp	r3, r1
   b9284:	d909      	bls.n	b929a <__udivmoddi4+0xc2>
   b9286:	2d00      	cmp	r5, #0
   b9288:	f000 80ef 	beq.w	b946a <__udivmoddi4+0x292>
   b928c:	2600      	movs	r6, #0
   b928e:	e9c5 0100 	strd	r0, r1, [r5]
   b9292:	4630      	mov	r0, r6
   b9294:	4631      	mov	r1, r6
   b9296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b929a:	fab3 f683 	clz	r6, r3
   b929e:	2e00      	cmp	r6, #0
   b92a0:	d14a      	bne.n	b9338 <__udivmoddi4+0x160>
   b92a2:	428b      	cmp	r3, r1
   b92a4:	d302      	bcc.n	b92ac <__udivmoddi4+0xd4>
   b92a6:	4282      	cmp	r2, r0
   b92a8:	f200 80f9 	bhi.w	b949e <__udivmoddi4+0x2c6>
   b92ac:	1a84      	subs	r4, r0, r2
   b92ae:	eb61 0303 	sbc.w	r3, r1, r3
   b92b2:	2001      	movs	r0, #1
   b92b4:	469e      	mov	lr, r3
   b92b6:	2d00      	cmp	r5, #0
   b92b8:	d0e0      	beq.n	b927c <__udivmoddi4+0xa4>
   b92ba:	e9c5 4e00 	strd	r4, lr, [r5]
   b92be:	e7dd      	b.n	b927c <__udivmoddi4+0xa4>
   b92c0:	b902      	cbnz	r2, b92c4 <__udivmoddi4+0xec>
   b92c2:	deff      	udf	#255	; 0xff
   b92c4:	fab2 f282 	clz	r2, r2
   b92c8:	2a00      	cmp	r2, #0
   b92ca:	f040 8092 	bne.w	b93f2 <__udivmoddi4+0x21a>
   b92ce:	eba1 010c 	sub.w	r1, r1, ip
   b92d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b92d6:	fa1f fe8c 	uxth.w	lr, ip
   b92da:	2601      	movs	r6, #1
   b92dc:	0c20      	lsrs	r0, r4, #16
   b92de:	fbb1 f3f7 	udiv	r3, r1, r7
   b92e2:	fb07 1113 	mls	r1, r7, r3, r1
   b92e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b92ea:	fb0e f003 	mul.w	r0, lr, r3
   b92ee:	4288      	cmp	r0, r1
   b92f0:	d908      	bls.n	b9304 <__udivmoddi4+0x12c>
   b92f2:	eb1c 0101 	adds.w	r1, ip, r1
   b92f6:	f103 38ff 	add.w	r8, r3, #4294967295
   b92fa:	d202      	bcs.n	b9302 <__udivmoddi4+0x12a>
   b92fc:	4288      	cmp	r0, r1
   b92fe:	f200 80cb 	bhi.w	b9498 <__udivmoddi4+0x2c0>
   b9302:	4643      	mov	r3, r8
   b9304:	1a09      	subs	r1, r1, r0
   b9306:	b2a4      	uxth	r4, r4
   b9308:	fbb1 f0f7 	udiv	r0, r1, r7
   b930c:	fb07 1110 	mls	r1, r7, r0, r1
   b9310:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b9314:	fb0e fe00 	mul.w	lr, lr, r0
   b9318:	45a6      	cmp	lr, r4
   b931a:	d908      	bls.n	b932e <__udivmoddi4+0x156>
   b931c:	eb1c 0404 	adds.w	r4, ip, r4
   b9320:	f100 31ff 	add.w	r1, r0, #4294967295
   b9324:	d202      	bcs.n	b932c <__udivmoddi4+0x154>
   b9326:	45a6      	cmp	lr, r4
   b9328:	f200 80bb 	bhi.w	b94a2 <__udivmoddi4+0x2ca>
   b932c:	4608      	mov	r0, r1
   b932e:	eba4 040e 	sub.w	r4, r4, lr
   b9332:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b9336:	e79c      	b.n	b9272 <__udivmoddi4+0x9a>
   b9338:	f1c6 0720 	rsb	r7, r6, #32
   b933c:	40b3      	lsls	r3, r6
   b933e:	fa22 fc07 	lsr.w	ip, r2, r7
   b9342:	ea4c 0c03 	orr.w	ip, ip, r3
   b9346:	fa20 f407 	lsr.w	r4, r0, r7
   b934a:	fa01 f306 	lsl.w	r3, r1, r6
   b934e:	431c      	orrs	r4, r3
   b9350:	40f9      	lsrs	r1, r7
   b9352:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b9356:	fa00 f306 	lsl.w	r3, r0, r6
   b935a:	fbb1 f8f9 	udiv	r8, r1, r9
   b935e:	0c20      	lsrs	r0, r4, #16
   b9360:	fa1f fe8c 	uxth.w	lr, ip
   b9364:	fb09 1118 	mls	r1, r9, r8, r1
   b9368:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b936c:	fb08 f00e 	mul.w	r0, r8, lr
   b9370:	4288      	cmp	r0, r1
   b9372:	fa02 f206 	lsl.w	r2, r2, r6
   b9376:	d90b      	bls.n	b9390 <__udivmoddi4+0x1b8>
   b9378:	eb1c 0101 	adds.w	r1, ip, r1
   b937c:	f108 3aff 	add.w	sl, r8, #4294967295
   b9380:	f080 8088 	bcs.w	b9494 <__udivmoddi4+0x2bc>
   b9384:	4288      	cmp	r0, r1
   b9386:	f240 8085 	bls.w	b9494 <__udivmoddi4+0x2bc>
   b938a:	f1a8 0802 	sub.w	r8, r8, #2
   b938e:	4461      	add	r1, ip
   b9390:	1a09      	subs	r1, r1, r0
   b9392:	b2a4      	uxth	r4, r4
   b9394:	fbb1 f0f9 	udiv	r0, r1, r9
   b9398:	fb09 1110 	mls	r1, r9, r0, r1
   b939c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b93a0:	fb00 fe0e 	mul.w	lr, r0, lr
   b93a4:	458e      	cmp	lr, r1
   b93a6:	d908      	bls.n	b93ba <__udivmoddi4+0x1e2>
   b93a8:	eb1c 0101 	adds.w	r1, ip, r1
   b93ac:	f100 34ff 	add.w	r4, r0, #4294967295
   b93b0:	d26c      	bcs.n	b948c <__udivmoddi4+0x2b4>
   b93b2:	458e      	cmp	lr, r1
   b93b4:	d96a      	bls.n	b948c <__udivmoddi4+0x2b4>
   b93b6:	3802      	subs	r0, #2
   b93b8:	4461      	add	r1, ip
   b93ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b93be:	fba0 9402 	umull	r9, r4, r0, r2
   b93c2:	eba1 010e 	sub.w	r1, r1, lr
   b93c6:	42a1      	cmp	r1, r4
   b93c8:	46c8      	mov	r8, r9
   b93ca:	46a6      	mov	lr, r4
   b93cc:	d356      	bcc.n	b947c <__udivmoddi4+0x2a4>
   b93ce:	d053      	beq.n	b9478 <__udivmoddi4+0x2a0>
   b93d0:	b15d      	cbz	r5, b93ea <__udivmoddi4+0x212>
   b93d2:	ebb3 0208 	subs.w	r2, r3, r8
   b93d6:	eb61 010e 	sbc.w	r1, r1, lr
   b93da:	fa01 f707 	lsl.w	r7, r1, r7
   b93de:	fa22 f306 	lsr.w	r3, r2, r6
   b93e2:	40f1      	lsrs	r1, r6
   b93e4:	431f      	orrs	r7, r3
   b93e6:	e9c5 7100 	strd	r7, r1, [r5]
   b93ea:	2600      	movs	r6, #0
   b93ec:	4631      	mov	r1, r6
   b93ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b93f2:	f1c2 0320 	rsb	r3, r2, #32
   b93f6:	40d8      	lsrs	r0, r3
   b93f8:	fa0c fc02 	lsl.w	ip, ip, r2
   b93fc:	fa21 f303 	lsr.w	r3, r1, r3
   b9400:	4091      	lsls	r1, r2
   b9402:	4301      	orrs	r1, r0
   b9404:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b9408:	fa1f fe8c 	uxth.w	lr, ip
   b940c:	fbb3 f0f7 	udiv	r0, r3, r7
   b9410:	fb07 3610 	mls	r6, r7, r0, r3
   b9414:	0c0b      	lsrs	r3, r1, #16
   b9416:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b941a:	fb00 f60e 	mul.w	r6, r0, lr
   b941e:	429e      	cmp	r6, r3
   b9420:	fa04 f402 	lsl.w	r4, r4, r2
   b9424:	d908      	bls.n	b9438 <__udivmoddi4+0x260>
   b9426:	eb1c 0303 	adds.w	r3, ip, r3
   b942a:	f100 38ff 	add.w	r8, r0, #4294967295
   b942e:	d22f      	bcs.n	b9490 <__udivmoddi4+0x2b8>
   b9430:	429e      	cmp	r6, r3
   b9432:	d92d      	bls.n	b9490 <__udivmoddi4+0x2b8>
   b9434:	3802      	subs	r0, #2
   b9436:	4463      	add	r3, ip
   b9438:	1b9b      	subs	r3, r3, r6
   b943a:	b289      	uxth	r1, r1
   b943c:	fbb3 f6f7 	udiv	r6, r3, r7
   b9440:	fb07 3316 	mls	r3, r7, r6, r3
   b9444:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b9448:	fb06 f30e 	mul.w	r3, r6, lr
   b944c:	428b      	cmp	r3, r1
   b944e:	d908      	bls.n	b9462 <__udivmoddi4+0x28a>
   b9450:	eb1c 0101 	adds.w	r1, ip, r1
   b9454:	f106 38ff 	add.w	r8, r6, #4294967295
   b9458:	d216      	bcs.n	b9488 <__udivmoddi4+0x2b0>
   b945a:	428b      	cmp	r3, r1
   b945c:	d914      	bls.n	b9488 <__udivmoddi4+0x2b0>
   b945e:	3e02      	subs	r6, #2
   b9460:	4461      	add	r1, ip
   b9462:	1ac9      	subs	r1, r1, r3
   b9464:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b9468:	e738      	b.n	b92dc <__udivmoddi4+0x104>
   b946a:	462e      	mov	r6, r5
   b946c:	4628      	mov	r0, r5
   b946e:	e705      	b.n	b927c <__udivmoddi4+0xa4>
   b9470:	4606      	mov	r6, r0
   b9472:	e6e3      	b.n	b923c <__udivmoddi4+0x64>
   b9474:	4618      	mov	r0, r3
   b9476:	e6f8      	b.n	b926a <__udivmoddi4+0x92>
   b9478:	454b      	cmp	r3, r9
   b947a:	d2a9      	bcs.n	b93d0 <__udivmoddi4+0x1f8>
   b947c:	ebb9 0802 	subs.w	r8, r9, r2
   b9480:	eb64 0e0c 	sbc.w	lr, r4, ip
   b9484:	3801      	subs	r0, #1
   b9486:	e7a3      	b.n	b93d0 <__udivmoddi4+0x1f8>
   b9488:	4646      	mov	r6, r8
   b948a:	e7ea      	b.n	b9462 <__udivmoddi4+0x28a>
   b948c:	4620      	mov	r0, r4
   b948e:	e794      	b.n	b93ba <__udivmoddi4+0x1e2>
   b9490:	4640      	mov	r0, r8
   b9492:	e7d1      	b.n	b9438 <__udivmoddi4+0x260>
   b9494:	46d0      	mov	r8, sl
   b9496:	e77b      	b.n	b9390 <__udivmoddi4+0x1b8>
   b9498:	3b02      	subs	r3, #2
   b949a:	4461      	add	r1, ip
   b949c:	e732      	b.n	b9304 <__udivmoddi4+0x12c>
   b949e:	4630      	mov	r0, r6
   b94a0:	e709      	b.n	b92b6 <__udivmoddi4+0xde>
   b94a2:	4464      	add	r4, ip
   b94a4:	3802      	subs	r0, #2
   b94a6:	e742      	b.n	b932e <__udivmoddi4+0x156>

000b94a8 <__aeabi_idiv0>:
   b94a8:	4770      	bx	lr
   b94aa:	bf00      	nop

000b94ac <asctime_r>:
   b94ac:	b510      	push	{r4, lr}
   b94ae:	460c      	mov	r4, r1
   b94b0:	6941      	ldr	r1, [r0, #20]
   b94b2:	6903      	ldr	r3, [r0, #16]
   b94b4:	6982      	ldr	r2, [r0, #24]
   b94b6:	b086      	sub	sp, #24
   b94b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   b94bc:	9104      	str	r1, [sp, #16]
   b94be:	6801      	ldr	r1, [r0, #0]
   b94c0:	9103      	str	r1, [sp, #12]
   b94c2:	6841      	ldr	r1, [r0, #4]
   b94c4:	9102      	str	r1, [sp, #8]
   b94c6:	6881      	ldr	r1, [r0, #8]
   b94c8:	9101      	str	r1, [sp, #4]
   b94ca:	68c1      	ldr	r1, [r0, #12]
   b94cc:	9100      	str	r1, [sp, #0]
   b94ce:	4907      	ldr	r1, [pc, #28]	; (b94ec <asctime_r+0x40>)
   b94d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b94d4:	440b      	add	r3, r1
   b94d6:	4906      	ldr	r1, [pc, #24]	; (b94f0 <asctime_r+0x44>)
   b94d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b94dc:	440a      	add	r2, r1
   b94de:	4620      	mov	r0, r4
   b94e0:	4904      	ldr	r1, [pc, #16]	; (b94f4 <asctime_r+0x48>)
   b94e2:	f7fc fb7d 	bl	b5be0 <siprintf>
   b94e6:	4620      	mov	r0, r4
   b94e8:	b006      	add	sp, #24
   b94ea:	bd10      	pop	{r4, pc}
   b94ec:	000b9b95 	.word	0x000b9b95
   b94f0:	000b9b80 	.word	0x000b9b80
   b94f4:	000b9b60 	.word	0x000b9b60

000b94f8 <atexit>:
   b94f8:	2300      	movs	r3, #0
   b94fa:	4601      	mov	r1, r0
   b94fc:	461a      	mov	r2, r3
   b94fe:	4618      	mov	r0, r3
   b9500:	f000 b872 	b.w	b95e8 <__register_exitproc>

000b9504 <memcpy>:
   b9504:	440a      	add	r2, r1
   b9506:	4291      	cmp	r1, r2
   b9508:	f100 33ff 	add.w	r3, r0, #4294967295
   b950c:	d100      	bne.n	b9510 <memcpy+0xc>
   b950e:	4770      	bx	lr
   b9510:	b510      	push	{r4, lr}
   b9512:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9516:	f803 4f01 	strb.w	r4, [r3, #1]!
   b951a:	4291      	cmp	r1, r2
   b951c:	d1f9      	bne.n	b9512 <memcpy+0xe>
   b951e:	bd10      	pop	{r4, pc}

000b9520 <memset>:
   b9520:	4402      	add	r2, r0
   b9522:	4603      	mov	r3, r0
   b9524:	4293      	cmp	r3, r2
   b9526:	d100      	bne.n	b952a <memset+0xa>
   b9528:	4770      	bx	lr
   b952a:	f803 1b01 	strb.w	r1, [r3], #1
   b952e:	e7f9      	b.n	b9524 <memset+0x4>

000b9530 <srand>:
   b9530:	b538      	push	{r3, r4, r5, lr}
   b9532:	4b10      	ldr	r3, [pc, #64]	; (b9574 <srand+0x44>)
   b9534:	681d      	ldr	r5, [r3, #0]
   b9536:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9538:	4604      	mov	r4, r0
   b953a:	b9b3      	cbnz	r3, b956a <srand+0x3a>
   b953c:	2018      	movs	r0, #24
   b953e:	f7fc fb37 	bl	b5bb0 <malloc>
   b9542:	4602      	mov	r2, r0
   b9544:	63a8      	str	r0, [r5, #56]	; 0x38
   b9546:	b920      	cbnz	r0, b9552 <srand+0x22>
   b9548:	4b0b      	ldr	r3, [pc, #44]	; (b9578 <srand+0x48>)
   b954a:	480c      	ldr	r0, [pc, #48]	; (b957c <srand+0x4c>)
   b954c:	2142      	movs	r1, #66	; 0x42
   b954e:	f7fc fb67 	bl	b5c20 <__assert_func>
   b9552:	490b      	ldr	r1, [pc, #44]	; (b9580 <srand+0x50>)
   b9554:	4b0b      	ldr	r3, [pc, #44]	; (b9584 <srand+0x54>)
   b9556:	e9c0 1300 	strd	r1, r3, [r0]
   b955a:	4b0b      	ldr	r3, [pc, #44]	; (b9588 <srand+0x58>)
   b955c:	6083      	str	r3, [r0, #8]
   b955e:	230b      	movs	r3, #11
   b9560:	8183      	strh	r3, [r0, #12]
   b9562:	2100      	movs	r1, #0
   b9564:	2001      	movs	r0, #1
   b9566:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b956a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b956c:	2200      	movs	r2, #0
   b956e:	611c      	str	r4, [r3, #16]
   b9570:	615a      	str	r2, [r3, #20]
   b9572:	bd38      	pop	{r3, r4, r5, pc}
   b9574:	2003e4c4 	.word	0x2003e4c4
   b9578:	000b9bb9 	.word	0x000b9bb9
   b957c:	000b9bd0 	.word	0x000b9bd0
   b9580:	abcd330e 	.word	0xabcd330e
   b9584:	e66d1234 	.word	0xe66d1234
   b9588:	0005deec 	.word	0x0005deec

000b958c <strcpy>:
   b958c:	4603      	mov	r3, r0
   b958e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9592:	f803 2b01 	strb.w	r2, [r3], #1
   b9596:	2a00      	cmp	r2, #0
   b9598:	d1f9      	bne.n	b958e <strcpy+0x2>
   b959a:	4770      	bx	lr

000b959c <strdup>:
   b959c:	4b02      	ldr	r3, [pc, #8]	; (b95a8 <strdup+0xc>)
   b959e:	4601      	mov	r1, r0
   b95a0:	6818      	ldr	r0, [r3, #0]
   b95a2:	f000 b803 	b.w	b95ac <_strdup_r>
   b95a6:	bf00      	nop
   b95a8:	2003e4c4 	.word	0x2003e4c4

000b95ac <_strdup_r>:
   b95ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b95ae:	4604      	mov	r4, r0
   b95b0:	4608      	mov	r0, r1
   b95b2:	460d      	mov	r5, r1
   b95b4:	f000 f80f 	bl	b95d6 <strlen>
   b95b8:	1c42      	adds	r2, r0, #1
   b95ba:	4611      	mov	r1, r2
   b95bc:	4620      	mov	r0, r4
   b95be:	9201      	str	r2, [sp, #4]
   b95c0:	f7fc fb1e 	bl	b5c00 <_malloc_r>
   b95c4:	4604      	mov	r4, r0
   b95c6:	b118      	cbz	r0, b95d0 <_strdup_r+0x24>
   b95c8:	9a01      	ldr	r2, [sp, #4]
   b95ca:	4629      	mov	r1, r5
   b95cc:	f7ff ff9a 	bl	b9504 <memcpy>
   b95d0:	4620      	mov	r0, r4
   b95d2:	b003      	add	sp, #12
   b95d4:	bd30      	pop	{r4, r5, pc}

000b95d6 <strlen>:
   b95d6:	4603      	mov	r3, r0
   b95d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b95dc:	2a00      	cmp	r2, #0
   b95de:	d1fb      	bne.n	b95d8 <strlen+0x2>
   b95e0:	1a18      	subs	r0, r3, r0
   b95e2:	3801      	subs	r0, #1
   b95e4:	4770      	bx	lr
	...

000b95e8 <__register_exitproc>:
   b95e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b95ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b96a8 <__register_exitproc+0xc0>
   b95f0:	4606      	mov	r6, r0
   b95f2:	f8d8 0000 	ldr.w	r0, [r8]
   b95f6:	461f      	mov	r7, r3
   b95f8:	460d      	mov	r5, r1
   b95fa:	4691      	mov	r9, r2
   b95fc:	f000 f856 	bl	b96ac <__retarget_lock_acquire_recursive>
   b9600:	4b25      	ldr	r3, [pc, #148]	; (b9698 <__register_exitproc+0xb0>)
   b9602:	681c      	ldr	r4, [r3, #0]
   b9604:	b934      	cbnz	r4, b9614 <__register_exitproc+0x2c>
   b9606:	4c25      	ldr	r4, [pc, #148]	; (b969c <__register_exitproc+0xb4>)
   b9608:	601c      	str	r4, [r3, #0]
   b960a:	4b25      	ldr	r3, [pc, #148]	; (b96a0 <__register_exitproc+0xb8>)
   b960c:	b113      	cbz	r3, b9614 <__register_exitproc+0x2c>
   b960e:	681b      	ldr	r3, [r3, #0]
   b9610:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9614:	6863      	ldr	r3, [r4, #4]
   b9616:	2b1f      	cmp	r3, #31
   b9618:	dd07      	ble.n	b962a <__register_exitproc+0x42>
   b961a:	f8d8 0000 	ldr.w	r0, [r8]
   b961e:	f000 f847 	bl	b96b0 <__retarget_lock_release_recursive>
   b9622:	f04f 30ff 	mov.w	r0, #4294967295
   b9626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b962a:	b34e      	cbz	r6, b9680 <__register_exitproc+0x98>
   b962c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9630:	b988      	cbnz	r0, b9656 <__register_exitproc+0x6e>
   b9632:	4b1c      	ldr	r3, [pc, #112]	; (b96a4 <__register_exitproc+0xbc>)
   b9634:	b923      	cbnz	r3, b9640 <__register_exitproc+0x58>
   b9636:	f8d8 0000 	ldr.w	r0, [r8]
   b963a:	f000 f838 	bl	b96ae <__retarget_lock_release>
   b963e:	e7f0      	b.n	b9622 <__register_exitproc+0x3a>
   b9640:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9644:	f7fc fab4 	bl	b5bb0 <malloc>
   b9648:	2800      	cmp	r0, #0
   b964a:	d0f4      	beq.n	b9636 <__register_exitproc+0x4e>
   b964c:	2300      	movs	r3, #0
   b964e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9652:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9656:	6863      	ldr	r3, [r4, #4]
   b9658:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b965c:	2201      	movs	r2, #1
   b965e:	409a      	lsls	r2, r3
   b9660:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9664:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9668:	4313      	orrs	r3, r2
   b966a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b966e:	2e02      	cmp	r6, #2
   b9670:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9674:	bf02      	ittt	eq
   b9676:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b967a:	4313      	orreq	r3, r2
   b967c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9680:	6863      	ldr	r3, [r4, #4]
   b9682:	f8d8 0000 	ldr.w	r0, [r8]
   b9686:	1c5a      	adds	r2, r3, #1
   b9688:	3302      	adds	r3, #2
   b968a:	6062      	str	r2, [r4, #4]
   b968c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9690:	f000 f80e 	bl	b96b0 <__retarget_lock_release_recursive>
   b9694:	2000      	movs	r0, #0
   b9696:	e7c6      	b.n	b9626 <__register_exitproc+0x3e>
   b9698:	2003e7ec 	.word	0x2003e7ec
   b969c:	2003e760 	.word	0x2003e760
   b96a0:	00000000 	.word	0x00000000
   b96a4:	000b5bb1 	.word	0x000b5bb1
   b96a8:	2003e528 	.word	0x2003e528

000b96ac <__retarget_lock_acquire_recursive>:
   b96ac:	4770      	bx	lr

000b96ae <__retarget_lock_release>:
   b96ae:	4770      	bx	lr

000b96b0 <__retarget_lock_release_recursive>:
   b96b0:	4770      	bx	lr

000b96b2 <link_code_end>:
	...

000b96b4 <dynalib_user>:
   b96b4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b96c4:	0000 0000 5420 6d65 3a70 2c00 2000 6544     .... Temp:.,. De
   b96d4:	7470 3a68 2000 7250 7365 7573 6572 003a     pth:. Pressure:.
   b96e4:	4120 534c 203a 2000 6944 7373 6c6f 6576      ALS: . Dissolve
   b96f4:	2064 6f53 696c 7364 2820 7070 296d 203a     d Solids (ppm): 
   b9704:	2000 4c49 3a53 0020 7750 2e72 7553 7070     . ILS: .Pwr.Supp
   b9714:	796c 003a 6843 6365 736b 6d75 203a 4900     ly:.Checksum: .I
   b9724:	696e 6974 6c61 7a69 6e69 2067 6f50 6577     nitializing Powe
   b9734:	2072 6f43 666e 6769 4400 7065 6874 542c     r Config.Depth,T
   b9744:	6d65 6570 6172 7574 6572 202c 7554 6272     emperature, Turb
   b9754:	6469 7469 2079 6e61 2064 4454 2053 6144     idity and TDS Da
   b9764:	6174 4120 7163 6975 6973 6974 6e6f 5600     ta Acquisition.V
   b9774:	4d45 374c 3037 2030 6553 736e 726f 6e20     EML7700 Sensor n
   b9784:	746f 6620 756f 646e 202c 6168 676e 6e69     ot found, hangin
   b9794:	2067 6568 6572 2e2e 002e 6553 736e 726f     g here....Sensor
   b97a4:	6620 756f 646e 4700 6961 3a6e 0020 0031      found.Gain: .1.
   b97b4:	0032 2f31 0034 2f31 0038 6e49 6574 7267     2.1/4.1/8.Integr
   b97c4:	7461 6f69 206e 6954 656d 2820 736d 3a29     ation Time (ms):
   b97d4:	0020 3532 3500 0030 3031 0030 3032 0030      .25.50.100.200.
   b97e4:	3034 0030 3038 0030 2a2a 2a2a 2a2a 492a     400.800.*******I
   b97f4:	696e 6974 6c61 4120 534c 2a3a 2a2a 2a2a     nitial ALS:*****
   b9804:	2a2a 0020 7245 6f72 3a72 4c20 5350 3832     ** .Error: LPS28
   b9814:	4644 2057 6f6e 2074 6f63 6e6e 6365 6574     DFW not connecte
   b9824:	2c64 6320 6568 6b63 7720 7269 6e69 2067     d, check wiring 
   b9834:	6e61 2064 3249 2043 6461 7264 7365 2173     and I2C address!
   b9844:	4400 7065 6874 5320 6e65 6f73 2072 6f43     .Depth Sensor Co
   b9854:	6e6e 6365 6574 2e64 2e2e 4900 696e 6974     nnected....Initi
   b9864:	6c61 6120 7269 7020 6572 7373 7275 2065     al air pressure 
   b9874:	6572 6461 6e69 3a67 0020 2a2a 2a2a 2a2a     reading: .******
   b9884:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   b9894:	2a2a 2a2a 002a 6553 646e 6e69 2067 6557     *****.Sending We
   b98a4:	6862 6f6f 2e6b 2e2e 7b00 2200 6176 3272     bhook....{."var2
   b98b4:	0022 7622 7261 2233 2200 6176 3472 0022     "."var3"."var4".
   b98c4:	7622 7261 2235 7d00 7600 7261 2d73 6574     "var5".}.vars-te
   b98d4:	7473 5300 7274 6e69 2067 6f43 636e 6e61     st.String Concan
   b98e4:	6574 616e 6974 6e6f 3a73 5300 7265 6576     tenations:.Serve
   b98f4:	2072 6954 656d 4120 6464 6465 5400 6d65     r Time Added.Tem
   b9904:	6570 6172 7574 6572 203a 4100 6d74 202e     perature: .Atm. 
   b9914:	7250 7365 7573 6572 203a 4900 706e 7475     Pressure: .Input
   b9924:	5620 6c6f 6174 6567 203a 4400 7065 6874      Voltage: .Depth
   b9934:	203a 5400 5344 5020 616c 6563 6f68 646c     : .TDS Placehold
   b9944:	7265 203a 5000 7277 532e 7075 6c70 2079     er: .Pwr.Supply 
   b9954:	6f56 746c 6761 3a65 0020 6f50 6577 6972     Voltage: .Poweri
   b9964:	676e 6f20 6666 202c 6f67 6e69 2067 6f74     ng off, going to
   b9974:	7320 656c 7065 2e2e 002e 0000                sleep......

000b9980 <_ZTVN5spark13EthernetClassE>:
	...
   b9988:	5caf 000b 5ca5 000b 5c9b 000b 5c91 000b     .\...\...\...\..
   b9998:	5c85 000b 5c79 000b 71f9 000b 7201 000b     .\..y\...q...r..
   b99a8:	5c6d 000b 5c65 000b 5c5b 000b 5c51 000b     m\..e\..[\..Q\..
   b99b8:	7231 000b 6977 6972 676e 5300 7379 6574     1r..wiring.Syste
   b99c8:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b99d8:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b99e8:	002e 616e 006e 6e69 0066 766f 0066 7061     ..nan.inf.ovf.ap
   b99f8:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
   b9a08:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b9a18 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9a20:	67d9 000b 67df 000b 681d 000b 67ed 000b     .g...g...h...g..
   b9a30:	67db 000b                                   .g..

000b9a34 <_ZTV9IPAddress>:
	...
   b9a3c:	6d19 000b 6d09 000b 6d0b 000b               .m...m...m..

000b9a48 <_ZTV9USBSerial>:
	...
   b9a50:	6dff 000b 6e67 000b 6e3d 000b 6235 000b     .m..gn..=n..5b..
   b9a60:	6e2f 000b 6e01 000b 6e11 000b 6e61 000b     /n...n...n..an..
   b9a70:	6e21 000b 6df9 000b                         !n...m..

000b9a78 <_ZTVN5spark13CellularClassE>:
	...
   b9a80:	6f6b 000b 6f61 000b 6f57 000b 6f0d 000b     ko..ao..Wo...o..
   b9a90:	6f4b 000b 6f3f 000b 71f9 000b 7201 000b     Ko..?o...q...r..
   b9aa0:	6f33 000b 6f2b 000b 6f21 000b 6f17 000b     3o..+o..!o...o..
   b9ab0:	7231 000b                                   1r..

000b9ab4 <_ZTV11USARTSerial>:
	...
   b9abc:	6fa5 000b 7011 000b 6fe9 000b 6235 000b     .o...p...o..5b..
   b9acc:	6fb9 000b 6fd5 000b 6fc7 000b 6fe3 000b     .o...o...o...o..
   b9adc:	6fa7 000b 6fab 000b                         .o...o..

000b9ae4 <_ZTV7TwoWire>:
	...
   b9aec:	707f 000b 70c9 000b 70a1 000b 7081 000b     .p...p...p...p..
   b9afc:	70a9 000b 70b1 000b 70b9 000b 70c1 000b     .p...p...p...p..

000b9b0c <_ZTVN5spark12NetworkClassE>:
	...
   b9b14:	71b9 000b 71c3 000b 71cd 000b 71d7 000b     .q...q...q...q..
   b9b24:	71e1 000b 71ed 000b 71f9 000b 7201 000b     .q...q...q...r..
   b9b34:	7209 000b 7215 000b 721d 000b 7227 000b     .r...r...r..'r..
   b9b44:	7231 000b                                   1r..

000b9b48 <_ZSt7nothrow>:
	...

000b9b50 <TWO52>:
   b9b50:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b9b60:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   b9b70:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000b9b80 <day_name.1>:
   b9b80:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   b9b90:	6972 6153                                    riSat

000b9b95 <mon_name.0>:
   b9b95:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   b9ba5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   b9bb5:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   b9bc5:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
   b9bd5:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
   b9be5:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
   b9bf5:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
   b9c05:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
   b9c15:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
   b9c25:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
   b9c35:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
   b9c45:	722f 6e61 2e64 0063                         /rand.c.

000b9c4d <link_const_variable_data_end>:
   b9c4d:	00          	.byte	0x00
	...

000b9c50 <link_constructors_location>:
   b9c50:	000b4f45 	.word	0x000b4f45
   b9c54:	000b5cb9 	.word	0x000b5cb9
   b9c58:	000b5e01 	.word	0x000b5e01
   b9c5c:	000b6225 	.word	0x000b6225
   b9c60:	000b64f1 	.word	0x000b64f1
   b9c64:	000b6631 	.word	0x000b6631
   b9c68:	000b664d 	.word	0x000b664d
   b9c6c:	000b6f75 	.word	0x000b6f75
   b9c70:	000b7309 	.word	0x000b7309

000b9c74 <link_constructors_end>:
	...
